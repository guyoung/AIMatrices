[package]
name = "ai-matrices"
version = "0.1.0"
edition = "2021"


[workspace]
members = [
    "crates/candle",

    "crates/infer/*",

    "crates/qjsruntime/llrt/*",
    "crates/qjsruntime/qjsruntime-modules/*",
    "crates/qjsruntime/qjsruntime-compression",
    "crates/qjsruntime/qjsruntime-core",

    "crates/wasmruntime/spin/*",
    "crates/wasmruntime/spin-factor/*",
    "crates/wasmruntime/wasmruntime-factors/*",
    "crates/wasmruntime/wasmruntime-server/*",
    "crates/wasmruntime/wasmruntime-core",
    "crates/wasmruntime/wasmruntime-key-value",
    "crates/wasmruntime/wasmruntime-system",
    "crates/wasmruntime-comp-sdk",

    "packages/*",

    "components/*",


]

exclude = [
    "crates/infer/build",
]

[workspace.package]
version = "0.1.0"
authors = ["guyoung"]
edition = "2021"
license = "Apache-2.0"
repository = "https://github.com/guyoung/AIMatrices"


[workspace.dependencies]

## wasmtime
wasmtime = { version = "25.0" }
wasmtime-wasi = { version = "25.0" }
wasmtime-wasi-http = { version = "25.0" }
wasi-common= { version = "25.0" }
wasi = { version = "0.14" }
wasm-pkg-common= { version = "0.9" }

wit-bindgen-rt = { version = "0.36.0", features = ["bitflags"] }

## axum
axum = { version = "0.8" }

tower-http = { version = "0.6" }

axum-auth = { version = "0.8", default-features = false }

## rquickjs
rquickjs = { version = "0.8.1", default-features = false }

## surrealdb
surrealdb = { path="thirdparty/surrealdb-wrapper", package="surrealdb-wrapper" }
rocksdb = { path="thirdparty/rocksdb-wrapper", package="rocksdb-wrapper" }


## tokio-cron-scheduler
tokio-cron-scheduler = {  version = "0.13" }

## candle
candle = { package = "candle-core",version = "0.8" }
candle-nn = { version = "0.8" }
candle-flash-attn = { version = "0.8" }

cudarc = { version = "0.12", features = ["std", "cublas", "cublaslt", "curand", "driver", "nvrtc", "f16", "cuda-version-from-build-system", "dynamic-linking"], default-features=false }
tokenizers = { version = "0.19", default-features = false }

## basic
anyhow = { version = "1" }
bytes = { version = "1.9" }
clap = { version = "4", features = ["derive"] }
chrono = { version = "0.4" }
either = { version = "1.13" }
indexmap = { version = "2.7" }
log = { version = "0.4" }
once_cell = { version = "1.19" }
rand = { version = "0.8" }
serde = { version = "1", features = ["derive", "rc"] }
serde_json = { version = "1" }
serde_plain = { version = "1" }
thiserror = { version = "1.0" }
tracing = { version = "0.1", features = ["log"] }
tracing-core = { version = "0.1" }

miniserde = { version = "0.1" }

## async
async-trait = { version = "0.1" }
futures = { version = "0.3" }
futures-util = { version = "0.3" }
tokio = { version = "1", default-features = false }

## compression
brotlic = { version = "0.8" }
brotli = { version = "7.0" }
flate2 = { version = "1.0", default-features = false }
zstd = { version = "0.13", default-features = false }

## cyptro
md-5 = { version = "0.10" }
memchr = { version = "2.7" }
ring = { version = "0.17" }
sha2 = { version = "0.10" }

## encode
base64 = { version = "0.22" }
base64-simd = { version = "0.8" }
crc32c = { version = "0.6" }
crc32fast = { version = "1.4" }
encoding_rs = { version = "0.8" }
hex = { version = "0.4" }
hex-simd = { version = "0.8" }
percent-encoding = { version = "2.3" }
phf = { version = "0.11", features = ["macros"] }
simd-json = { version = "0.14", default-features = false }
uuid = { version = "1.11", default-features = false }
uuid-simd = { version = "0.8" }
urlencoding = { version = "2.1" }

## image
image = { version = "0.25", default-features = false }

## macro
derive_builder = { version = "0.20" }


## media
hound = { version = "3.5" }


## net
ipnet = { version = "2.10" }
ip_network = { version = "0.4" }

http = { version = "1.2" }
http-body-util = { version = "0.1" }
hyper = { version = "1.5", features = ["full"] }
mime_guess = { version = "2.0" }
reqwest = { version = "0.12",  features = ["json"] }
routefinder = { version = "0.5" }
url = { version = "2.5" }

rustls = { version = "0.23", default-features = false, features = ["ring", "std", "logging", "tls12"] }
rustls-pki-types = { version = "1.10" }
tokio-rustls = { version = "0.26", default-features = false, features = ["logging", "tls12"] }
### Mozilla's CA root certificates for use with webpki
webpki-roots = { version = "0.26" }

## number
itoa = { version = "1" }
ryu = { version = "1.0" }

## ffi
libc = { version = "0.2" }

## build-dependencies
bindgen = { version = "0.69" }
cc = { version = "1.2", features = ["parallel"] }
cmake = { version = "0.1" }
glob = { version = "0.3" }

## other
### Easy Ctrl-C handler for Rust projects
ctrlc = { version = "3.4", features = ["termination"] }

### provides the location of these directories
dirs = { version = "6.0" }

### A well-maintained fork of the dotenv crate
dotenvy =  { version = "0.15" }

### Enum-based bit flags
enumflags2 = { version = "0.7" }

### A Rust library that provides additional functionality not present in std::fs.
fs_extra = { version = "1.3" }

### A LRU cache implementation
lru = { version = "0.12" }

### A tiny, secure, URL-friendly, unique string ID generator for Rust.
nanoid = { version = "0.4" }

### Get the number of CPUs on a machine.
num_cpus = { version = "1.16" }

### A library for extending `Path` and `PathBuf` in order to get an absolute path and remove the containing dots.
path-absolutize = { version = "3.1" }

### High performance xml reader and writer
quick-xml = { version = "0.37" }

### A simple filename sanitizer, based on Node's sanitize-filename
sanitize-filename = { version = "0.6" }

### Parser and evaluator for Cargo's flavor of Semantic Versioning
semver = { version = "1.0", features = ["serde"] }

### Gets the size of your Linux or Windows terminal
terminal_size = { version = "0.4" }

### serde-compatible TOML decoder and encoder
toml = { version = "0.8" }

[patch.crates-io]
cudarc = { git = "https://github.com/guyoung/cudarc" }


[profile.release]
codegen-units = 1

debug = false # include debug symbols, useful when profiling wasm

lto = true # VERY slightly smaller wasm

# opt-level = 's' # 10-20% smaller wasm compared to `opt-level = 3`
# opt-level = rendering_test # very slow and big wasm. Don't do this.
#opt-level = 2 # fast and small wasm, basically same as `opt-level = 's'`
# opt-level = 3 # unnecessarily large wasm for no performance gain
opt-level = 's'

panic = "abort" # This leads to better optimizations and smaller binaries (and is the default in Wasm anyways).

strip = true

[profile.dev]
# Can't leave this on by default, because it breaks the Windows build. Related: https://github.com/rust-lang/cargo/issues/4897
# split-debuginfo = "unpacked" # faster debug builds on mac
# opt-level = rendering_test                # Make debug builds run faster

# panic = "abort" leads to better optimizations and smaller binaries (and is the default in Wasm anyways),
# but it also means backtraces don't work with the `backtrace` library (https://github.com/rust-lang/backtrace-rs/issues/397).
# egui has a feature where if you hold down all modifiers keys on your keyboard and hover any UI widget,
# you will see the backtrace to that widget, and we don't want to break that feature in dev builds.

[profile.dev.package."*"]
# Optimize all dependencies even in debug builds (does not affect workspace packages):
opt-level = 2
