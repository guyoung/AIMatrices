/* automatically generated by rust-bindgen 0.69.5 */

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(dead_code)]

pub const NCNN_STDIO: u32 = 1;
pub const NCNN_STRING: u32 = 1;
pub const NCNN_SIMPLEOCV: u32 = 0;
pub const NCNN_SIMPLEOMP: u32 = 0;
pub const NCNN_SIMPLESTL: u32 = 0;
pub const NCNN_SIMPLEMATH: u32 = 0;
pub const NCNN_THREADS: u32 = 1;
pub const NCNN_BENCHMARK: u32 = 0;
pub const NCNN_C_API: u32 = 1;
pub const NCNN_PLATFORM_API: u32 = 1;
pub const NCNN_PIXEL: u32 = 1;
pub const NCNN_PIXEL_ROTATE: u32 = 1;
pub const NCNN_PIXEL_AFFINE: u32 = 1;
pub const NCNN_PIXEL_DRAWING: u32 = 1;
pub const NCNN_VULKAN: u32 = 1;
pub const NCNN_SIMPLEVK: u32 = 1;
pub const NCNN_SYSTEM_GLSLANG: u32 = 0;
pub const NCNN_RUNTIME_CPU: u32 = 1;
pub const NCNN_GNU_INLINE_ASM: u32 = 1;
pub const NCNN_AVX: u32 = 1;
pub const NCNN_XOP: u32 = 1;
pub const NCNN_FMA: u32 = 1;
pub const NCNN_F16C: u32 = 1;
pub const NCNN_AVX2: u32 = 1;
pub const NCNN_AVXVNNI: u32 = 1;
pub const NCNN_AVXVNNIINT8: u32 = 1;
pub const NCNN_AVXVNNIINT16: u32 = 1;
pub const NCNN_AVXNECONVERT: u32 = 1;
pub const NCNN_AVX512: u32 = 1;
pub const NCNN_AVX512VNNI: u32 = 1;
pub const NCNN_AVX512BF16: u32 = 1;
pub const NCNN_AVX512FP16: u32 = 1;
pub const NCNN_VFPV4: u32 = 0;
pub const NCNN_ARM82: u32 = 0;
pub const NCNN_ARM82DOT: u32 = 0;
pub const NCNN_ARM82FP16FML: u32 = 0;
pub const NCNN_ARM84BF16: u32 = 0;
pub const NCNN_ARM84I8MM: u32 = 0;
pub const NCNN_ARM86SVE: u32 = 0;
pub const NCNN_ARM86SVE2: u32 = 0;
pub const NCNN_ARM86SVEBF16: u32 = 0;
pub const NCNN_ARM86SVEI8MM: u32 = 0;
pub const NCNN_ARM86SVEF32MM: u32 = 0;
pub const NCNN_MSA: u32 = 0;
pub const NCNN_LSX: u32 = 0;
pub const NCNN_MMI: u32 = 0;
pub const NCNN_RVV: u32 = 0;
pub const NCNN_ZFH: u32 = 0;
pub const NCNN_ZVFH: u32 = 0;
pub const NCNN_XTHEADVECTOR: u32 = 0;
pub const NCNN_INT8: u32 = 1;
pub const NCNN_BF16: u32 = 1;
pub const NCNN_FORCE_INLINE: u32 = 1;
pub const NCNN_VERSION_STRING: &[u8; 13] = b"1.0.20250131\0";
pub const NCNN_MALLOC_ALIGN: u32 = 64;
pub const NCNN_MALLOC_OVERREAD: u32 = 64;
pub const NCNN_MAT_PIXEL_RGB: u32 = 1;
pub const NCNN_MAT_PIXEL_BGR: u32 = 2;
pub const NCNN_MAT_PIXEL_GRAY: u32 = 3;
pub const NCNN_MAT_PIXEL_RGBA: u32 = 4;
pub const NCNN_MAT_PIXEL_BGRA: u32 = 5;
pub const NCNN_BORDER_CONSTANT: u32 = 0;
pub const NCNN_BORDER_REPLICATE: u32 = 1;
pub const NCNN_BORDER_REFLECT: u32 = 2;
pub const NCNN_BORDER_TRANSPARENT: i32 = -233;
pub type DWORD = ::std::os::raw::c_ulong;
pub type PVOID = *mut ::std::os::raw::c_void;
pub type HANDLE = *mut ::std::os::raw::c_void;
pub type __m128 = [f32; 4usize];
pub type std_integral_constant_value_type<_Tp> = _Tp;
pub type std_integral_constant_type = u8;
pub type std_true_type = u8;
pub type std_false_type = u8;
pub type std___enable_if_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___type_identity {
    pub _address: u8,
}
pub type std___type_identity_type<_Type> = _Type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___and_ {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_make_unsigned {
    pub _address: u8,
}
pub type std_make_unsigned_type = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detector {
    pub _address: u8,
}
pub type std___detector_type<_Default> = _Default;
pub type std___detector___is_detected = std_false_type;
pub type std___detected_or = std___detector;
pub type std___detected_or_t = std___detected_or;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_iterator {
    pub _address: u8,
}
pub type std_iterator_iterator_category<_Category> = _Category;
pub type std_iterator_value_type<_Tp> = _Tp;
pub type std_iterator_difference_type<_Distance> = _Distance;
pub type std_iterator_pointer<_Pointer> = _Pointer;
pub type std_iterator_reference<_Reference> = _Reference;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___iterator_traits {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_iterator_traits {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___undefined {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___get_first_arg {
    pub _address: u8,
}
pub type std___get_first_arg_type = std___undefined;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___replace_first_arg {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___ptr_traits_elem {
    pub _address: u8,
}
pub type std___ptr_traits_elem_t = std___ptr_traits_elem;
pub type std___ptr_traits_ptr_to_pointer<_Ptr> = _Ptr;
pub type std___ptr_traits_ptr_to_element_type<_Elt> = _Elt;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___ptr_traits_impl {
    pub _address: u8,
}
pub type std___ptr_traits_impl___diff_t = [u8; 0usize];
pub type std___ptr_traits_impl___rebind = std___type_identity;
pub type std___ptr_traits_impl_pointer<_Ptr> = _Ptr;
pub type std___ptr_traits_impl_element_type<_Elt> = _Elt;
pub type std___ptr_traits_impl_difference_type = std___detected_or_t;
pub type std___ptr_traits_impl_rebind = std___detected_or_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pointer_traits {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_reverse_iterator<_Iterator> {
    pub current: _Iterator,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
}
pub type std_reverse_iterator___traits_type = std_iterator_traits;
pub type std_reverse_iterator_iterator_type<_Iterator> = _Iterator;
pub type std_reverse_iterator_pointer = std_reverse_iterator___traits_type;
pub type std_reverse_iterator_difference_type = std_reverse_iterator___traits_type;
pub type std_reverse_iterator_reference = std_reverse_iterator___traits_type;
#[repr(C)]
#[derive(Debug)]
pub struct std___new_allocator {
    pub _address: u8,
}
pub type std___new_allocator_value_type<_Tp> = _Tp;
pub type std___new_allocator_size_type = usize;
pub type std___new_allocator_difference_type = isize;
pub type std___new_allocator_pointer<_Tp> = *mut _Tp;
pub type std___new_allocator_const_pointer<_Tp> = *const _Tp;
pub type std___new_allocator_reference<_Tp> = *mut _Tp;
pub type std___new_allocator_const_reference<_Tp> = *const _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___new_allocator_rebind {
    pub _address: u8,
}
pub type std___new_allocator_propagate_on_container_move_assignment = std_true_type;
pub type std___allocator_base = std___new_allocator;
#[repr(C)]
#[derive(Debug)]
pub struct std_allocator {
    pub _address: u8,
}
pub type std_allocator_value_type<_Tp> = _Tp;
pub type std_allocator_size_type = usize;
pub type std_allocator_difference_type = isize;
pub type std_allocator_pointer<_Tp> = *mut _Tp;
pub type std_allocator_const_pointer<_Tp> = *const _Tp;
pub type std_allocator_reference<_Tp> = *mut _Tp;
pub type std_allocator_const_reference<_Tp> = *const _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_rebind {
    pub _address: u8,
}
pub type std_allocator_rebind_other = std_allocator;
pub type std_allocator_propagate_on_container_move_assignment = std_true_type;
pub type std_allocator_is_always_equal = std_true_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___allocator_traits_base {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___allocator_traits_base___rebind {
    pub _address: u8,
}
pub type std___allocator_traits_base___pointer = [u8; 0usize];
pub type std___allocator_traits_base___c_pointer = [u8; 0usize];
pub type std___allocator_traits_base___v_pointer = [u8; 0usize];
pub type std___allocator_traits_base___cv_pointer = [u8; 0usize];
pub type std___allocator_traits_base___pocca = [u8; 0usize];
pub type std___allocator_traits_base___pocma = [u8; 0usize];
pub type std___allocator_traits_base___pocs = [u8; 0usize];
pub type std___allocator_traits_base___equal = std___type_identity;
#[test]
fn bindgen_test_layout_std___allocator_traits_base() {
    assert_eq!(
        ::std::mem::size_of::<std___allocator_traits_base>(),
        1usize,
        concat!("Size of: ", stringify!(std___allocator_traits_base))
    );
    assert_eq!(
        ::std::mem::align_of::<std___allocator_traits_base>(),
        1usize,
        concat!("Alignment of ", stringify!(std___allocator_traits_base))
    );
}
pub type std___alloc_rebind = std___allocator_traits_base;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_traits {
    pub _address: u8,
}
pub type std_allocator_traits_allocator_type<_Alloc> = _Alloc;
pub type std_allocator_traits_value_type = [u8; 0usize];
pub type std_allocator_traits_pointer = std___detected_or_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_traits__Ptr {
    pub _address: u8,
}
pub type std_allocator_traits__Ptr_type = [u8; 0usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_traits__Diff {
    pub _address: u8,
}
pub type std_allocator_traits__Diff_type = std_pointer_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_traits__Size {
    pub _address: u8,
}
pub type std_allocator_traits_const_pointer = [u8; 0usize];
pub type std_allocator_traits_void_pointer = std_allocator_traits__Ptr;
pub type std_allocator_traits_const_void_pointer = std_allocator_traits__Ptr;
pub type std_allocator_traits_difference_type = [u8; 0usize];
pub type std_allocator_traits_size_type = [u8; 0usize];
pub type std_allocator_traits_propagate_on_container_copy_assignment = std___detected_or_t;
pub type std_allocator_traits_propagate_on_container_move_assignment = std___detected_or_t;
pub type std_allocator_traits_propagate_on_container_swap = std___detected_or_t;
pub type std_allocator_traits_is_always_equal = std___detected_or_t;
pub type std_allocator_traits_rebind_alloc = std___alloc_rebind;
pub type std_allocator_traits_rebind_traits = std_allocator_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_traits___construct_helper {
    pub _address: u8,
}
pub type std_allocator_traits___construct_helper_type<_Alloc> = _Alloc;
pub type std_allocator_traits___has_construct = std_allocator_traits___construct_helper;
#[repr(C)]
pub struct std__Vector_base {
    pub _M_impl: std__Vector_base__Vector_impl,
}
pub type std__Vector_base__Tp_alloc_type = [u8; 0usize];
pub type std__Vector_base_pointer = [u8; 0usize];
#[repr(C)]
pub struct std__Vector_base__Vector_impl_data {
    pub _M_start: std__Vector_base_pointer,
    pub _M_finish: std__Vector_base_pointer,
    pub _M_end_of_storage: std__Vector_base_pointer,
}
#[repr(C)]
pub struct std__Vector_base__Vector_impl {
    pub _base_1: std__Vector_base__Vector_impl_data,
}
pub type std__Vector_base_allocator_type<_Alloc> = _Alloc;
#[repr(C)]
pub struct std_vector {
    pub _base: std__Vector_base,
}
pub type std_vector__Base = std__Vector_base;
pub type std_vector__Tp_alloc_type = std_vector__Base;
pub type std_vector__Alloc_traits = __gnu_cxx___alloc_traits;
pub type std_vector_value_type<_Tp> = _Tp;
pub type std_vector_pointer = std_vector__Base;
pub type std_vector_const_pointer = std_vector__Alloc_traits;
pub type std_vector_reference = std_vector__Alloc_traits;
pub type std_vector_const_reference = std_vector__Alloc_traits;
pub type std_vector_iterator = __gnu_cxx___normal_iterator<std_vector_pointer>;
pub type std_vector_const_iterator = __gnu_cxx___normal_iterator<std_vector_const_pointer>;
pub type std_vector_const_reverse_iterator = std_reverse_iterator<std_vector_const_iterator>;
pub type std_vector_reverse_iterator = std_reverse_iterator<std_vector_iterator>;
pub type std_vector_size_type = usize;
pub type std_vector_difference_type = isize;
pub type std_vector_allocator_type<_Alloc> = _Alloc;
#[repr(C)]
pub struct std_vector__Temporary_value<_Tp> {
    pub _M_this: *mut std_vector,
    pub _M_storage: std_vector__Temporary_value__Storage<_Tp>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
}
#[repr(C)]
pub union std_vector__Temporary_value__Storage<_Tp> {
    pub _M_byte: ::std::os::raw::c_uchar,
    pub _M_val: std::mem::ManuallyDrop<_Tp>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___normal_iterator<_Iterator> {
    pub _M_current: _Iterator,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
}
pub type __gnu_cxx___normal_iterator___traits_type = std_iterator_traits;
pub type __gnu_cxx___normal_iterator___convertible_from = std___enable_if_t;
pub type __gnu_cxx___normal_iterator_iterator_type<_Iterator> = _Iterator;
pub type __gnu_cxx___normal_iterator_iterator_category = __gnu_cxx___normal_iterator___traits_type;
pub type __gnu_cxx___normal_iterator_value_type = __gnu_cxx___normal_iterator___traits_type;
pub type __gnu_cxx___normal_iterator_difference_type = __gnu_cxx___normal_iterator___traits_type;
pub type __gnu_cxx___normal_iterator_reference = __gnu_cxx___normal_iterator___traits_type;
pub type __gnu_cxx___normal_iterator_pointer = __gnu_cxx___normal_iterator___traits_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___alloc_traits {
    pub _address: u8,
}
pub type __gnu_cxx___alloc_traits_allocator_type<_Alloc> = _Alloc;
pub type __gnu_cxx___alloc_traits__Base_type = std_allocator_traits;
pub type __gnu_cxx___alloc_traits_value_type = __gnu_cxx___alloc_traits__Base_type;
pub type __gnu_cxx___alloc_traits_pointer = __gnu_cxx___alloc_traits__Base_type;
pub type __gnu_cxx___alloc_traits_const_pointer = __gnu_cxx___alloc_traits__Base_type;
pub type __gnu_cxx___alloc_traits_size_type = __gnu_cxx___alloc_traits__Base_type;
pub type __gnu_cxx___alloc_traits_difference_type = __gnu_cxx___alloc_traits__Base_type;
pub type __gnu_cxx___alloc_traits_reference = *mut __gnu_cxx___alloc_traits_value_type;
pub type __gnu_cxx___alloc_traits_const_reference = *const __gnu_cxx___alloc_traits_value_type;
pub type __gnu_cxx___alloc_traits___is_custom_pointer = std___and_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___alloc_traits_rebind {
    pub _address: u8,
}
pub type __gnu_cxx___alloc_traits_rebind_other = __gnu_cxx___alloc_traits__Base_type;
pub type __m128i = [::std::os::raw::c_longlong; 2usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RTL_SRWLOCK {
    pub Ptr: PVOID,
}
#[test]
fn bindgen_test_layout__RTL_SRWLOCK() {
    const UNINIT: ::std::mem::MaybeUninit<_RTL_SRWLOCK> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_RTL_SRWLOCK>(),
        8usize,
        concat!("Size of: ", stringify!(_RTL_SRWLOCK))
    );
    assert_eq!(
        ::std::mem::align_of::<_RTL_SRWLOCK>(),
        8usize,
        concat!("Alignment of ", stringify!(_RTL_SRWLOCK))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RTL_SRWLOCK),
            "::",
            stringify!(Ptr)
        )
    );
}
pub type RTL_SRWLOCK = _RTL_SRWLOCK;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RTL_CONDITION_VARIABLE {
    pub Ptr: PVOID,
}
#[test]
fn bindgen_test_layout__RTL_CONDITION_VARIABLE() {
    const UNINIT: ::std::mem::MaybeUninit<_RTL_CONDITION_VARIABLE> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_RTL_CONDITION_VARIABLE>(),
        8usize,
        concat!("Size of: ", stringify!(_RTL_CONDITION_VARIABLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_RTL_CONDITION_VARIABLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_RTL_CONDITION_VARIABLE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RTL_CONDITION_VARIABLE),
            "::",
            stringify!(Ptr)
        )
    );
}
pub type RTL_CONDITION_VARIABLE = _RTL_CONDITION_VARIABLE;
pub type SRWLOCK = RTL_SRWLOCK;
pub type CONDITION_VARIABLE = RTL_CONDITION_VARIABLE;
#[repr(C)]
#[derive(Debug)]
pub struct ncnn_Mutex {
    pub srwlock: SRWLOCK,
}
#[test]
fn bindgen_test_layout_ncnn_Mutex() {
    const UNINIT: ::std::mem::MaybeUninit<ncnn_Mutex> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ncnn_Mutex>(),
        8usize,
        concat!("Size of: ", stringify!(ncnn_Mutex))
    );
    assert_eq!(
        ::std::mem::align_of::<ncnn_Mutex>(),
        8usize,
        concat!("Alignment of ", stringify!(ncnn_Mutex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srwlock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Mutex),
            "::",
            stringify!(srwlock)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct ncnn_ConditionVariable {
    pub condvar: CONDITION_VARIABLE,
}
#[test]
fn bindgen_test_layout_ncnn_ConditionVariable() {
    const UNINIT: ::std::mem::MaybeUninit<ncnn_ConditionVariable> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ncnn_ConditionVariable>(),
        8usize,
        concat!("Size of: ", stringify!(ncnn_ConditionVariable))
    );
    assert_eq!(
        ::std::mem::align_of::<ncnn_ConditionVariable>(),
        8usize,
        concat!("Alignment of ", stringify!(ncnn_ConditionVariable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).condvar) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_ConditionVariable),
            "::",
            stringify!(condvar)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct ncnn_Thread {
    pub handle: HANDLE,
    pub _start: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
    >,
    pub _args: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ncnn_Thread() {
    const UNINIT: ::std::mem::MaybeUninit<ncnn_Thread> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ncnn_Thread>(),
        24usize,
        concat!("Size of: ", stringify!(ncnn_Thread))
    );
    assert_eq!(
        ::std::mem::align_of::<ncnn_Thread>(),
        8usize,
        concat!("Alignment of ", stringify!(ncnn_Thread))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Thread),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Thread),
            "::",
            stringify!(_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._args) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Thread),
            "::",
            stringify!(_args)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct ncnn_ThreadLocalStorage {
    pub key: DWORD,
}
#[test]
fn bindgen_test_layout_ncnn_ThreadLocalStorage() {
    const UNINIT: ::std::mem::MaybeUninit<ncnn_ThreadLocalStorage> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ncnn_ThreadLocalStorage>(),
        4usize,
        concat!("Size of: ", stringify!(ncnn_ThreadLocalStorage))
    );
    assert_eq!(
        ::std::mem::align_of::<ncnn_ThreadLocalStorage>(),
        4usize,
        concat!("Alignment of ", stringify!(ncnn_ThreadLocalStorage))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_ThreadLocalStorage),
            "::",
            stringify!(key)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct ncnn_MutexLockGuard {
    pub mutex: *mut ncnn_Mutex,
}
#[test]
fn bindgen_test_layout_ncnn_MutexLockGuard() {
    const UNINIT: ::std::mem::MaybeUninit<ncnn_MutexLockGuard> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ncnn_MutexLockGuard>(),
        8usize,
        concat!("Size of: ", stringify!(ncnn_MutexLockGuard))
    );
    assert_eq!(
        ::std::mem::align_of::<ncnn_MutexLockGuard>(),
        8usize,
        concat!("Alignment of ", stringify!(ncnn_MutexLockGuard))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mutex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_MutexLockGuard),
            "::",
            stringify!(mutex)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn18load_vulkan_driverEPKc"]
    pub fn ncnn_load_vulkan_driver(
        driver_path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn20unload_vulkan_driverEv"]
    pub fn ncnn_unload_vulkan_driver();
}
#[repr(C)]
pub struct ncnn_Allocator__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct ncnn_Allocator {
    pub vtable_: *const ncnn_Allocator__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_ncnn_Allocator() {
    assert_eq!(
        ::std::mem::size_of::<ncnn_Allocator>(),
        8usize,
        concat!("Size of: ", stringify!(ncnn_Allocator))
    );
    assert_eq!(
        ::std::mem::align_of::<ncnn_Allocator>(),
        8usize,
        concat!("Alignment of ", stringify!(ncnn_Allocator))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn9AllocatorD1Ev"]
    pub fn ncnn_Allocator_Allocator_destructor(this: *mut ncnn_Allocator);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ncnn_PoolAllocatorPrivate {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug)]
pub struct ncnn_PoolAllocator {
    pub _base: ncnn_Allocator,
    pub d: *mut ncnn_PoolAllocatorPrivate,
}
#[test]
fn bindgen_test_layout_ncnn_PoolAllocator() {
    const UNINIT: ::std::mem::MaybeUninit<ncnn_PoolAllocator> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ncnn_PoolAllocator>(),
        16usize,
        concat!("Size of: ", stringify!(ncnn_PoolAllocator))
    );
    assert_eq!(
        ::std::mem::align_of::<ncnn_PoolAllocator>(),
        8usize,
        concat!("Alignment of ", stringify!(ncnn_PoolAllocator))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_PoolAllocator),
            "::",
            stringify!(d)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn13PoolAllocator22set_size_compare_ratioEf"]
    pub fn ncnn_PoolAllocator_set_size_compare_ratio(this: *mut ncnn_PoolAllocator, scr: f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn13PoolAllocator23set_size_drop_thresholdEy"]
    pub fn ncnn_PoolAllocator_set_size_drop_threshold(this: *mut ncnn_PoolAllocator, arg1: usize);
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn13PoolAllocator5clearEv"]
    pub fn ncnn_PoolAllocator_clear(this: *mut ncnn_PoolAllocator);
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn13PoolAllocatorC1Ev"]
    pub fn ncnn_PoolAllocator_PoolAllocator(this: *mut ncnn_PoolAllocator);
}
impl ncnn_PoolAllocator {
    #[inline]
    pub unsafe fn set_size_compare_ratio(&mut self, scr: f32) {
        ncnn_PoolAllocator_set_size_compare_ratio(self, scr)
    }
    #[inline]
    pub unsafe fn set_size_drop_threshold(&mut self, arg1: usize) {
        ncnn_PoolAllocator_set_size_drop_threshold(self, arg1)
    }
    #[inline]
    pub unsafe fn clear(&mut self) {
        ncnn_PoolAllocator_clear(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ncnn_PoolAllocator_PoolAllocator(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn13PoolAllocatorD1Ev"]
    pub fn ncnn_PoolAllocator_PoolAllocator_destructor(this: *mut ncnn_PoolAllocator);
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn13PoolAllocator10fastMallocEy"]
    pub fn ncnn_PoolAllocator_fastMalloc(
        this: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn13PoolAllocator8fastFreeEPv"]
    pub fn ncnn_PoolAllocator_fastFree(
        this: *mut ::std::os::raw::c_void,
        ptr: *mut ::std::os::raw::c_void,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ncnn_UnlockedPoolAllocatorPrivate {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug)]
pub struct ncnn_UnlockedPoolAllocator {
    pub _base: ncnn_Allocator,
    pub d: *mut ncnn_UnlockedPoolAllocatorPrivate,
}
#[test]
fn bindgen_test_layout_ncnn_UnlockedPoolAllocator() {
    const UNINIT: ::std::mem::MaybeUninit<ncnn_UnlockedPoolAllocator> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ncnn_UnlockedPoolAllocator>(),
        16usize,
        concat!("Size of: ", stringify!(ncnn_UnlockedPoolAllocator))
    );
    assert_eq!(
        ::std::mem::align_of::<ncnn_UnlockedPoolAllocator>(),
        8usize,
        concat!("Alignment of ", stringify!(ncnn_UnlockedPoolAllocator))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_UnlockedPoolAllocator),
            "::",
            stringify!(d)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn21UnlockedPoolAllocator22set_size_compare_ratioEf"]
    pub fn ncnn_UnlockedPoolAllocator_set_size_compare_ratio(
        this: *mut ncnn_UnlockedPoolAllocator,
        scr: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn21UnlockedPoolAllocator23set_size_drop_thresholdEy"]
    pub fn ncnn_UnlockedPoolAllocator_set_size_drop_threshold(
        this: *mut ncnn_UnlockedPoolAllocator,
        arg1: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn21UnlockedPoolAllocator5clearEv"]
    pub fn ncnn_UnlockedPoolAllocator_clear(this: *mut ncnn_UnlockedPoolAllocator);
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn21UnlockedPoolAllocatorC1Ev"]
    pub fn ncnn_UnlockedPoolAllocator_UnlockedPoolAllocator(this: *mut ncnn_UnlockedPoolAllocator);
}
impl ncnn_UnlockedPoolAllocator {
    #[inline]
    pub unsafe fn set_size_compare_ratio(&mut self, scr: f32) {
        ncnn_UnlockedPoolAllocator_set_size_compare_ratio(self, scr)
    }
    #[inline]
    pub unsafe fn set_size_drop_threshold(&mut self, arg1: usize) {
        ncnn_UnlockedPoolAllocator_set_size_drop_threshold(self, arg1)
    }
    #[inline]
    pub unsafe fn clear(&mut self) {
        ncnn_UnlockedPoolAllocator_clear(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ncnn_UnlockedPoolAllocator_UnlockedPoolAllocator(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn21UnlockedPoolAllocatorD1Ev"]
    pub fn ncnn_UnlockedPoolAllocator_UnlockedPoolAllocator_destructor(
        this: *mut ncnn_UnlockedPoolAllocator,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn21UnlockedPoolAllocator10fastMallocEy"]
    pub fn ncnn_UnlockedPoolAllocator_fastMalloc(
        this: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn21UnlockedPoolAllocator8fastFreeEPv"]
    pub fn ncnn_UnlockedPoolAllocator_fastFree(
        this: *mut ::std::os::raw::c_void,
        ptr: *mut ::std::os::raw::c_void,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ncnn_VkBufferMemory {
    pub buffer: VkBuffer,
    pub offset: usize,
    pub capacity: usize,
    pub memory: VkDeviceMemory,
    pub mapped_ptr: *mut ::std::os::raw::c_void,
    pub access_flags: VkAccessFlags,
    pub stage_flags: VkPipelineStageFlags,
    pub refcount: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ncnn_VkBufferMemory() {
    const UNINIT: ::std::mem::MaybeUninit<ncnn_VkBufferMemory> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ncnn_VkBufferMemory>(),
        56usize,
        concat!("Size of: ", stringify!(ncnn_VkBufferMemory))
    );
    assert_eq!(
        ::std::mem::align_of::<ncnn_VkBufferMemory>(),
        8usize,
        concat!("Alignment of ", stringify!(ncnn_VkBufferMemory))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkBufferMemory),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkBufferMemory),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capacity) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkBufferMemory),
            "::",
            stringify!(capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memory) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkBufferMemory),
            "::",
            stringify!(memory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mapped_ptr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkBufferMemory),
            "::",
            stringify!(mapped_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).access_flags) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkBufferMemory),
            "::",
            stringify!(access_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stage_flags) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkBufferMemory),
            "::",
            stringify!(stage_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refcount) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkBufferMemory),
            "::",
            stringify!(refcount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ncnn_VkImageMemory {
    pub image: VkImage,
    pub imageview: VkImageView,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub depth: ::std::os::raw::c_int,
    pub format: VkFormat,
    pub memory: VkDeviceMemory,
    pub mapped_ptr: *mut ::std::os::raw::c_void,
    pub bind_offset: usize,
    pub bind_capacity: usize,
    pub access_flags: VkAccessFlags,
    pub image_layout: VkImageLayout,
    pub stage_flags: VkPipelineStageFlags,
    pub command_refcount: ::std::os::raw::c_int,
    pub refcount: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ncnn_VkImageMemory() {
    const UNINIT: ::std::mem::MaybeUninit<ncnn_VkImageMemory> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ncnn_VkImageMemory>(),
        88usize,
        concat!("Size of: ", stringify!(ncnn_VkImageMemory))
    );
    assert_eq!(
        ::std::mem::align_of::<ncnn_VkImageMemory>(),
        8usize,
        concat!("Alignment of ", stringify!(ncnn_VkImageMemory))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkImageMemory),
            "::",
            stringify!(image)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageview) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkImageMemory),
            "::",
            stringify!(imageview)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkImageMemory),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkImageMemory),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkImageMemory),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkImageMemory),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memory) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkImageMemory),
            "::",
            stringify!(memory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mapped_ptr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkImageMemory),
            "::",
            stringify!(mapped_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bind_offset) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkImageMemory),
            "::",
            stringify!(bind_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bind_capacity) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkImageMemory),
            "::",
            stringify!(bind_capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).access_flags) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkImageMemory),
            "::",
            stringify!(access_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image_layout) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkImageMemory),
            "::",
            stringify!(image_layout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stage_flags) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkImageMemory),
            "::",
            stringify!(stage_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).command_refcount) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkImageMemory),
            "::",
            stringify!(command_refcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refcount) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkImageMemory),
            "::",
            stringify!(refcount)
        )
    );
}
#[repr(C)]
pub struct ncnn_VkAllocator__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct ncnn_VkAllocator {
    pub vtable_: *const ncnn_VkAllocator__bindgen_vtable,
    pub vkdev: *const ncnn_VulkanDevice,
    pub buffer_memory_type_index: u32,
    pub image_memory_type_index: u32,
    pub reserved_type_index: u32,
    pub mappable: bool,
    pub coherent: bool,
}
#[test]
fn bindgen_test_layout_ncnn_VkAllocator() {
    const UNINIT: ::std::mem::MaybeUninit<ncnn_VkAllocator> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ncnn_VkAllocator>(),
        32usize,
        concat!("Size of: ", stringify!(ncnn_VkAllocator))
    );
    assert_eq!(
        ::std::mem::align_of::<ncnn_VkAllocator>(),
        8usize,
        concat!("Alignment of ", stringify!(ncnn_VkAllocator))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vkdev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkAllocator),
            "::",
            stringify!(vkdev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_memory_type_index) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkAllocator),
            "::",
            stringify!(buffer_memory_type_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image_memory_type_index) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkAllocator),
            "::",
            stringify!(image_memory_type_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved_type_index) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkAllocator),
            "::",
            stringify!(reserved_type_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mappable) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkAllocator),
            "::",
            stringify!(mappable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coherent) as usize - ptr as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkAllocator),
            "::",
            stringify!(coherent)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn11VkAllocator13create_bufferEyj"]
    pub fn ncnn_VkAllocator_create_buffer(
        this: *mut ncnn_VkAllocator,
        size: usize,
        usage: VkBufferUsageFlags,
    ) -> VkBuffer;
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn11VkAllocator15allocate_memoryEyj"]
    pub fn ncnn_VkAllocator_allocate_memory(
        this: *mut ncnn_VkAllocator,
        size: usize,
        memory_type_index: u32,
    ) -> VkDeviceMemory;
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn11VkAllocator25allocate_dedicated_memoryEyjP9VkImage_TP10VkBuffer_T"]
    pub fn ncnn_VkAllocator_allocate_dedicated_memory(
        this: *mut ncnn_VkAllocator,
        size: usize,
        memory_type_index: u32,
        image: VkImage,
        buffer: VkBuffer,
    ) -> VkDeviceMemory;
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn11VkAllocator12create_imageEiii8VkFormat13VkImageTilingj"]
    pub fn ncnn_VkAllocator_create_image(
        this: *mut ncnn_VkAllocator,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        depth: ::std::os::raw::c_int,
        format: VkFormat,
        tiling: VkImageTiling,
        usage: VkImageUsageFlags,
    ) -> VkImage;
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn11VkAllocator16create_imageviewEP9VkImage_T8VkFormat"]
    pub fn ncnn_VkAllocator_create_imageview(
        this: *mut ncnn_VkAllocator,
        image: VkImage,
        format: VkFormat,
    ) -> VkImageView;
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn11VkAllocatorC2EPKNS_12VulkanDeviceE"]
    pub fn ncnn_VkAllocator_VkAllocator(
        this: *mut ncnn_VkAllocator,
        _vkdev: *const ncnn_VulkanDevice,
    );
}
impl ncnn_VkAllocator {
    #[inline]
    pub unsafe fn create_buffer(&mut self, size: usize, usage: VkBufferUsageFlags) -> VkBuffer {
        ncnn_VkAllocator_create_buffer(self, size, usage)
    }
    #[inline]
    pub unsafe fn allocate_memory(
        &mut self,
        size: usize,
        memory_type_index: u32,
    ) -> VkDeviceMemory {
        ncnn_VkAllocator_allocate_memory(self, size, memory_type_index)
    }
    #[inline]
    pub unsafe fn allocate_dedicated_memory(
        &mut self,
        size: usize,
        memory_type_index: u32,
        image: VkImage,
        buffer: VkBuffer,
    ) -> VkDeviceMemory {
        ncnn_VkAllocator_allocate_dedicated_memory(self, size, memory_type_index, image, buffer)
    }
    #[inline]
    pub unsafe fn create_image(
        &mut self,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        depth: ::std::os::raw::c_int,
        format: VkFormat,
        tiling: VkImageTiling,
        usage: VkImageUsageFlags,
    ) -> VkImage {
        ncnn_VkAllocator_create_image(self, width, height, depth, format, tiling, usage)
    }
    #[inline]
    pub unsafe fn create_imageview(&mut self, image: VkImage, format: VkFormat) -> VkImageView {
        ncnn_VkAllocator_create_imageview(self, image, format)
    }
    #[inline]
    pub unsafe fn new(_vkdev: *const ncnn_VulkanDevice) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ncnn_VkAllocator_VkAllocator(__bindgen_tmp.as_mut_ptr(), _vkdev);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn11VkAllocatorD1Ev"]
    pub fn ncnn_VkAllocator_VkAllocator_destructor(this: *mut ncnn_VkAllocator);
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn11VkAllocator5clearEv"]
    pub fn ncnn_VkAllocator_clear(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn11VkAllocator5flushEPNS_14VkBufferMemoryE"]
    pub fn ncnn_VkAllocator_flush(
        this: *mut ::std::os::raw::c_void,
        ptr: *mut ncnn_VkBufferMemory,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn11VkAllocator10invalidateEPNS_14VkBufferMemoryE"]
    pub fn ncnn_VkAllocator_invalidate(
        this: *mut ::std::os::raw::c_void,
        ptr: *mut ncnn_VkBufferMemory,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ncnn_VkBlobAllocatorPrivate {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug)]
pub struct ncnn_VkBlobAllocator {
    pub _base: ncnn_VkAllocator,
    pub d: *mut ncnn_VkBlobAllocatorPrivate,
}
#[test]
fn bindgen_test_layout_ncnn_VkBlobAllocator() {
    const UNINIT: ::std::mem::MaybeUninit<ncnn_VkBlobAllocator> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ncnn_VkBlobAllocator>(),
        40usize,
        concat!("Size of: ", stringify!(ncnn_VkBlobAllocator))
    );
    assert_eq!(
        ::std::mem::align_of::<ncnn_VkBlobAllocator>(),
        8usize,
        concat!("Alignment of ", stringify!(ncnn_VkBlobAllocator))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkBlobAllocator),
            "::",
            stringify!(d)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn15VkBlobAllocatorC1EPKNS_12VulkanDeviceEy"]
    pub fn ncnn_VkBlobAllocator_VkBlobAllocator(
        this: *mut ncnn_VkBlobAllocator,
        vkdev: *const ncnn_VulkanDevice,
        preferred_block_size: usize,
    );
}
impl ncnn_VkBlobAllocator {
    #[inline]
    pub unsafe fn new(vkdev: *const ncnn_VulkanDevice, preferred_block_size: usize) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ncnn_VkBlobAllocator_VkBlobAllocator(
            __bindgen_tmp.as_mut_ptr(),
            vkdev,
            preferred_block_size,
        );
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn15VkBlobAllocatorD1Ev"]
    pub fn ncnn_VkBlobAllocator_VkBlobAllocator_destructor(this: *mut ncnn_VkBlobAllocator);
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn15VkBlobAllocator5clearEv"]
    pub fn ncnn_VkBlobAllocator_clear(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn15VkBlobAllocator10fastMallocEy"]
    pub fn ncnn_VkBlobAllocator_fastMalloc(
        this: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ncnn_VkBufferMemory;
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn15VkBlobAllocator8fastFreeEPNS_14VkBufferMemoryE"]
    pub fn ncnn_VkBlobAllocator_fastFree(
        this: *mut ::std::os::raw::c_void,
        ptr: *mut ncnn_VkBufferMemory,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn15VkBlobAllocator10fastMallocEiiiyi"]
    pub fn ncnn_VkBlobAllocator_fastMalloc1(
        this: *mut ::std::os::raw::c_void,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        elemsize: usize,
        elempack: ::std::os::raw::c_int,
    ) -> *mut ncnn_VkImageMemory;
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn15VkBlobAllocator8fastFreeEPNS_13VkImageMemoryE"]
    pub fn ncnn_VkBlobAllocator_fastFree1(
        this: *mut ::std::os::raw::c_void,
        ptr: *mut ncnn_VkImageMemory,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ncnn_VkWeightAllocatorPrivate {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug)]
pub struct ncnn_VkWeightAllocator {
    pub _base: ncnn_VkAllocator,
    pub d: *mut ncnn_VkWeightAllocatorPrivate,
}
#[test]
fn bindgen_test_layout_ncnn_VkWeightAllocator() {
    const UNINIT: ::std::mem::MaybeUninit<ncnn_VkWeightAllocator> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ncnn_VkWeightAllocator>(),
        40usize,
        concat!("Size of: ", stringify!(ncnn_VkWeightAllocator))
    );
    assert_eq!(
        ::std::mem::align_of::<ncnn_VkWeightAllocator>(),
        8usize,
        concat!("Alignment of ", stringify!(ncnn_VkWeightAllocator))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkWeightAllocator),
            "::",
            stringify!(d)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn17VkWeightAllocatorC1EPKNS_12VulkanDeviceEy"]
    pub fn ncnn_VkWeightAllocator_VkWeightAllocator(
        this: *mut ncnn_VkWeightAllocator,
        vkdev: *const ncnn_VulkanDevice,
        preferred_block_size: usize,
    );
}
impl ncnn_VkWeightAllocator {
    #[inline]
    pub unsafe fn new(vkdev: *const ncnn_VulkanDevice, preferred_block_size: usize) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ncnn_VkWeightAllocator_VkWeightAllocator(
            __bindgen_tmp.as_mut_ptr(),
            vkdev,
            preferred_block_size,
        );
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn17VkWeightAllocatorD1Ev"]
    pub fn ncnn_VkWeightAllocator_VkWeightAllocator_destructor(this: *mut ncnn_VkWeightAllocator);
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn17VkWeightAllocator5clearEv"]
    pub fn ncnn_VkWeightAllocator_clear(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn17VkWeightAllocator10fastMallocEy"]
    pub fn ncnn_VkWeightAllocator_fastMalloc(
        this: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ncnn_VkBufferMemory;
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn17VkWeightAllocator8fastFreeEPNS_14VkBufferMemoryE"]
    pub fn ncnn_VkWeightAllocator_fastFree(
        this: *mut ::std::os::raw::c_void,
        ptr: *mut ncnn_VkBufferMemory,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn17VkWeightAllocator10fastMallocEiiiyi"]
    pub fn ncnn_VkWeightAllocator_fastMalloc1(
        this: *mut ::std::os::raw::c_void,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        elemsize: usize,
        elempack: ::std::os::raw::c_int,
    ) -> *mut ncnn_VkImageMemory;
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn17VkWeightAllocator8fastFreeEPNS_13VkImageMemoryE"]
    pub fn ncnn_VkWeightAllocator_fastFree1(
        this: *mut ::std::os::raw::c_void,
        ptr: *mut ncnn_VkImageMemory,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ncnn_VkStagingAllocatorPrivate {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug)]
pub struct ncnn_VkStagingAllocator {
    pub _base: ncnn_VkAllocator,
    pub d: *mut ncnn_VkStagingAllocatorPrivate,
}
#[test]
fn bindgen_test_layout_ncnn_VkStagingAllocator() {
    const UNINIT: ::std::mem::MaybeUninit<ncnn_VkStagingAllocator> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ncnn_VkStagingAllocator>(),
        40usize,
        concat!("Size of: ", stringify!(ncnn_VkStagingAllocator))
    );
    assert_eq!(
        ::std::mem::align_of::<ncnn_VkStagingAllocator>(),
        8usize,
        concat!("Alignment of ", stringify!(ncnn_VkStagingAllocator))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkStagingAllocator),
            "::",
            stringify!(d)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn18VkStagingAllocator22set_size_compare_ratioEf"]
    pub fn ncnn_VkStagingAllocator_set_size_compare_ratio(
        this: *mut ncnn_VkStagingAllocator,
        scr: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn18VkStagingAllocatorC1EPKNS_12VulkanDeviceE"]
    pub fn ncnn_VkStagingAllocator_VkStagingAllocator(
        this: *mut ncnn_VkStagingAllocator,
        vkdev: *const ncnn_VulkanDevice,
    );
}
impl ncnn_VkStagingAllocator {
    #[inline]
    pub unsafe fn set_size_compare_ratio(&mut self, scr: f32) {
        ncnn_VkStagingAllocator_set_size_compare_ratio(self, scr)
    }
    #[inline]
    pub unsafe fn new(vkdev: *const ncnn_VulkanDevice) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ncnn_VkStagingAllocator_VkStagingAllocator(__bindgen_tmp.as_mut_ptr(), vkdev);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn18VkStagingAllocatorD1Ev"]
    pub fn ncnn_VkStagingAllocator_VkStagingAllocator_destructor(
        this: *mut ncnn_VkStagingAllocator,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn18VkStagingAllocator5clearEv"]
    pub fn ncnn_VkStagingAllocator_clear(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn18VkStagingAllocator10fastMallocEy"]
    pub fn ncnn_VkStagingAllocator_fastMalloc(
        this: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ncnn_VkBufferMemory;
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn18VkStagingAllocator8fastFreeEPNS_14VkBufferMemoryE"]
    pub fn ncnn_VkStagingAllocator_fastFree(
        this: *mut ::std::os::raw::c_void,
        ptr: *mut ncnn_VkBufferMemory,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn18VkStagingAllocator10fastMallocEiiiyi"]
    pub fn ncnn_VkStagingAllocator_fastMalloc1(
        this: *mut ::std::os::raw::c_void,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        elemsize: usize,
        elempack: ::std::os::raw::c_int,
    ) -> *mut ncnn_VkImageMemory;
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn18VkStagingAllocator8fastFreeEPNS_13VkImageMemoryE"]
    pub fn ncnn_VkStagingAllocator_fastFree1(
        this: *mut ::std::os::raw::c_void,
        ptr: *mut ncnn_VkImageMemory,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ncnn_VkWeightStagingAllocatorPrivate {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug)]
pub struct ncnn_VkWeightStagingAllocator {
    pub _base: ncnn_VkAllocator,
    pub d: *mut ncnn_VkWeightStagingAllocatorPrivate,
}
#[test]
fn bindgen_test_layout_ncnn_VkWeightStagingAllocator() {
    const UNINIT: ::std::mem::MaybeUninit<ncnn_VkWeightStagingAllocator> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ncnn_VkWeightStagingAllocator>(),
        40usize,
        concat!("Size of: ", stringify!(ncnn_VkWeightStagingAllocator))
    );
    assert_eq!(
        ::std::mem::align_of::<ncnn_VkWeightStagingAllocator>(),
        8usize,
        concat!("Alignment of ", stringify!(ncnn_VkWeightStagingAllocator))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkWeightStagingAllocator),
            "::",
            stringify!(d)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn24VkWeightStagingAllocatorC1EPKNS_12VulkanDeviceE"]
    pub fn ncnn_VkWeightStagingAllocator_VkWeightStagingAllocator(
        this: *mut ncnn_VkWeightStagingAllocator,
        vkdev: *const ncnn_VulkanDevice,
    );
}
impl ncnn_VkWeightStagingAllocator {
    #[inline]
    pub unsafe fn new(vkdev: *const ncnn_VulkanDevice) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ncnn_VkWeightStagingAllocator_VkWeightStagingAllocator(__bindgen_tmp.as_mut_ptr(), vkdev);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn24VkWeightStagingAllocatorD1Ev"]
    pub fn ncnn_VkWeightStagingAllocator_VkWeightStagingAllocator_destructor(
        this: *mut ncnn_VkWeightStagingAllocator,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn24VkWeightStagingAllocator10fastMallocEy"]
    pub fn ncnn_VkWeightStagingAllocator_fastMalloc(
        this: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ncnn_VkBufferMemory;
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn24VkWeightStagingAllocator8fastFreeEPNS_14VkBufferMemoryE"]
    pub fn ncnn_VkWeightStagingAllocator_fastFree(
        this: *mut ::std::os::raw::c_void,
        ptr: *mut ncnn_VkBufferMemory,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn24VkWeightStagingAllocator10fastMallocEiiiyi"]
    pub fn ncnn_VkWeightStagingAllocator_fastMalloc1(
        this: *mut ::std::os::raw::c_void,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        elemsize: usize,
        elempack: ::std::os::raw::c_int,
    ) -> *mut ncnn_VkImageMemory;
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn24VkWeightStagingAllocator8fastFreeEPNS_13VkImageMemoryE"]
    pub fn ncnn_VkWeightStagingAllocator_fastFree1(
        this: *mut ::std::os::raw::c_void,
        ptr: *mut ncnn_VkImageMemory,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ncnn_PipelineCache {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ncnn_Option {
    pub lightmode: bool,
    pub num_threads: ::std::os::raw::c_int,
    pub blob_allocator: *mut ncnn_Allocator,
    pub workspace_allocator: *mut ncnn_Allocator,
    pub blob_vkallocator: *mut ncnn_VkAllocator,
    pub workspace_vkallocator: *mut ncnn_VkAllocator,
    pub staging_vkallocator: *mut ncnn_VkAllocator,
    pub pipeline_cache: *mut ncnn_PipelineCache,
    pub openmp_blocktime: ::std::os::raw::c_int,
    pub use_winograd_convolution: bool,
    pub use_sgemm_convolution: bool,
    pub use_int8_inference: bool,
    pub use_vulkan_compute: bool,
    pub use_bf16_storage: bool,
    pub use_fp16_packed: bool,
    pub use_fp16_storage: bool,
    pub use_fp16_arithmetic: bool,
    pub use_int8_packed: bool,
    pub use_int8_storage: bool,
    pub use_int8_arithmetic: bool,
    pub use_packing_layout: bool,
    pub use_shader_pack8: bool,
    pub use_subgroup_basic: bool,
    pub use_subgroup_vote: bool,
    pub use_subgroup_ballot: bool,
    pub use_subgroup_shuffle: bool,
    pub use_image_storage: bool,
    pub use_tensor_storage: bool,
    pub use_reserved_0: bool,
    pub flush_denormals: ::std::os::raw::c_int,
    pub use_local_pool_allocator: bool,
    pub use_shader_local_memory: bool,
    pub use_cooperative_matrix: bool,
    pub use_winograd23_convolution: bool,
    pub use_winograd43_convolution: bool,
    pub use_winograd63_convolution: bool,
    pub use_a53_a55_optimized_kernel: bool,
    pub use_fp16_uniform: bool,
    pub use_int8_uniform: bool,
    pub use_reserved_9: bool,
    pub use_reserved_10: bool,
    pub use_reserved_11: bool,
}
#[test]
fn bindgen_test_layout_ncnn_Option() {
    const UNINIT: ::std::mem::MaybeUninit<ncnn_Option> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ncnn_Option>(),
        96usize,
        concat!("Size of: ", stringify!(ncnn_Option))
    );
    assert_eq!(
        ::std::mem::align_of::<ncnn_Option>(),
        8usize,
        concat!("Alignment of ", stringify!(ncnn_Option))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lightmode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Option),
            "::",
            stringify!(lightmode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_threads) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Option),
            "::",
            stringify!(num_threads)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blob_allocator) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Option),
            "::",
            stringify!(blob_allocator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).workspace_allocator) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Option),
            "::",
            stringify!(workspace_allocator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blob_vkallocator) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Option),
            "::",
            stringify!(blob_vkallocator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).workspace_vkallocator) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Option),
            "::",
            stringify!(workspace_vkallocator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).staging_vkallocator) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Option),
            "::",
            stringify!(staging_vkallocator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pipeline_cache) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Option),
            "::",
            stringify!(pipeline_cache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).openmp_blocktime) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Option),
            "::",
            stringify!(openmp_blocktime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_winograd_convolution) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Option),
            "::",
            stringify!(use_winograd_convolution)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_sgemm_convolution) as usize - ptr as usize },
        61usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Option),
            "::",
            stringify!(use_sgemm_convolution)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_int8_inference) as usize - ptr as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Option),
            "::",
            stringify!(use_int8_inference)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_vulkan_compute) as usize - ptr as usize },
        63usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Option),
            "::",
            stringify!(use_vulkan_compute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_bf16_storage) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Option),
            "::",
            stringify!(use_bf16_storage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_fp16_packed) as usize - ptr as usize },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Option),
            "::",
            stringify!(use_fp16_packed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_fp16_storage) as usize - ptr as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Option),
            "::",
            stringify!(use_fp16_storage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_fp16_arithmetic) as usize - ptr as usize },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Option),
            "::",
            stringify!(use_fp16_arithmetic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_int8_packed) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Option),
            "::",
            stringify!(use_int8_packed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_int8_storage) as usize - ptr as usize },
        69usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Option),
            "::",
            stringify!(use_int8_storage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_int8_arithmetic) as usize - ptr as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Option),
            "::",
            stringify!(use_int8_arithmetic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_packing_layout) as usize - ptr as usize },
        71usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Option),
            "::",
            stringify!(use_packing_layout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_shader_pack8) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Option),
            "::",
            stringify!(use_shader_pack8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_subgroup_basic) as usize - ptr as usize },
        73usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Option),
            "::",
            stringify!(use_subgroup_basic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_subgroup_vote) as usize - ptr as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Option),
            "::",
            stringify!(use_subgroup_vote)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_subgroup_ballot) as usize - ptr as usize },
        75usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Option),
            "::",
            stringify!(use_subgroup_ballot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_subgroup_shuffle) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Option),
            "::",
            stringify!(use_subgroup_shuffle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_image_storage) as usize - ptr as usize },
        77usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Option),
            "::",
            stringify!(use_image_storage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_tensor_storage) as usize - ptr as usize },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Option),
            "::",
            stringify!(use_tensor_storage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_reserved_0) as usize - ptr as usize },
        79usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Option),
            "::",
            stringify!(use_reserved_0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flush_denormals) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Option),
            "::",
            stringify!(flush_denormals)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_local_pool_allocator) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Option),
            "::",
            stringify!(use_local_pool_allocator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_shader_local_memory) as usize - ptr as usize },
        85usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Option),
            "::",
            stringify!(use_shader_local_memory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_cooperative_matrix) as usize - ptr as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Option),
            "::",
            stringify!(use_cooperative_matrix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_winograd23_convolution) as usize - ptr as usize },
        87usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Option),
            "::",
            stringify!(use_winograd23_convolution)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_winograd43_convolution) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Option),
            "::",
            stringify!(use_winograd43_convolution)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_winograd63_convolution) as usize - ptr as usize },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Option),
            "::",
            stringify!(use_winograd63_convolution)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).use_a53_a55_optimized_kernel) as usize - ptr as usize
        },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Option),
            "::",
            stringify!(use_a53_a55_optimized_kernel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_fp16_uniform) as usize - ptr as usize },
        91usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Option),
            "::",
            stringify!(use_fp16_uniform)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_int8_uniform) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Option),
            "::",
            stringify!(use_int8_uniform)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_reserved_9) as usize - ptr as usize },
        93usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Option),
            "::",
            stringify!(use_reserved_9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_reserved_10) as usize - ptr as usize },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Option),
            "::",
            stringify!(use_reserved_10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_reserved_11) as usize - ptr as usize },
        95usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Option),
            "::",
            stringify!(use_reserved_11)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn6OptionC1Ev"]
    pub fn ncnn_Option_Option(this: *mut ncnn_Option);
}
impl ncnn_Option {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ncnn_Option_Option(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct ncnn_Mat {
    pub data: *mut ::std::os::raw::c_void,
    pub refcount: *mut ::std::os::raw::c_int,
    pub elemsize: usize,
    pub elempack: ::std::os::raw::c_int,
    pub allocator: *mut ncnn_Allocator,
    pub dims: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
    pub d: ::std::os::raw::c_int,
    pub c: ::std::os::raw::c_int,
    pub cstep: usize,
}
pub const ncnn_Mat_PixelType_PIXEL_CONVERT_SHIFT: ncnn_Mat_PixelType = 16;
pub const ncnn_Mat_PixelType_PIXEL_FORMAT_MASK: ncnn_Mat_PixelType = 65535;
pub const ncnn_Mat_PixelType_PIXEL_CONVERT_MASK: ncnn_Mat_PixelType = 4294901760;
pub const ncnn_Mat_PixelType_PIXEL_RGB: ncnn_Mat_PixelType = 1;
pub const ncnn_Mat_PixelType_PIXEL_BGR: ncnn_Mat_PixelType = 2;
pub const ncnn_Mat_PixelType_PIXEL_GRAY: ncnn_Mat_PixelType = 3;
pub const ncnn_Mat_PixelType_PIXEL_RGBA: ncnn_Mat_PixelType = 4;
pub const ncnn_Mat_PixelType_PIXEL_BGRA: ncnn_Mat_PixelType = 5;
pub const ncnn_Mat_PixelType_PIXEL_RGB2BGR: ncnn_Mat_PixelType = 131073;
pub const ncnn_Mat_PixelType_PIXEL_RGB2GRAY: ncnn_Mat_PixelType = 196609;
pub const ncnn_Mat_PixelType_PIXEL_RGB2RGBA: ncnn_Mat_PixelType = 262145;
pub const ncnn_Mat_PixelType_PIXEL_RGB2BGRA: ncnn_Mat_PixelType = 327681;
pub const ncnn_Mat_PixelType_PIXEL_BGR2RGB: ncnn_Mat_PixelType = 65538;
pub const ncnn_Mat_PixelType_PIXEL_BGR2GRAY: ncnn_Mat_PixelType = 196610;
pub const ncnn_Mat_PixelType_PIXEL_BGR2RGBA: ncnn_Mat_PixelType = 262146;
pub const ncnn_Mat_PixelType_PIXEL_BGR2BGRA: ncnn_Mat_PixelType = 327682;
pub const ncnn_Mat_PixelType_PIXEL_GRAY2RGB: ncnn_Mat_PixelType = 65539;
pub const ncnn_Mat_PixelType_PIXEL_GRAY2BGR: ncnn_Mat_PixelType = 131075;
pub const ncnn_Mat_PixelType_PIXEL_GRAY2RGBA: ncnn_Mat_PixelType = 262147;
pub const ncnn_Mat_PixelType_PIXEL_GRAY2BGRA: ncnn_Mat_PixelType = 327683;
pub const ncnn_Mat_PixelType_PIXEL_RGBA2RGB: ncnn_Mat_PixelType = 65540;
pub const ncnn_Mat_PixelType_PIXEL_RGBA2BGR: ncnn_Mat_PixelType = 131076;
pub const ncnn_Mat_PixelType_PIXEL_RGBA2GRAY: ncnn_Mat_PixelType = 196612;
pub const ncnn_Mat_PixelType_PIXEL_RGBA2BGRA: ncnn_Mat_PixelType = 327684;
pub const ncnn_Mat_PixelType_PIXEL_BGRA2RGB: ncnn_Mat_PixelType = 65541;
pub const ncnn_Mat_PixelType_PIXEL_BGRA2BGR: ncnn_Mat_PixelType = 131077;
pub const ncnn_Mat_PixelType_PIXEL_BGRA2GRAY: ncnn_Mat_PixelType = 196613;
pub const ncnn_Mat_PixelType_PIXEL_BGRA2RGBA: ncnn_Mat_PixelType = 262149;
pub type ncnn_Mat_PixelType = ::std::os::raw::c_uint;
#[test]
fn bindgen_test_layout_ncnn_Mat() {
    const UNINIT: ::std::mem::MaybeUninit<ncnn_Mat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ncnn_Mat>(),
        72usize,
        concat!("Size of: ", stringify!(ncnn_Mat))
    );
    assert_eq!(
        ::std::mem::align_of::<ncnn_Mat>(),
        8usize,
        concat!("Alignment of ", stringify!(ncnn_Mat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Mat),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refcount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Mat),
            "::",
            stringify!(refcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elemsize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Mat),
            "::",
            stringify!(elemsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elempack) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Mat),
            "::",
            stringify!(elempack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocator) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Mat),
            "::",
            stringify!(allocator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dims) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Mat),
            "::",
            stringify!(dims)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Mat),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Mat),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Mat),
            "::",
            stringify!(d)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Mat),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cstep) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_Mat),
            "::",
            stringify!(cstep)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn3Mat5cloneEPNS_9AllocatorE"]
    pub fn ncnn_Mat_clone(this: *const ncnn_Mat, allocator: *mut ncnn_Allocator) -> ncnn_Mat;
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn3Mat10clone_fromERKS0_PNS_9AllocatorE"]
    pub fn ncnn_Mat_clone_from(
        this: *mut ncnn_Mat,
        mat: *const ncnn_Mat,
        allocator: *mut ncnn_Allocator,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn3Mat7reshapeEiPNS_9AllocatorE"]
    pub fn ncnn_Mat_reshape(
        this: *const ncnn_Mat,
        w: ::std::os::raw::c_int,
        allocator: *mut ncnn_Allocator,
    ) -> ncnn_Mat;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn3Mat7reshapeEiiPNS_9AllocatorE"]
    pub fn ncnn_Mat_reshape1(
        this: *const ncnn_Mat,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        allocator: *mut ncnn_Allocator,
    ) -> ncnn_Mat;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn3Mat7reshapeEiiiPNS_9AllocatorE"]
    pub fn ncnn_Mat_reshape2(
        this: *const ncnn_Mat,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        allocator: *mut ncnn_Allocator,
    ) -> ncnn_Mat;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn3Mat7reshapeEiiiiPNS_9AllocatorE"]
    pub fn ncnn_Mat_reshape3(
        this: *const ncnn_Mat,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        d: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        allocator: *mut ncnn_Allocator,
    ) -> ncnn_Mat;
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn3Mat6createEiyPNS_9AllocatorE"]
    pub fn ncnn_Mat_create(
        this: *mut ncnn_Mat,
        w: ::std::os::raw::c_int,
        elemsize: usize,
        allocator: *mut ncnn_Allocator,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn3Mat6createEiiyPNS_9AllocatorE"]
    pub fn ncnn_Mat_create1(
        this: *mut ncnn_Mat,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        elemsize: usize,
        allocator: *mut ncnn_Allocator,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn3Mat6createEiiiyPNS_9AllocatorE"]
    pub fn ncnn_Mat_create2(
        this: *mut ncnn_Mat,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        elemsize: usize,
        allocator: *mut ncnn_Allocator,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn3Mat6createEiiiiyPNS_9AllocatorE"]
    pub fn ncnn_Mat_create3(
        this: *mut ncnn_Mat,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        d: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        elemsize: usize,
        allocator: *mut ncnn_Allocator,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn3Mat6createEiyiPNS_9AllocatorE"]
    pub fn ncnn_Mat_create4(
        this: *mut ncnn_Mat,
        w: ::std::os::raw::c_int,
        elemsize: usize,
        elempack: ::std::os::raw::c_int,
        allocator: *mut ncnn_Allocator,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn3Mat6createEiiyiPNS_9AllocatorE"]
    pub fn ncnn_Mat_create5(
        this: *mut ncnn_Mat,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        elemsize: usize,
        elempack: ::std::os::raw::c_int,
        allocator: *mut ncnn_Allocator,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn3Mat6createEiiiyiPNS_9AllocatorE"]
    pub fn ncnn_Mat_create6(
        this: *mut ncnn_Mat,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        elemsize: usize,
        elempack: ::std::os::raw::c_int,
        allocator: *mut ncnn_Allocator,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn3Mat6createEiiiiyiPNS_9AllocatorE"]
    pub fn ncnn_Mat_create7(
        this: *mut ncnn_Mat,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        d: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        elemsize: usize,
        elempack: ::std::os::raw::c_int,
        allocator: *mut ncnn_Allocator,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn3Mat11create_likeERKS0_PNS_9AllocatorE"]
    pub fn ncnn_Mat_create_like(
        this: *mut ncnn_Mat,
        m: *const ncnn_Mat,
        allocator: *mut ncnn_Allocator,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn3Mat11create_likeERKNS_5VkMatEPNS_9AllocatorE"]
    pub fn ncnn_Mat_create_like1(
        this: *mut ncnn_Mat,
        m: *const ncnn_VkMat,
        allocator: *mut ncnn_Allocator,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn3Mat11create_likeERKNS_10VkImageMatEPNS_9AllocatorE"]
    pub fn ncnn_Mat_create_like2(
        this: *mut ncnn_Mat,
        im: *const ncnn_VkImageMat,
        allocator: *mut ncnn_Allocator,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn3Mat11from_pixelsEPKhiiiPNS_9AllocatorE"]
    pub fn ncnn_Mat_from_pixels(
        pixels: *const ::std::os::raw::c_uchar,
        type_: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        allocator: *mut ncnn_Allocator,
    ) -> ncnn_Mat;
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn3Mat11from_pixelsEPKhiiiiPNS_9AllocatorE"]
    pub fn ncnn_Mat_from_pixels1(
        pixels: *const ::std::os::raw::c_uchar,
        type_: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        allocator: *mut ncnn_Allocator,
    ) -> ncnn_Mat;
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn3Mat18from_pixels_resizeEPKhiiiiiPNS_9AllocatorE"]
    pub fn ncnn_Mat_from_pixels_resize(
        pixels: *const ::std::os::raw::c_uchar,
        type_: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        target_width: ::std::os::raw::c_int,
        target_height: ::std::os::raw::c_int,
        allocator: *mut ncnn_Allocator,
    ) -> ncnn_Mat;
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn3Mat18from_pixels_resizeEPKhiiiiiiPNS_9AllocatorE"]
    pub fn ncnn_Mat_from_pixels_resize1(
        pixels: *const ::std::os::raw::c_uchar,
        type_: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        target_width: ::std::os::raw::c_int,
        target_height: ::std::os::raw::c_int,
        allocator: *mut ncnn_Allocator,
    ) -> ncnn_Mat;
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn3Mat15from_pixels_roiEPKhiiiiiiiPNS_9AllocatorE"]
    pub fn ncnn_Mat_from_pixels_roi(
        pixels: *const ::std::os::raw::c_uchar,
        type_: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        roix: ::std::os::raw::c_int,
        roiy: ::std::os::raw::c_int,
        roiw: ::std::os::raw::c_int,
        roih: ::std::os::raw::c_int,
        allocator: *mut ncnn_Allocator,
    ) -> ncnn_Mat;
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn3Mat15from_pixels_roiEPKhiiiiiiiiPNS_9AllocatorE"]
    pub fn ncnn_Mat_from_pixels_roi1(
        pixels: *const ::std::os::raw::c_uchar,
        type_: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        roix: ::std::os::raw::c_int,
        roiy: ::std::os::raw::c_int,
        roiw: ::std::os::raw::c_int,
        roih: ::std::os::raw::c_int,
        allocator: *mut ncnn_Allocator,
    ) -> ncnn_Mat;
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn3Mat22from_pixels_roi_resizeEPKhiiiiiiiiiPNS_9AllocatorE"]
    pub fn ncnn_Mat_from_pixels_roi_resize(
        pixels: *const ::std::os::raw::c_uchar,
        type_: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        roix: ::std::os::raw::c_int,
        roiy: ::std::os::raw::c_int,
        roiw: ::std::os::raw::c_int,
        roih: ::std::os::raw::c_int,
        target_width: ::std::os::raw::c_int,
        target_height: ::std::os::raw::c_int,
        allocator: *mut ncnn_Allocator,
    ) -> ncnn_Mat;
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn3Mat22from_pixels_roi_resizeEPKhiiiiiiiiiiPNS_9AllocatorE"]
    pub fn ncnn_Mat_from_pixels_roi_resize1(
        pixels: *const ::std::os::raw::c_uchar,
        type_: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        roix: ::std::os::raw::c_int,
        roiy: ::std::os::raw::c_int,
        roiw: ::std::os::raw::c_int,
        roih: ::std::os::raw::c_int,
        target_width: ::std::os::raw::c_int,
        target_height: ::std::os::raw::c_int,
        allocator: *mut ncnn_Allocator,
    ) -> ncnn_Mat;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn3Mat9to_pixelsEPhi"]
    pub fn ncnn_Mat_to_pixels(
        this: *const ncnn_Mat,
        pixels: *mut ::std::os::raw::c_uchar,
        type_: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn3Mat9to_pixelsEPhii"]
    pub fn ncnn_Mat_to_pixels1(
        this: *const ncnn_Mat,
        pixels: *mut ::std::os::raw::c_uchar,
        type_: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn3Mat16to_pixels_resizeEPhiii"]
    pub fn ncnn_Mat_to_pixels_resize(
        this: *const ncnn_Mat,
        pixels: *mut ::std::os::raw::c_uchar,
        type_: ::std::os::raw::c_int,
        target_width: ::std::os::raw::c_int,
        target_height: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn3Mat16to_pixels_resizeEPhiiii"]
    pub fn ncnn_Mat_to_pixels_resize1(
        this: *const ncnn_Mat,
        pixels: *mut ::std::os::raw::c_uchar,
        type_: ::std::os::raw::c_int,
        target_width: ::std::os::raw::c_int,
        target_height: ::std::os::raw::c_int,
        target_stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn3Mat24substract_mean_normalizeEPKfS2_"]
    pub fn ncnn_Mat_substract_mean_normalize(
        this: *mut ncnn_Mat,
        mean_vals: *const f32,
        norm_vals: *const f32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn3Mat12from_float16EPKti"]
    pub fn ncnn_Mat_from_float16(
        data: *const ::std::os::raw::c_ushort,
        size: ::std::os::raw::c_int,
    ) -> ncnn_Mat;
}
impl ncnn_Mat {
    #[inline]
    pub unsafe fn clone(&self, allocator: *mut ncnn_Allocator) -> ncnn_Mat {
        ncnn_Mat_clone(self, allocator)
    }
    #[inline]
    pub unsafe fn clone_from(&mut self, mat: *const ncnn_Mat, allocator: *mut ncnn_Allocator) {
        ncnn_Mat_clone_from(self, mat, allocator)
    }
    #[inline]
    pub unsafe fn reshape(
        &self,
        w: ::std::os::raw::c_int,
        allocator: *mut ncnn_Allocator,
    ) -> ncnn_Mat {
        ncnn_Mat_reshape(self, w, allocator)
    }
    #[inline]
    pub unsafe fn reshape1(
        &self,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        allocator: *mut ncnn_Allocator,
    ) -> ncnn_Mat {
        ncnn_Mat_reshape1(self, w, h, allocator)
    }
    #[inline]
    pub unsafe fn reshape2(
        &self,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        allocator: *mut ncnn_Allocator,
    ) -> ncnn_Mat {
        ncnn_Mat_reshape2(self, w, h, c, allocator)
    }
    #[inline]
    pub unsafe fn reshape3(
        &self,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        d: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        allocator: *mut ncnn_Allocator,
    ) -> ncnn_Mat {
        ncnn_Mat_reshape3(self, w, h, d, c, allocator)
    }
    #[inline]
    pub unsafe fn create(
        &mut self,
        w: ::std::os::raw::c_int,
        elemsize: usize,
        allocator: *mut ncnn_Allocator,
    ) {
        ncnn_Mat_create(self, w, elemsize, allocator)
    }
    #[inline]
    pub unsafe fn create1(
        &mut self,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        elemsize: usize,
        allocator: *mut ncnn_Allocator,
    ) {
        ncnn_Mat_create1(self, w, h, elemsize, allocator)
    }
    #[inline]
    pub unsafe fn create2(
        &mut self,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        elemsize: usize,
        allocator: *mut ncnn_Allocator,
    ) {
        ncnn_Mat_create2(self, w, h, c, elemsize, allocator)
    }
    #[inline]
    pub unsafe fn create3(
        &mut self,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        d: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        elemsize: usize,
        allocator: *mut ncnn_Allocator,
    ) {
        ncnn_Mat_create3(self, w, h, d, c, elemsize, allocator)
    }
    #[inline]
    pub unsafe fn create4(
        &mut self,
        w: ::std::os::raw::c_int,
        elemsize: usize,
        elempack: ::std::os::raw::c_int,
        allocator: *mut ncnn_Allocator,
    ) {
        ncnn_Mat_create4(self, w, elemsize, elempack, allocator)
    }
    #[inline]
    pub unsafe fn create5(
        &mut self,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        elemsize: usize,
        elempack: ::std::os::raw::c_int,
        allocator: *mut ncnn_Allocator,
    ) {
        ncnn_Mat_create5(self, w, h, elemsize, elempack, allocator)
    }
    #[inline]
    pub unsafe fn create6(
        &mut self,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        elemsize: usize,
        elempack: ::std::os::raw::c_int,
        allocator: *mut ncnn_Allocator,
    ) {
        ncnn_Mat_create6(self, w, h, c, elemsize, elempack, allocator)
    }
    #[inline]
    pub unsafe fn create7(
        &mut self,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        d: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        elemsize: usize,
        elempack: ::std::os::raw::c_int,
        allocator: *mut ncnn_Allocator,
    ) {
        ncnn_Mat_create7(self, w, h, d, c, elemsize, elempack, allocator)
    }
    #[inline]
    pub unsafe fn create_like(&mut self, m: *const ncnn_Mat, allocator: *mut ncnn_Allocator) {
        ncnn_Mat_create_like(self, m, allocator)
    }
    #[inline]
    pub unsafe fn create_like1(&mut self, m: *const ncnn_VkMat, allocator: *mut ncnn_Allocator) {
        ncnn_Mat_create_like1(self, m, allocator)
    }
    #[inline]
    pub unsafe fn create_like2(
        &mut self,
        im: *const ncnn_VkImageMat,
        allocator: *mut ncnn_Allocator,
    ) {
        ncnn_Mat_create_like2(self, im, allocator)
    }
    #[inline]
    pub unsafe fn from_pixels(
        pixels: *const ::std::os::raw::c_uchar,
        type_: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        allocator: *mut ncnn_Allocator,
    ) -> ncnn_Mat {
        ncnn_Mat_from_pixels(pixels, type_, w, h, allocator)
    }
    #[inline]
    pub unsafe fn from_pixels1(
        pixels: *const ::std::os::raw::c_uchar,
        type_: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        allocator: *mut ncnn_Allocator,
    ) -> ncnn_Mat {
        ncnn_Mat_from_pixels1(pixels, type_, w, h, stride, allocator)
    }
    #[inline]
    pub unsafe fn from_pixels_resize(
        pixels: *const ::std::os::raw::c_uchar,
        type_: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        target_width: ::std::os::raw::c_int,
        target_height: ::std::os::raw::c_int,
        allocator: *mut ncnn_Allocator,
    ) -> ncnn_Mat {
        ncnn_Mat_from_pixels_resize(pixels, type_, w, h, target_width, target_height, allocator)
    }
    #[inline]
    pub unsafe fn from_pixels_resize1(
        pixels: *const ::std::os::raw::c_uchar,
        type_: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        target_width: ::std::os::raw::c_int,
        target_height: ::std::os::raw::c_int,
        allocator: *mut ncnn_Allocator,
    ) -> ncnn_Mat {
        ncnn_Mat_from_pixels_resize1(
            pixels,
            type_,
            w,
            h,
            stride,
            target_width,
            target_height,
            allocator,
        )
    }
    #[inline]
    pub unsafe fn from_pixels_roi(
        pixels: *const ::std::os::raw::c_uchar,
        type_: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        roix: ::std::os::raw::c_int,
        roiy: ::std::os::raw::c_int,
        roiw: ::std::os::raw::c_int,
        roih: ::std::os::raw::c_int,
        allocator: *mut ncnn_Allocator,
    ) -> ncnn_Mat {
        ncnn_Mat_from_pixels_roi(pixels, type_, w, h, roix, roiy, roiw, roih, allocator)
    }
    #[inline]
    pub unsafe fn from_pixels_roi1(
        pixels: *const ::std::os::raw::c_uchar,
        type_: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        roix: ::std::os::raw::c_int,
        roiy: ::std::os::raw::c_int,
        roiw: ::std::os::raw::c_int,
        roih: ::std::os::raw::c_int,
        allocator: *mut ncnn_Allocator,
    ) -> ncnn_Mat {
        ncnn_Mat_from_pixels_roi1(
            pixels, type_, w, h, stride, roix, roiy, roiw, roih, allocator,
        )
    }
    #[inline]
    pub unsafe fn from_pixels_roi_resize(
        pixels: *const ::std::os::raw::c_uchar,
        type_: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        roix: ::std::os::raw::c_int,
        roiy: ::std::os::raw::c_int,
        roiw: ::std::os::raw::c_int,
        roih: ::std::os::raw::c_int,
        target_width: ::std::os::raw::c_int,
        target_height: ::std::os::raw::c_int,
        allocator: *mut ncnn_Allocator,
    ) -> ncnn_Mat {
        ncnn_Mat_from_pixels_roi_resize(
            pixels,
            type_,
            w,
            h,
            roix,
            roiy,
            roiw,
            roih,
            target_width,
            target_height,
            allocator,
        )
    }
    #[inline]
    pub unsafe fn from_pixels_roi_resize1(
        pixels: *const ::std::os::raw::c_uchar,
        type_: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        roix: ::std::os::raw::c_int,
        roiy: ::std::os::raw::c_int,
        roiw: ::std::os::raw::c_int,
        roih: ::std::os::raw::c_int,
        target_width: ::std::os::raw::c_int,
        target_height: ::std::os::raw::c_int,
        allocator: *mut ncnn_Allocator,
    ) -> ncnn_Mat {
        ncnn_Mat_from_pixels_roi_resize1(
            pixels,
            type_,
            w,
            h,
            stride,
            roix,
            roiy,
            roiw,
            roih,
            target_width,
            target_height,
            allocator,
        )
    }
    #[inline]
    pub unsafe fn to_pixels(
        &self,
        pixels: *mut ::std::os::raw::c_uchar,
        type_: ::std::os::raw::c_int,
    ) {
        ncnn_Mat_to_pixels(self, pixels, type_)
    }
    #[inline]
    pub unsafe fn to_pixels1(
        &self,
        pixels: *mut ::std::os::raw::c_uchar,
        type_: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    ) {
        ncnn_Mat_to_pixels1(self, pixels, type_, stride)
    }
    #[inline]
    pub unsafe fn to_pixels_resize(
        &self,
        pixels: *mut ::std::os::raw::c_uchar,
        type_: ::std::os::raw::c_int,
        target_width: ::std::os::raw::c_int,
        target_height: ::std::os::raw::c_int,
    ) {
        ncnn_Mat_to_pixels_resize(self, pixels, type_, target_width, target_height)
    }
    #[inline]
    pub unsafe fn to_pixels_resize1(
        &self,
        pixels: *mut ::std::os::raw::c_uchar,
        type_: ::std::os::raw::c_int,
        target_width: ::std::os::raw::c_int,
        target_height: ::std::os::raw::c_int,
        target_stride: ::std::os::raw::c_int,
    ) {
        ncnn_Mat_to_pixels_resize1(
            self,
            pixels,
            type_,
            target_width,
            target_height,
            target_stride,
        )
    }
    #[inline]
    pub unsafe fn substract_mean_normalize(
        &mut self,
        mean_vals: *const f32,
        norm_vals: *const f32,
    ) {
        ncnn_Mat_substract_mean_normalize(self, mean_vals, norm_vals)
    }
    #[inline]
    pub unsafe fn from_float16(
        data: *const ::std::os::raw::c_ushort,
        size: ::std::os::raw::c_int,
    ) -> ncnn_Mat {
        ncnn_Mat_from_float16(data, size)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct ncnn_VkMat {
    pub data: *mut ncnn_VkBufferMemory,
    pub refcount: *mut ::std::os::raw::c_int,
    pub elemsize: usize,
    pub elempack: ::std::os::raw::c_int,
    pub allocator: *mut ncnn_VkAllocator,
    pub dims: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
    pub d: ::std::os::raw::c_int,
    pub c: ::std::os::raw::c_int,
    pub cstep: usize,
}
#[test]
fn bindgen_test_layout_ncnn_VkMat() {
    const UNINIT: ::std::mem::MaybeUninit<ncnn_VkMat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ncnn_VkMat>(),
        72usize,
        concat!("Size of: ", stringify!(ncnn_VkMat))
    );
    assert_eq!(
        ::std::mem::align_of::<ncnn_VkMat>(),
        8usize,
        concat!("Alignment of ", stringify!(ncnn_VkMat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkMat),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refcount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkMat),
            "::",
            stringify!(refcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elemsize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkMat),
            "::",
            stringify!(elemsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elempack) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkMat),
            "::",
            stringify!(elempack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocator) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkMat),
            "::",
            stringify!(allocator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dims) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkMat),
            "::",
            stringify!(dims)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkMat),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkMat),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkMat),
            "::",
            stringify!(d)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkMat),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cstep) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkMat),
            "::",
            stringify!(cstep)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn5VkMat6createEiyPNS_11VkAllocatorE"]
    pub fn ncnn_VkMat_create(
        this: *mut ncnn_VkMat,
        w: ::std::os::raw::c_int,
        elemsize: usize,
        allocator: *mut ncnn_VkAllocator,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn5VkMat6createEiiyPNS_11VkAllocatorE"]
    pub fn ncnn_VkMat_create1(
        this: *mut ncnn_VkMat,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        elemsize: usize,
        allocator: *mut ncnn_VkAllocator,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn5VkMat6createEiiiyPNS_11VkAllocatorE"]
    pub fn ncnn_VkMat_create2(
        this: *mut ncnn_VkMat,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        elemsize: usize,
        allocator: *mut ncnn_VkAllocator,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn5VkMat6createEiiiiyPNS_11VkAllocatorE"]
    pub fn ncnn_VkMat_create3(
        this: *mut ncnn_VkMat,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        d: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        elemsize: usize,
        allocator: *mut ncnn_VkAllocator,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn5VkMat6createEiyiPNS_11VkAllocatorE"]
    pub fn ncnn_VkMat_create4(
        this: *mut ncnn_VkMat,
        w: ::std::os::raw::c_int,
        elemsize: usize,
        elempack: ::std::os::raw::c_int,
        allocator: *mut ncnn_VkAllocator,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn5VkMat6createEiiyiPNS_11VkAllocatorE"]
    pub fn ncnn_VkMat_create5(
        this: *mut ncnn_VkMat,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        elemsize: usize,
        elempack: ::std::os::raw::c_int,
        allocator: *mut ncnn_VkAllocator,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn5VkMat6createEiiiyiPNS_11VkAllocatorE"]
    pub fn ncnn_VkMat_create6(
        this: *mut ncnn_VkMat,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        elemsize: usize,
        elempack: ::std::os::raw::c_int,
        allocator: *mut ncnn_VkAllocator,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn5VkMat6createEiiiiyiPNS_11VkAllocatorE"]
    pub fn ncnn_VkMat_create7(
        this: *mut ncnn_VkMat,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        d: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        elemsize: usize,
        elempack: ::std::os::raw::c_int,
        allocator: *mut ncnn_VkAllocator,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn5VkMat11create_likeERKNS_3MatEPNS_11VkAllocatorE"]
    pub fn ncnn_VkMat_create_like(
        this: *mut ncnn_VkMat,
        m: *const ncnn_Mat,
        allocator: *mut ncnn_VkAllocator,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn5VkMat11create_likeERKS0_PNS_11VkAllocatorE"]
    pub fn ncnn_VkMat_create_like1(
        this: *mut ncnn_VkMat,
        m: *const ncnn_VkMat,
        allocator: *mut ncnn_VkAllocator,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn5VkMat11create_likeERKNS_10VkImageMatEPNS_11VkAllocatorE"]
    pub fn ncnn_VkMat_create_like2(
        this: *mut ncnn_VkMat,
        im: *const ncnn_VkImageMat,
        allocator: *mut ncnn_VkAllocator,
    );
}
impl ncnn_VkMat {
    #[inline]
    pub unsafe fn create(
        &mut self,
        w: ::std::os::raw::c_int,
        elemsize: usize,
        allocator: *mut ncnn_VkAllocator,
    ) {
        ncnn_VkMat_create(self, w, elemsize, allocator)
    }
    #[inline]
    pub unsafe fn create1(
        &mut self,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        elemsize: usize,
        allocator: *mut ncnn_VkAllocator,
    ) {
        ncnn_VkMat_create1(self, w, h, elemsize, allocator)
    }
    #[inline]
    pub unsafe fn create2(
        &mut self,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        elemsize: usize,
        allocator: *mut ncnn_VkAllocator,
    ) {
        ncnn_VkMat_create2(self, w, h, c, elemsize, allocator)
    }
    #[inline]
    pub unsafe fn create3(
        &mut self,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        d: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        elemsize: usize,
        allocator: *mut ncnn_VkAllocator,
    ) {
        ncnn_VkMat_create3(self, w, h, d, c, elemsize, allocator)
    }
    #[inline]
    pub unsafe fn create4(
        &mut self,
        w: ::std::os::raw::c_int,
        elemsize: usize,
        elempack: ::std::os::raw::c_int,
        allocator: *mut ncnn_VkAllocator,
    ) {
        ncnn_VkMat_create4(self, w, elemsize, elempack, allocator)
    }
    #[inline]
    pub unsafe fn create5(
        &mut self,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        elemsize: usize,
        elempack: ::std::os::raw::c_int,
        allocator: *mut ncnn_VkAllocator,
    ) {
        ncnn_VkMat_create5(self, w, h, elemsize, elempack, allocator)
    }
    #[inline]
    pub unsafe fn create6(
        &mut self,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        elemsize: usize,
        elempack: ::std::os::raw::c_int,
        allocator: *mut ncnn_VkAllocator,
    ) {
        ncnn_VkMat_create6(self, w, h, c, elemsize, elempack, allocator)
    }
    #[inline]
    pub unsafe fn create7(
        &mut self,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        d: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        elemsize: usize,
        elempack: ::std::os::raw::c_int,
        allocator: *mut ncnn_VkAllocator,
    ) {
        ncnn_VkMat_create7(self, w, h, d, c, elemsize, elempack, allocator)
    }
    #[inline]
    pub unsafe fn create_like(&mut self, m: *const ncnn_Mat, allocator: *mut ncnn_VkAllocator) {
        ncnn_VkMat_create_like(self, m, allocator)
    }
    #[inline]
    pub unsafe fn create_like1(&mut self, m: *const ncnn_VkMat, allocator: *mut ncnn_VkAllocator) {
        ncnn_VkMat_create_like1(self, m, allocator)
    }
    #[inline]
    pub unsafe fn create_like2(
        &mut self,
        im: *const ncnn_VkImageMat,
        allocator: *mut ncnn_VkAllocator,
    ) {
        ncnn_VkMat_create_like2(self, im, allocator)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct ncnn_VkImageMat {
    pub data: *mut ncnn_VkImageMemory,
    pub refcount: *mut ::std::os::raw::c_int,
    pub elemsize: usize,
    pub elempack: ::std::os::raw::c_int,
    pub allocator: *mut ncnn_VkAllocator,
    pub dims: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
    pub d: ::std::os::raw::c_int,
    pub c: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ncnn_VkImageMat() {
    const UNINIT: ::std::mem::MaybeUninit<ncnn_VkImageMat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ncnn_VkImageMat>(),
        64usize,
        concat!("Size of: ", stringify!(ncnn_VkImageMat))
    );
    assert_eq!(
        ::std::mem::align_of::<ncnn_VkImageMat>(),
        8usize,
        concat!("Alignment of ", stringify!(ncnn_VkImageMat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkImageMat),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refcount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkImageMat),
            "::",
            stringify!(refcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elemsize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkImageMat),
            "::",
            stringify!(elemsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elempack) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkImageMat),
            "::",
            stringify!(elempack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocator) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkImageMat),
            "::",
            stringify!(allocator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dims) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkImageMat),
            "::",
            stringify!(dims)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkImageMat),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkImageMat),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkImageMat),
            "::",
            stringify!(d)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VkImageMat),
            "::",
            stringify!(c)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn10VkImageMat6createEiyPNS_11VkAllocatorE"]
    pub fn ncnn_VkImageMat_create(
        this: *mut ncnn_VkImageMat,
        w: ::std::os::raw::c_int,
        elemsize: usize,
        allocator: *mut ncnn_VkAllocator,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn10VkImageMat6createEiiyPNS_11VkAllocatorE"]
    pub fn ncnn_VkImageMat_create1(
        this: *mut ncnn_VkImageMat,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        elemsize: usize,
        allocator: *mut ncnn_VkAllocator,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn10VkImageMat6createEiiiyPNS_11VkAllocatorE"]
    pub fn ncnn_VkImageMat_create2(
        this: *mut ncnn_VkImageMat,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        elemsize: usize,
        allocator: *mut ncnn_VkAllocator,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn10VkImageMat6createEiiiiyPNS_11VkAllocatorE"]
    pub fn ncnn_VkImageMat_create3(
        this: *mut ncnn_VkImageMat,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        d: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        elemsize: usize,
        allocator: *mut ncnn_VkAllocator,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn10VkImageMat6createEiyiPNS_11VkAllocatorE"]
    pub fn ncnn_VkImageMat_create4(
        this: *mut ncnn_VkImageMat,
        w: ::std::os::raw::c_int,
        elemsize: usize,
        elempack: ::std::os::raw::c_int,
        allocator: *mut ncnn_VkAllocator,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn10VkImageMat6createEiiyiPNS_11VkAllocatorE"]
    pub fn ncnn_VkImageMat_create5(
        this: *mut ncnn_VkImageMat,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        elemsize: usize,
        elempack: ::std::os::raw::c_int,
        allocator: *mut ncnn_VkAllocator,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn10VkImageMat6createEiiiyiPNS_11VkAllocatorE"]
    pub fn ncnn_VkImageMat_create6(
        this: *mut ncnn_VkImageMat,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        elemsize: usize,
        elempack: ::std::os::raw::c_int,
        allocator: *mut ncnn_VkAllocator,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn10VkImageMat6createEiiiiyiPNS_11VkAllocatorE"]
    pub fn ncnn_VkImageMat_create7(
        this: *mut ncnn_VkImageMat,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        d: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        elemsize: usize,
        elempack: ::std::os::raw::c_int,
        allocator: *mut ncnn_VkAllocator,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn10VkImageMat11create_likeERKNS_3MatEPNS_11VkAllocatorE"]
    pub fn ncnn_VkImageMat_create_like(
        this: *mut ncnn_VkImageMat,
        m: *const ncnn_Mat,
        allocator: *mut ncnn_VkAllocator,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn10VkImageMat11create_likeERKNS_5VkMatEPNS_11VkAllocatorE"]
    pub fn ncnn_VkImageMat_create_like1(
        this: *mut ncnn_VkImageMat,
        m: *const ncnn_VkMat,
        allocator: *mut ncnn_VkAllocator,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn10VkImageMat11create_likeERKS0_PNS_11VkAllocatorE"]
    pub fn ncnn_VkImageMat_create_like2(
        this: *mut ncnn_VkImageMat,
        im: *const ncnn_VkImageMat,
        allocator: *mut ncnn_VkAllocator,
    );
}
impl ncnn_VkImageMat {
    #[inline]
    pub unsafe fn create(
        &mut self,
        w: ::std::os::raw::c_int,
        elemsize: usize,
        allocator: *mut ncnn_VkAllocator,
    ) {
        ncnn_VkImageMat_create(self, w, elemsize, allocator)
    }
    #[inline]
    pub unsafe fn create1(
        &mut self,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        elemsize: usize,
        allocator: *mut ncnn_VkAllocator,
    ) {
        ncnn_VkImageMat_create1(self, w, h, elemsize, allocator)
    }
    #[inline]
    pub unsafe fn create2(
        &mut self,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        elemsize: usize,
        allocator: *mut ncnn_VkAllocator,
    ) {
        ncnn_VkImageMat_create2(self, w, h, c, elemsize, allocator)
    }
    #[inline]
    pub unsafe fn create3(
        &mut self,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        d: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        elemsize: usize,
        allocator: *mut ncnn_VkAllocator,
    ) {
        ncnn_VkImageMat_create3(self, w, h, d, c, elemsize, allocator)
    }
    #[inline]
    pub unsafe fn create4(
        &mut self,
        w: ::std::os::raw::c_int,
        elemsize: usize,
        elempack: ::std::os::raw::c_int,
        allocator: *mut ncnn_VkAllocator,
    ) {
        ncnn_VkImageMat_create4(self, w, elemsize, elempack, allocator)
    }
    #[inline]
    pub unsafe fn create5(
        &mut self,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        elemsize: usize,
        elempack: ::std::os::raw::c_int,
        allocator: *mut ncnn_VkAllocator,
    ) {
        ncnn_VkImageMat_create5(self, w, h, elemsize, elempack, allocator)
    }
    #[inline]
    pub unsafe fn create6(
        &mut self,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        elemsize: usize,
        elempack: ::std::os::raw::c_int,
        allocator: *mut ncnn_VkAllocator,
    ) {
        ncnn_VkImageMat_create6(self, w, h, c, elemsize, elempack, allocator)
    }
    #[inline]
    pub unsafe fn create7(
        &mut self,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        d: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        elemsize: usize,
        elempack: ::std::os::raw::c_int,
        allocator: *mut ncnn_VkAllocator,
    ) {
        ncnn_VkImageMat_create7(self, w, h, d, c, elemsize, elempack, allocator)
    }
    #[inline]
    pub unsafe fn create_like(&mut self, m: *const ncnn_Mat, allocator: *mut ncnn_VkAllocator) {
        ncnn_VkImageMat_create_like(self, m, allocator)
    }
    #[inline]
    pub unsafe fn create_like1(&mut self, m: *const ncnn_VkMat, allocator: *mut ncnn_VkAllocator) {
        ncnn_VkImageMat_create_like1(self, m, allocator)
    }
    #[inline]
    pub unsafe fn create_like2(
        &mut self,
        im: *const ncnn_VkImageMat,
        allocator: *mut ncnn_VkAllocator,
    ) {
        ncnn_VkImageMat_create_like2(self, im, allocator)
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ncnn_vk_specialization_type {
    pub i: ::std::os::raw::c_int,
    pub f: f32,
    pub u32_: u32,
}
#[test]
fn bindgen_test_layout_ncnn_vk_specialization_type() {
    const UNINIT: ::std::mem::MaybeUninit<ncnn_vk_specialization_type> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ncnn_vk_specialization_type>(),
        4usize,
        concat!("Size of: ", stringify!(ncnn_vk_specialization_type))
    );
    assert_eq!(
        ::std::mem::align_of::<ncnn_vk_specialization_type>(),
        4usize,
        concat!("Alignment of ", stringify!(ncnn_vk_specialization_type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).i) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_vk_specialization_type),
            "::",
            stringify!(i)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_vk_specialization_type),
            "::",
            stringify!(f)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_vk_specialization_type),
            "::",
            stringify!(u32_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ncnn_vk_constant_type {
    pub i: ::std::os::raw::c_int,
    pub f: f32,
}
#[test]
fn bindgen_test_layout_ncnn_vk_constant_type() {
    const UNINIT: ::std::mem::MaybeUninit<ncnn_vk_constant_type> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ncnn_vk_constant_type>(),
        4usize,
        concat!("Size of: ", stringify!(ncnn_vk_constant_type))
    );
    assert_eq!(
        ::std::mem::align_of::<ncnn_vk_constant_type>(),
        4usize,
        concat!("Alignment of ", stringify!(ncnn_vk_constant_type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).i) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_vk_constant_type),
            "::",
            stringify!(i)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_vk_constant_type),
            "::",
            stringify!(f)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn12yuv420sp2rgbEPKhiiPh"]
    pub fn ncnn_yuv420sp2rgb(
        yuv420sp: *const ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        rgb: *mut ::std::os::raw::c_uchar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn17yuv420sp2rgb_nv12EPKhiiPh"]
    pub fn ncnn_yuv420sp2rgb_nv12(
        yuv420sp: *const ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        rgb: *mut ::std::os::raw::c_uchar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn17yuv420sp2rgb_halfEPKhiiPh"]
    pub fn ncnn_yuv420sp2rgb_half(
        yuv420sp: *const ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        rgb: *mut ::std::os::raw::c_uchar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn18resize_bilinear_c1EPKhiiPhii"]
    pub fn ncnn_resize_bilinear_c1(
        src: *const ::std::os::raw::c_uchar,
        srcw: ::std::os::raw::c_int,
        srch: ::std::os::raw::c_int,
        dst: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn18resize_bilinear_c2EPKhiiPhii"]
    pub fn ncnn_resize_bilinear_c2(
        src: *const ::std::os::raw::c_uchar,
        srcw: ::std::os::raw::c_int,
        srch: ::std::os::raw::c_int,
        dst: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn18resize_bilinear_c3EPKhiiPhii"]
    pub fn ncnn_resize_bilinear_c3(
        src: *const ::std::os::raw::c_uchar,
        srcw: ::std::os::raw::c_int,
        srch: ::std::os::raw::c_int,
        dst: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn18resize_bilinear_c4EPKhiiPhii"]
    pub fn ncnn_resize_bilinear_c4(
        src: *const ::std::os::raw::c_uchar,
        srcw: ::std::os::raw::c_int,
        srch: ::std::os::raw::c_int,
        dst: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn18resize_bilinear_c1EPKhiiiPhiii"]
    pub fn ncnn_resize_bilinear_c11(
        src: *const ::std::os::raw::c_uchar,
        srcw: ::std::os::raw::c_int,
        srch: ::std::os::raw::c_int,
        srcstride: ::std::os::raw::c_int,
        dst: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn18resize_bilinear_c2EPKhiiiPhiii"]
    pub fn ncnn_resize_bilinear_c21(
        src: *const ::std::os::raw::c_uchar,
        srcw: ::std::os::raw::c_int,
        srch: ::std::os::raw::c_int,
        srcstride: ::std::os::raw::c_int,
        dst: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn18resize_bilinear_c3EPKhiiiPhiii"]
    pub fn ncnn_resize_bilinear_c31(
        src: *const ::std::os::raw::c_uchar,
        srcw: ::std::os::raw::c_int,
        srch: ::std::os::raw::c_int,
        srcstride: ::std::os::raw::c_int,
        dst: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn18resize_bilinear_c4EPKhiiiPhiii"]
    pub fn ncnn_resize_bilinear_c41(
        src: *const ::std::os::raw::c_uchar,
        srcw: ::std::os::raw::c_int,
        srch: ::std::os::raw::c_int,
        srcstride: ::std::os::raw::c_int,
        dst: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn24resize_bilinear_yuv420spEPKhiiPhii"]
    pub fn ncnn_resize_bilinear_yuv420sp(
        src: *const ::std::os::raw::c_uchar,
        srcw: ::std::os::raw::c_int,
        srch: ::std::os::raw::c_int,
        dst: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn15kanna_rotate_c1EPKhiiPhiii"]
    pub fn ncnn_kanna_rotate_c1(
        src: *const ::std::os::raw::c_uchar,
        srcw: ::std::os::raw::c_int,
        srch: ::std::os::raw::c_int,
        dst: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn15kanna_rotate_c2EPKhiiPhiii"]
    pub fn ncnn_kanna_rotate_c2(
        src: *const ::std::os::raw::c_uchar,
        srcw: ::std::os::raw::c_int,
        srch: ::std::os::raw::c_int,
        dst: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn15kanna_rotate_c3EPKhiiPhiii"]
    pub fn ncnn_kanna_rotate_c3(
        src: *const ::std::os::raw::c_uchar,
        srcw: ::std::os::raw::c_int,
        srch: ::std::os::raw::c_int,
        dst: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn15kanna_rotate_c4EPKhiiPhiii"]
    pub fn ncnn_kanna_rotate_c4(
        src: *const ::std::os::raw::c_uchar,
        srcw: ::std::os::raw::c_int,
        srch: ::std::os::raw::c_int,
        dst: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn15kanna_rotate_c1EPKhiiiPhiiii"]
    pub fn ncnn_kanna_rotate_c11(
        src: *const ::std::os::raw::c_uchar,
        srcw: ::std::os::raw::c_int,
        srch: ::std::os::raw::c_int,
        srcstride: ::std::os::raw::c_int,
        dst: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn15kanna_rotate_c2EPKhiiiPhiiii"]
    pub fn ncnn_kanna_rotate_c21(
        src: *const ::std::os::raw::c_uchar,
        srcw: ::std::os::raw::c_int,
        srch: ::std::os::raw::c_int,
        srcstride: ::std::os::raw::c_int,
        dst: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn15kanna_rotate_c3EPKhiiiPhiiii"]
    pub fn ncnn_kanna_rotate_c31(
        src: *const ::std::os::raw::c_uchar,
        srcw: ::std::os::raw::c_int,
        srch: ::std::os::raw::c_int,
        srcstride: ::std::os::raw::c_int,
        dst: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn15kanna_rotate_c4EPKhiiiPhiiii"]
    pub fn ncnn_kanna_rotate_c41(
        src: *const ::std::os::raw::c_uchar,
        srcw: ::std::os::raw::c_int,
        srch: ::std::os::raw::c_int,
        srcstride: ::std::os::raw::c_int,
        dst: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn21kanna_rotate_yuv420spEPKhiiPhiii"]
    pub fn ncnn_kanna_rotate_yuv420sp(
        src: *const ::std::os::raw::c_uchar,
        srcw: ::std::os::raw::c_int,
        srch: ::std::os::raw::c_int,
        dst: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn19get_rotation_matrixEffffPf"]
    pub fn ncnn_get_rotation_matrix(angle: f32, scale: f32, dx: f32, dy: f32, tm: *mut f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn20get_affine_transformEPKfS1_iPf"]
    pub fn ncnn_get_affine_transform(
        points_from: *const f32,
        points_to: *const f32,
        num_point: ::std::os::raw::c_int,
        tm: *mut f32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn23invert_affine_transformEPKfPf"]
    pub fn ncnn_invert_affine_transform(tm: *const f32, tm_inv: *mut f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn22warpaffine_bilinear_c1EPKhiiPhiiPKfij"]
    pub fn ncnn_warpaffine_bilinear_c1(
        src: *const ::std::os::raw::c_uchar,
        srcw: ::std::os::raw::c_int,
        srch: ::std::os::raw::c_int,
        dst: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        tm: *const f32,
        type_: ::std::os::raw::c_int,
        v: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn22warpaffine_bilinear_c2EPKhiiPhiiPKfij"]
    pub fn ncnn_warpaffine_bilinear_c2(
        src: *const ::std::os::raw::c_uchar,
        srcw: ::std::os::raw::c_int,
        srch: ::std::os::raw::c_int,
        dst: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        tm: *const f32,
        type_: ::std::os::raw::c_int,
        v: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn22warpaffine_bilinear_c3EPKhiiPhiiPKfij"]
    pub fn ncnn_warpaffine_bilinear_c3(
        src: *const ::std::os::raw::c_uchar,
        srcw: ::std::os::raw::c_int,
        srch: ::std::os::raw::c_int,
        dst: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        tm: *const f32,
        type_: ::std::os::raw::c_int,
        v: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn22warpaffine_bilinear_c4EPKhiiPhiiPKfij"]
    pub fn ncnn_warpaffine_bilinear_c4(
        src: *const ::std::os::raw::c_uchar,
        srcw: ::std::os::raw::c_int,
        srch: ::std::os::raw::c_int,
        dst: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        tm: *const f32,
        type_: ::std::os::raw::c_int,
        v: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn22warpaffine_bilinear_c1EPKhiiiPhiiiPKfij"]
    pub fn ncnn_warpaffine_bilinear_c11(
        src: *const ::std::os::raw::c_uchar,
        srcw: ::std::os::raw::c_int,
        srch: ::std::os::raw::c_int,
        srcstride: ::std::os::raw::c_int,
        dst: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        tm: *const f32,
        type_: ::std::os::raw::c_int,
        v: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn22warpaffine_bilinear_c2EPKhiiiPhiiiPKfij"]
    pub fn ncnn_warpaffine_bilinear_c21(
        src: *const ::std::os::raw::c_uchar,
        srcw: ::std::os::raw::c_int,
        srch: ::std::os::raw::c_int,
        srcstride: ::std::os::raw::c_int,
        dst: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        tm: *const f32,
        type_: ::std::os::raw::c_int,
        v: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn22warpaffine_bilinear_c3EPKhiiiPhiiiPKfij"]
    pub fn ncnn_warpaffine_bilinear_c31(
        src: *const ::std::os::raw::c_uchar,
        srcw: ::std::os::raw::c_int,
        srch: ::std::os::raw::c_int,
        srcstride: ::std::os::raw::c_int,
        dst: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        tm: *const f32,
        type_: ::std::os::raw::c_int,
        v: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn22warpaffine_bilinear_c4EPKhiiiPhiiiPKfij"]
    pub fn ncnn_warpaffine_bilinear_c41(
        src: *const ::std::os::raw::c_uchar,
        srcw: ::std::os::raw::c_int,
        srch: ::std::os::raw::c_int,
        srcstride: ::std::os::raw::c_int,
        dst: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        tm: *const f32,
        type_: ::std::os::raw::c_int,
        v: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn28warpaffine_bilinear_yuv420spEPKhiiPhiiPKfij"]
    pub fn ncnn_warpaffine_bilinear_yuv420sp(
        src: *const ::std::os::raw::c_uchar,
        srcw: ::std::os::raw::c_int,
        srch: ::std::os::raw::c_int,
        dst: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        tm: *const f32,
        type_: ::std::os::raw::c_int,
        v: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn17draw_rectangle_c1EPhiiiiiiji"]
    pub fn ncnn_draw_rectangle_c1(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        rx: ::std::os::raw::c_int,
        ry: ::std::os::raw::c_int,
        rw: ::std::os::raw::c_int,
        rh: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
        thickness: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn17draw_rectangle_c2EPhiiiiiiji"]
    pub fn ncnn_draw_rectangle_c2(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        rx: ::std::os::raw::c_int,
        ry: ::std::os::raw::c_int,
        rw: ::std::os::raw::c_int,
        rh: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
        thickness: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn17draw_rectangle_c3EPhiiiiiiji"]
    pub fn ncnn_draw_rectangle_c3(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        rx: ::std::os::raw::c_int,
        ry: ::std::os::raw::c_int,
        rw: ::std::os::raw::c_int,
        rh: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
        thickness: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn17draw_rectangle_c4EPhiiiiiiji"]
    pub fn ncnn_draw_rectangle_c4(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        rx: ::std::os::raw::c_int,
        ry: ::std::os::raw::c_int,
        rw: ::std::os::raw::c_int,
        rh: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
        thickness: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn17draw_rectangle_c1EPhiiiiiiiji"]
    pub fn ncnn_draw_rectangle_c11(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        rx: ::std::os::raw::c_int,
        ry: ::std::os::raw::c_int,
        rw: ::std::os::raw::c_int,
        rh: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
        thickness: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn17draw_rectangle_c2EPhiiiiiiiji"]
    pub fn ncnn_draw_rectangle_c21(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        rx: ::std::os::raw::c_int,
        ry: ::std::os::raw::c_int,
        rw: ::std::os::raw::c_int,
        rh: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
        thickness: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn17draw_rectangle_c3EPhiiiiiiiji"]
    pub fn ncnn_draw_rectangle_c31(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        rx: ::std::os::raw::c_int,
        ry: ::std::os::raw::c_int,
        rw: ::std::os::raw::c_int,
        rh: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
        thickness: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn17draw_rectangle_c4EPhiiiiiiiji"]
    pub fn ncnn_draw_rectangle_c41(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        rx: ::std::os::raw::c_int,
        ry: ::std::os::raw::c_int,
        rw: ::std::os::raw::c_int,
        rh: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
        thickness: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn23draw_rectangle_yuv420spEPhiiiiiiji"]
    pub fn ncnn_draw_rectangle_yuv420sp(
        yuv420sp: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        rx: ::std::os::raw::c_int,
        ry: ::std::os::raw::c_int,
        rw: ::std::os::raw::c_int,
        rh: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
        thickness: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn14draw_circle_c1EPhiiiiiji"]
    pub fn ncnn_draw_circle_c1(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        cx: ::std::os::raw::c_int,
        cy: ::std::os::raw::c_int,
        radius: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
        thickness: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn14draw_circle_c2EPhiiiiiji"]
    pub fn ncnn_draw_circle_c2(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        cx: ::std::os::raw::c_int,
        cy: ::std::os::raw::c_int,
        radius: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
        thickness: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn14draw_circle_c3EPhiiiiiji"]
    pub fn ncnn_draw_circle_c3(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        cx: ::std::os::raw::c_int,
        cy: ::std::os::raw::c_int,
        radius: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
        thickness: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn14draw_circle_c4EPhiiiiiji"]
    pub fn ncnn_draw_circle_c4(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        cx: ::std::os::raw::c_int,
        cy: ::std::os::raw::c_int,
        radius: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
        thickness: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn14draw_circle_c1EPhiiiiiiji"]
    pub fn ncnn_draw_circle_c11(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        cx: ::std::os::raw::c_int,
        cy: ::std::os::raw::c_int,
        radius: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
        thickness: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn14draw_circle_c2EPhiiiiiiji"]
    pub fn ncnn_draw_circle_c21(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        cx: ::std::os::raw::c_int,
        cy: ::std::os::raw::c_int,
        radius: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
        thickness: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn14draw_circle_c3EPhiiiiiiji"]
    pub fn ncnn_draw_circle_c31(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        cx: ::std::os::raw::c_int,
        cy: ::std::os::raw::c_int,
        radius: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
        thickness: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn14draw_circle_c4EPhiiiiiiji"]
    pub fn ncnn_draw_circle_c41(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        cx: ::std::os::raw::c_int,
        cy: ::std::os::raw::c_int,
        radius: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
        thickness: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn20draw_circle_yuv420spEPhiiiiiji"]
    pub fn ncnn_draw_circle_yuv420sp(
        yuv420sp: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        cx: ::std::os::raw::c_int,
        cy: ::std::os::raw::c_int,
        radius: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
        thickness: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn12draw_line_c1EPhiiiiiiji"]
    pub fn ncnn_draw_line_c1(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        x0: ::std::os::raw::c_int,
        y0: ::std::os::raw::c_int,
        x1: ::std::os::raw::c_int,
        y1: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
        thickness: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn12draw_line_c2EPhiiiiiiji"]
    pub fn ncnn_draw_line_c2(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        x0: ::std::os::raw::c_int,
        y0: ::std::os::raw::c_int,
        x1: ::std::os::raw::c_int,
        y1: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
        thickness: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn12draw_line_c3EPhiiiiiiji"]
    pub fn ncnn_draw_line_c3(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        x0: ::std::os::raw::c_int,
        y0: ::std::os::raw::c_int,
        x1: ::std::os::raw::c_int,
        y1: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
        thickness: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn12draw_line_c4EPhiiiiiiji"]
    pub fn ncnn_draw_line_c4(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        x0: ::std::os::raw::c_int,
        y0: ::std::os::raw::c_int,
        x1: ::std::os::raw::c_int,
        y1: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
        thickness: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn12draw_line_c1EPhiiiiiiiji"]
    pub fn ncnn_draw_line_c11(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        x0: ::std::os::raw::c_int,
        y0: ::std::os::raw::c_int,
        x1: ::std::os::raw::c_int,
        y1: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
        thickness: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn12draw_line_c2EPhiiiiiiiji"]
    pub fn ncnn_draw_line_c21(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        x0: ::std::os::raw::c_int,
        y0: ::std::os::raw::c_int,
        x1: ::std::os::raw::c_int,
        y1: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
        thickness: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn12draw_line_c3EPhiiiiiiiji"]
    pub fn ncnn_draw_line_c31(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        x0: ::std::os::raw::c_int,
        y0: ::std::os::raw::c_int,
        x1: ::std::os::raw::c_int,
        y1: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
        thickness: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn12draw_line_c4EPhiiiiiiiji"]
    pub fn ncnn_draw_line_c41(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        x0: ::std::os::raw::c_int,
        y0: ::std::os::raw::c_int,
        x1: ::std::os::raw::c_int,
        y1: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
        thickness: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn18draw_line_yuv420spEPhiiiiiiji"]
    pub fn ncnn_draw_line_yuv420sp(
        yuv420sp: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        x0: ::std::os::raw::c_int,
        y0: ::std::os::raw::c_int,
        x1: ::std::os::raw::c_int,
        y1: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
        thickness: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn21get_text_drawing_sizeEPKciPiS2_"]
    pub fn ncnn_get_text_drawing_size(
        text: *const ::std::os::raw::c_char,
        fontpixelsize: ::std::os::raw::c_int,
        w: *mut ::std::os::raw::c_int,
        h: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn12draw_text_c1EPhiiPKciiij"]
    pub fn ncnn_draw_text_c1(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        fontpixelsize: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn12draw_text_c2EPhiiPKciiij"]
    pub fn ncnn_draw_text_c2(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        fontpixelsize: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn12draw_text_c3EPhiiPKciiij"]
    pub fn ncnn_draw_text_c3(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        fontpixelsize: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn12draw_text_c4EPhiiPKciiij"]
    pub fn ncnn_draw_text_c4(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        fontpixelsize: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn12draw_text_c1EPhiiiPKciiij"]
    pub fn ncnn_draw_text_c11(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        fontpixelsize: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn12draw_text_c2EPhiiiPKciiij"]
    pub fn ncnn_draw_text_c21(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        fontpixelsize: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn12draw_text_c3EPhiiiPKciiij"]
    pub fn ncnn_draw_text_c31(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        fontpixelsize: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn12draw_text_c4EPhiiiPKciiij"]
    pub fn ncnn_draw_text_c41(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        fontpixelsize: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn18draw_text_yuv420spEPhiiPKciiij"]
    pub fn ncnn_draw_text_yuv420sp(
        yuv420sp: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        fontpixelsize: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn18float32_to_float16Ef"]
    pub fn ncnn_float32_to_float16(value: f32) -> ::std::os::raw::c_ushort;
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn18float16_to_float32Et"]
    pub fn ncnn_float16_to_float32(value: ::std::os::raw::c_ushort) -> f32;
}
pub const ncnn_BorderType_BORDER_CONSTANT: ncnn_BorderType = 0;
pub const ncnn_BorderType_BORDER_REPLICATE: ncnn_BorderType = 1;
pub const ncnn_BorderType_BORDER_REFLECT: ncnn_BorderType = 2;
pub const ncnn_BorderType_BORDER_TRANSPARENT: ncnn_BorderType = -233;
pub type ncnn_BorderType = ::std::os::raw::c_int;
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn16copy_make_borderERKNS_3MatERS0_iiiiifRKNS_6OptionE"]
    pub fn ncnn_copy_make_border(
        src: *const ncnn_Mat,
        dst: *mut ncnn_Mat,
        top: ::std::os::raw::c_int,
        bottom: ::std::os::raw::c_int,
        left: ::std::os::raw::c_int,
        right: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        v: f32,
        opt: *const ncnn_Option,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn19copy_make_border_3dERKNS_3MatERS0_iiiiiiifRKNS_6OptionE"]
    pub fn ncnn_copy_make_border_3d(
        src: *const ncnn_Mat,
        dst: *mut ncnn_Mat,
        top: ::std::os::raw::c_int,
        bottom: ::std::os::raw::c_int,
        left: ::std::os::raw::c_int,
        right: ::std::os::raw::c_int,
        front: ::std::os::raw::c_int,
        behind: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        v: f32,
        opt: *const ncnn_Option,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn15copy_cut_borderERKNS_3MatERS0_iiiiRKNS_6OptionE"]
    pub fn ncnn_copy_cut_border(
        src: *const ncnn_Mat,
        dst: *mut ncnn_Mat,
        top: ::std::os::raw::c_int,
        bottom: ::std::os::raw::c_int,
        left: ::std::os::raw::c_int,
        right: ::std::os::raw::c_int,
        opt: *const ncnn_Option,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn18copy_cut_border_3dERKNS_3MatERS0_iiiiiiRKNS_6OptionE"]
    pub fn ncnn_copy_cut_border_3d(
        src: *const ncnn_Mat,
        dst: *mut ncnn_Mat,
        top: ::std::os::raw::c_int,
        bottom: ::std::os::raw::c_int,
        left: ::std::os::raw::c_int,
        right: ::std::os::raw::c_int,
        front: ::std::os::raw::c_int,
        behind: ::std::os::raw::c_int,
        opt: *const ncnn_Option,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn14resize_nearestERKNS_3MatERS0_iiRKNS_6OptionE"]
    pub fn ncnn_resize_nearest(
        src: *const ncnn_Mat,
        dst: *mut ncnn_Mat,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        opt: *const ncnn_Option,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn15resize_bilinearERKNS_3MatERS0_iiRKNS_6OptionE"]
    pub fn ncnn_resize_bilinear(
        src: *const ncnn_Mat,
        dst: *mut ncnn_Mat,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        opt: *const ncnn_Option,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn14resize_bicubicERKNS_3MatERS0_iiRKNS_6OptionE"]
    pub fn ncnn_resize_bicubic(
        src: *const ncnn_Mat,
        dst: *mut ncnn_Mat,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        opt: *const ncnn_Option,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn15convert_packingERKNS_3MatERS0_iRKNS_6OptionE"]
    pub fn ncnn_convert_packing(
        src: *const ncnn_Mat,
        dst: *mut ncnn_Mat,
        elempack: ::std::os::raw::c_int,
        opt: *const ncnn_Option,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn7flattenERKNS_3MatERS0_RKNS_6OptionE"]
    pub fn ncnn_flatten(src: *const ncnn_Mat, dst: *mut ncnn_Mat, opt: *const ncnn_Option);
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn23cast_float32_to_float16ERKNS_3MatERS0_RKNS_6OptionE"]
    pub fn ncnn_cast_float32_to_float16(
        src: *const ncnn_Mat,
        dst: *mut ncnn_Mat,
        opt: *const ncnn_Option,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn23cast_float16_to_float32ERKNS_3MatERS0_RKNS_6OptionE"]
    pub fn ncnn_cast_float16_to_float32(
        src: *const ncnn_Mat,
        dst: *mut ncnn_Mat,
        opt: *const ncnn_Option,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn20cast_int8_to_float32ERKNS_3MatERS0_RKNS_6OptionE"]
    pub fn ncnn_cast_int8_to_float32(
        src: *const ncnn_Mat,
        dst: *mut ncnn_Mat,
        opt: *const ncnn_Option,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn24cast_float32_to_bfloat16ERKNS_3MatERS0_RKNS_6OptionE"]
    pub fn ncnn_cast_float32_to_bfloat16(
        src: *const ncnn_Mat,
        dst: *mut ncnn_Mat,
        opt: *const ncnn_Option,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn24cast_bfloat16_to_float32ERKNS_3MatERS0_RKNS_6OptionE"]
    pub fn ncnn_cast_bfloat16_to_float32(
        src: *const ncnn_Mat,
        dst: *mut ncnn_Mat,
        opt: *const ncnn_Option,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn16quantize_to_int8ERKNS_3MatERS0_S2_RKNS_6OptionE"]
    pub fn ncnn_quantize_to_int8(
        src: *const ncnn_Mat,
        dst: *mut ncnn_Mat,
        scale_data: *const ncnn_Mat,
        opt: *const ncnn_Option,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn21dequantize_from_int32ERKNS_3MatERS0_S2_S2_RKNS_6OptionE"]
    pub fn ncnn_dequantize_from_int32(
        src: *const ncnn_Mat,
        dst: *mut ncnn_Mat,
        scale_data: *const ncnn_Mat,
        bias_data: *const ncnn_Mat,
        opt: *const ncnn_Option,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn29requantize_from_int32_to_int8ERKNS_3MatERS0_S2_S2_S2_iS2_RKNS_6OptionE"]
    pub fn ncnn_requantize_from_int32_to_int8(
        src: *const ncnn_Mat,
        dst: *mut ncnn_Mat,
        scale_in_data: *const ncnn_Mat,
        scale_out_data: *const ncnn_Mat,
        bias_data: *const ncnn_Mat,
        activation_type: ::std::os::raw::c_int,
        activation_params: *const ncnn_Mat,
        opt: *const ncnn_Option,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn19create_gpu_instanceEPKc"]
    pub fn ncnn_create_gpu_instance(
        driver_path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn16get_gpu_instanceEv"]
    pub fn ncnn_get_gpu_instance() -> VkInstance;
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn20destroy_gpu_instanceEv"]
    pub fn ncnn_destroy_gpu_instance();
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn13get_gpu_countEv"]
    pub fn ncnn_get_gpu_count() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn21get_default_gpu_indexEv"]
    pub fn ncnn_get_default_gpu_index() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ncnn_GpuInfoPrivate {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct ncnn_GpuInfo__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct ncnn_GpuInfo {
    pub vtable_: *const ncnn_GpuInfo__bindgen_vtable,
    pub d: *mut ncnn_GpuInfoPrivate,
}
#[test]
fn bindgen_test_layout_ncnn_GpuInfo() {
    const UNINIT: ::std::mem::MaybeUninit<ncnn_GpuInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ncnn_GpuInfo>(),
        16usize,
        concat!("Size of: ", stringify!(ncnn_GpuInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ncnn_GpuInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(ncnn_GpuInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_GpuInfo),
            "::",
            stringify!(d)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo15physical_deviceEv"]
    pub fn ncnn_GpuInfo_physical_device(this: *const ncnn_GpuInfo) -> VkPhysicalDevice;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo33physical_device_memory_propertiesEv"]
    pub fn ncnn_GpuInfo_physical_device_memory_properties(
        this: *const ncnn_GpuInfo,
    ) -> *const VkPhysicalDeviceMemoryProperties;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo11api_versionEv"]
    pub fn ncnn_GpuInfo_api_version(this: *const ncnn_GpuInfo) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo14driver_versionEv"]
    pub fn ncnn_GpuInfo_driver_version(this: *const ncnn_GpuInfo) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo9vendor_idEv"]
    pub fn ncnn_GpuInfo_vendor_id(this: *const ncnn_GpuInfo) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo9device_idEv"]
    pub fn ncnn_GpuInfo_device_id(this: *const ncnn_GpuInfo) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo11device_nameEv"]
    pub fn ncnn_GpuInfo_device_name(this: *const ncnn_GpuInfo) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo19pipeline_cache_uuidEv"]
    pub fn ncnn_GpuInfo_pipeline_cache_uuid(this: *const ncnn_GpuInfo) -> *mut u8;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo9driver_idEv"]
    pub fn ncnn_GpuInfo_driver_id(this: *const ncnn_GpuInfo) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo11driver_nameEv"]
    pub fn ncnn_GpuInfo_driver_name(this: *const ncnn_GpuInfo) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo4typeEv"]
    pub fn ncnn_GpuInfo_type(this: *const ncnn_GpuInfo) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo22max_shared_memory_sizeEv"]
    pub fn ncnn_GpuInfo_max_shared_memory_size(this: *const ncnn_GpuInfo) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo21max_workgroup_count_xEv"]
    pub fn ncnn_GpuInfo_max_workgroup_count_x(this: *const ncnn_GpuInfo) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo21max_workgroup_count_yEv"]
    pub fn ncnn_GpuInfo_max_workgroup_count_y(this: *const ncnn_GpuInfo) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo21max_workgroup_count_zEv"]
    pub fn ncnn_GpuInfo_max_workgroup_count_z(this: *const ncnn_GpuInfo) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo25max_workgroup_invocationsEv"]
    pub fn ncnn_GpuInfo_max_workgroup_invocations(this: *const ncnn_GpuInfo) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo20max_workgroup_size_xEv"]
    pub fn ncnn_GpuInfo_max_workgroup_size_x(this: *const ncnn_GpuInfo) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo20max_workgroup_size_yEv"]
    pub fn ncnn_GpuInfo_max_workgroup_size_y(this: *const ncnn_GpuInfo) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo20max_workgroup_size_zEv"]
    pub fn ncnn_GpuInfo_max_workgroup_size_z(this: *const ncnn_GpuInfo) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo20memory_map_alignmentEv"]
    pub fn ncnn_GpuInfo_memory_map_alignment(this: *const ncnn_GpuInfo) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo23buffer_offset_alignmentEv"]
    pub fn ncnn_GpuInfo_buffer_offset_alignment(this: *const ncnn_GpuInfo) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo22non_coherent_atom_sizeEv"]
    pub fn ncnn_GpuInfo_non_coherent_atom_size(this: *const ncnn_GpuInfo) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo24buffer_image_granularityEv"]
    pub fn ncnn_GpuInfo_buffer_image_granularity(this: *const ncnn_GpuInfo) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo22max_image_dimension_1dEv"]
    pub fn ncnn_GpuInfo_max_image_dimension_1d(this: *const ncnn_GpuInfo) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo22max_image_dimension_2dEv"]
    pub fn ncnn_GpuInfo_max_image_dimension_2d(this: *const ncnn_GpuInfo) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo22max_image_dimension_3dEv"]
    pub fn ncnn_GpuInfo_max_image_dimension_3d(this: *const ncnn_GpuInfo) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo16timestamp_periodEv"]
    pub fn ncnn_GpuInfo_timestamp_period(this: *const ncnn_GpuInfo) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo26compute_queue_family_indexEv"]
    pub fn ncnn_GpuInfo_compute_queue_family_index(this: *const ncnn_GpuInfo) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo27graphics_queue_family_indexEv"]
    pub fn ncnn_GpuInfo_graphics_queue_family_index(this: *const ncnn_GpuInfo) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo27transfer_queue_family_indexEv"]
    pub fn ncnn_GpuInfo_transfer_queue_family_index(this: *const ncnn_GpuInfo) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo19compute_queue_countEv"]
    pub fn ncnn_GpuInfo_compute_queue_count(this: *const ncnn_GpuInfo) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo20graphics_queue_countEv"]
    pub fn ncnn_GpuInfo_graphics_queue_count(this: *const ncnn_GpuInfo) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo20transfer_queue_countEv"]
    pub fn ncnn_GpuInfo_transfer_queue_count(this: *const ncnn_GpuInfo) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo30unified_compute_transfer_queueEv"]
    pub fn ncnn_GpuInfo_unified_compute_transfer_queue(this: *const ncnn_GpuInfo) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo13subgroup_sizeEv"]
    pub fn ncnn_GpuInfo_subgroup_size(this: *const ncnn_GpuInfo) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo22support_subgroup_basicEv"]
    pub fn ncnn_GpuInfo_support_subgroup_basic(this: *const ncnn_GpuInfo) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo21support_subgroup_voteEv"]
    pub fn ncnn_GpuInfo_support_subgroup_vote(this: *const ncnn_GpuInfo) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo23support_subgroup_ballotEv"]
    pub fn ncnn_GpuInfo_support_subgroup_ballot(this: *const ncnn_GpuInfo) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo24support_subgroup_shuffleEv"]
    pub fn ncnn_GpuInfo_support_subgroup_shuffle(this: *const ncnn_GpuInfo) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo24bug_storage_buffer_no_l1Ev"]
    pub fn ncnn_GpuInfo_bug_storage_buffer_no_l1(this: *const ncnn_GpuInfo) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo35bug_corrupted_online_pipeline_cacheEv"]
    pub fn ncnn_GpuInfo_bug_corrupted_online_pipeline_cache(this: *const ncnn_GpuInfo) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo26bug_buffer_image_load_zeroEv"]
    pub fn ncnn_GpuInfo_bug_buffer_image_load_zero(this: *const ncnn_GpuInfo) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo28bug_implicit_fp16_arithmeticEv"]
    pub fn ncnn_GpuInfo_bug_implicit_fp16_arithmetic(this: *const ncnn_GpuInfo) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo19support_fp16_packedEv"]
    pub fn ncnn_GpuInfo_support_fp16_packed(this: *const ncnn_GpuInfo) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo20support_fp16_storageEv"]
    pub fn ncnn_GpuInfo_support_fp16_storage(this: *const ncnn_GpuInfo) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo20support_fp16_uniformEv"]
    pub fn ncnn_GpuInfo_support_fp16_uniform(this: *const ncnn_GpuInfo) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo23support_fp16_arithmeticEv"]
    pub fn ncnn_GpuInfo_support_fp16_arithmetic(this: *const ncnn_GpuInfo) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo19support_int8_packedEv"]
    pub fn ncnn_GpuInfo_support_int8_packed(this: *const ncnn_GpuInfo) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo20support_int8_storageEv"]
    pub fn ncnn_GpuInfo_support_int8_storage(this: *const ncnn_GpuInfo) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo20support_int8_uniformEv"]
    pub fn ncnn_GpuInfo_support_int8_uniform(this: *const ncnn_GpuInfo) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo23support_int8_arithmeticEv"]
    pub fn ncnn_GpuInfo_support_int8_arithmetic(this: *const ncnn_GpuInfo) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo24support_ycbcr_conversionEv"]
    pub fn ncnn_GpuInfo_support_ycbcr_conversion(this: *const ncnn_GpuInfo) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo26support_cooperative_matrixEv"]
    pub fn ncnn_GpuInfo_support_cooperative_matrix(this: *const ncnn_GpuInfo) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo33support_cooperative_matrix_8_8_16Ev"]
    pub fn ncnn_GpuInfo_support_cooperative_matrix_8_8_16(this: *const ncnn_GpuInfo) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo33support_cooperative_matrix_16_8_8Ev"]
    pub fn ncnn_GpuInfo_support_cooperative_matrix_16_8_8(this: *const ncnn_GpuInfo) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo34support_cooperative_matrix_16_8_16Ev"]
    pub fn ncnn_GpuInfo_support_cooperative_matrix_16_8_16(this: *const ncnn_GpuInfo) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo35support_cooperative_matrix_16_16_16Ev"]
    pub fn ncnn_GpuInfo_support_cooperative_matrix_16_16_16(this: *const ncnn_GpuInfo) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo27support_VK_KHR_8bit_storageEv"]
    pub fn ncnn_GpuInfo_support_VK_KHR_8bit_storage(
        this: *const ncnn_GpuInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo28support_VK_KHR_16bit_storageEv"]
    pub fn ncnn_GpuInfo_support_VK_KHR_16bit_storage(
        this: *const ncnn_GpuInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo27support_VK_KHR_bind_memory2Ev"]
    pub fn ncnn_GpuInfo_support_VK_KHR_bind_memory2(
        this: *const ncnn_GpuInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo36support_VK_KHR_buffer_device_addressEv"]
    pub fn ncnn_GpuInfo_support_VK_KHR_buffer_device_address(
        this: *const ncnn_GpuInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo33support_VK_KHR_create_renderpass2Ev"]
    pub fn ncnn_GpuInfo_support_VK_KHR_create_renderpass2(
        this: *const ncnn_GpuInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo33support_VK_KHR_cooperative_matrixEv"]
    pub fn ncnn_GpuInfo_support_VK_KHR_cooperative_matrix(
        this: *const ncnn_GpuInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo35support_VK_KHR_dedicated_allocationEv"]
    pub fn ncnn_GpuInfo_support_VK_KHR_dedicated_allocation(
        this: *const ncnn_GpuInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo41support_VK_KHR_descriptor_update_templateEv"]
    pub fn ncnn_GpuInfo_support_VK_KHR_descriptor_update_template(
        this: *const ncnn_GpuInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo32support_VK_KHR_driver_propertiesEv"]
    pub fn ncnn_GpuInfo_support_VK_KHR_driver_properties(
        this: *const ncnn_GpuInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo30support_VK_KHR_external_memoryEv"]
    pub fn ncnn_GpuInfo_support_VK_KHR_external_memory(
        this: *const ncnn_GpuInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo39support_VK_KHR_get_memory_requirements2Ev"]
    pub fn ncnn_GpuInfo_support_VK_KHR_get_memory_requirements2(
        this: *const ncnn_GpuInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo27support_VK_KHR_maintenance1Ev"]
    pub fn ncnn_GpuInfo_support_VK_KHR_maintenance1(
        this: *const ncnn_GpuInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo27support_VK_KHR_maintenance2Ev"]
    pub fn ncnn_GpuInfo_support_VK_KHR_maintenance2(
        this: *const ncnn_GpuInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo27support_VK_KHR_maintenance3Ev"]
    pub fn ncnn_GpuInfo_support_VK_KHR_maintenance3(
        this: *const ncnn_GpuInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo24support_VK_KHR_multiviewEv"]
    pub fn ncnn_GpuInfo_support_VK_KHR_multiview(
        this: *const ncnn_GpuInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo33support_VK_KHR_portability_subsetEv"]
    pub fn ncnn_GpuInfo_support_VK_KHR_portability_subset(
        this: *const ncnn_GpuInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo30support_VK_KHR_push_descriptorEv"]
    pub fn ncnn_GpuInfo_support_VK_KHR_push_descriptor(
        this: *const ncnn_GpuInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo39support_VK_KHR_sampler_ycbcr_conversionEv"]
    pub fn ncnn_GpuInfo_support_VK_KHR_sampler_ycbcr_conversion(
        this: *const ncnn_GpuInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo34support_VK_KHR_shader_float16_int8Ev"]
    pub fn ncnn_GpuInfo_support_VK_KHR_shader_float16_int8(
        this: *const ncnn_GpuInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo36support_VK_KHR_shader_float_controlsEv"]
    pub fn ncnn_GpuInfo_support_VK_KHR_shader_float_controls(
        this: *const ncnn_GpuInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo43support_VK_KHR_storage_buffer_storage_classEv"]
    pub fn ncnn_GpuInfo_support_VK_KHR_storage_buffer_storage_class(
        this: *const ncnn_GpuInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo24support_VK_KHR_swapchainEv"]
    pub fn ncnn_GpuInfo_support_VK_KHR_swapchain(
        this: *const ncnn_GpuInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo36support_VK_EXT_buffer_device_addressEv"]
    pub fn ncnn_GpuInfo_support_VK_EXT_buffer_device_address(
        this: *const ncnn_GpuInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo34support_VK_EXT_descriptor_indexingEv"]
    pub fn ncnn_GpuInfo_support_VK_EXT_descriptor_indexing(
        this: *const ncnn_GpuInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo28support_VK_EXT_memory_budgetEv"]
    pub fn ncnn_GpuInfo_support_VK_EXT_memory_budget(
        this: *const ncnn_GpuInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo30support_VK_EXT_memory_priorityEv"]
    pub fn ncnn_GpuInfo_support_VK_EXT_memory_priority(
        this: *const ncnn_GpuInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo35support_VK_EXT_queue_family_foreignEv"]
    pub fn ncnn_GpuInfo_support_VK_EXT_queue_family_foreign(
        this: *const ncnn_GpuInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo37support_VK_AMD_device_coherent_memoryEv"]
    pub fn ncnn_GpuInfo_support_VK_AMD_device_coherent_memory(
        this: *const ncnn_GpuInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn7GpuInfo32support_VK_NV_cooperative_matrixEv"]
    pub fn ncnn_GpuInfo_support_VK_NV_cooperative_matrix(
        this: *const ncnn_GpuInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn7GpuInfoC1Ev"]
    pub fn ncnn_GpuInfo_GpuInfo(this: *mut ncnn_GpuInfo);
}
impl ncnn_GpuInfo {
    #[inline]
    pub unsafe fn physical_device(&self) -> VkPhysicalDevice {
        ncnn_GpuInfo_physical_device(self)
    }
    #[inline]
    pub unsafe fn physical_device_memory_properties(
        &self,
    ) -> *const VkPhysicalDeviceMemoryProperties {
        ncnn_GpuInfo_physical_device_memory_properties(self)
    }
    #[inline]
    pub unsafe fn api_version(&self) -> u32 {
        ncnn_GpuInfo_api_version(self)
    }
    #[inline]
    pub unsafe fn driver_version(&self) -> u32 {
        ncnn_GpuInfo_driver_version(self)
    }
    #[inline]
    pub unsafe fn vendor_id(&self) -> u32 {
        ncnn_GpuInfo_vendor_id(self)
    }
    #[inline]
    pub unsafe fn device_id(&self) -> u32 {
        ncnn_GpuInfo_device_id(self)
    }
    #[inline]
    pub unsafe fn device_name(&self) -> *const ::std::os::raw::c_char {
        ncnn_GpuInfo_device_name(self)
    }
    #[inline]
    pub unsafe fn pipeline_cache_uuid(&self) -> *mut u8 {
        ncnn_GpuInfo_pipeline_cache_uuid(self)
    }
    #[inline]
    pub unsafe fn driver_id(&self) -> u32 {
        ncnn_GpuInfo_driver_id(self)
    }
    #[inline]
    pub unsafe fn driver_name(&self) -> *const ::std::os::raw::c_char {
        ncnn_GpuInfo_driver_name(self)
    }
    #[inline]
    pub unsafe fn type_(&self) -> ::std::os::raw::c_int {
        ncnn_GpuInfo_type(self)
    }
    #[inline]
    pub unsafe fn max_shared_memory_size(&self) -> u32 {
        ncnn_GpuInfo_max_shared_memory_size(self)
    }
    #[inline]
    pub unsafe fn max_workgroup_count_x(&self) -> u32 {
        ncnn_GpuInfo_max_workgroup_count_x(self)
    }
    #[inline]
    pub unsafe fn max_workgroup_count_y(&self) -> u32 {
        ncnn_GpuInfo_max_workgroup_count_y(self)
    }
    #[inline]
    pub unsafe fn max_workgroup_count_z(&self) -> u32 {
        ncnn_GpuInfo_max_workgroup_count_z(self)
    }
    #[inline]
    pub unsafe fn max_workgroup_invocations(&self) -> u32 {
        ncnn_GpuInfo_max_workgroup_invocations(self)
    }
    #[inline]
    pub unsafe fn max_workgroup_size_x(&self) -> u32 {
        ncnn_GpuInfo_max_workgroup_size_x(self)
    }
    #[inline]
    pub unsafe fn max_workgroup_size_y(&self) -> u32 {
        ncnn_GpuInfo_max_workgroup_size_y(self)
    }
    #[inline]
    pub unsafe fn max_workgroup_size_z(&self) -> u32 {
        ncnn_GpuInfo_max_workgroup_size_z(self)
    }
    #[inline]
    pub unsafe fn memory_map_alignment(&self) -> usize {
        ncnn_GpuInfo_memory_map_alignment(self)
    }
    #[inline]
    pub unsafe fn buffer_offset_alignment(&self) -> usize {
        ncnn_GpuInfo_buffer_offset_alignment(self)
    }
    #[inline]
    pub unsafe fn non_coherent_atom_size(&self) -> usize {
        ncnn_GpuInfo_non_coherent_atom_size(self)
    }
    #[inline]
    pub unsafe fn buffer_image_granularity(&self) -> usize {
        ncnn_GpuInfo_buffer_image_granularity(self)
    }
    #[inline]
    pub unsafe fn max_image_dimension_1d(&self) -> u32 {
        ncnn_GpuInfo_max_image_dimension_1d(self)
    }
    #[inline]
    pub unsafe fn max_image_dimension_2d(&self) -> u32 {
        ncnn_GpuInfo_max_image_dimension_2d(self)
    }
    #[inline]
    pub unsafe fn max_image_dimension_3d(&self) -> u32 {
        ncnn_GpuInfo_max_image_dimension_3d(self)
    }
    #[inline]
    pub unsafe fn timestamp_period(&self) -> f32 {
        ncnn_GpuInfo_timestamp_period(self)
    }
    #[inline]
    pub unsafe fn compute_queue_family_index(&self) -> u32 {
        ncnn_GpuInfo_compute_queue_family_index(self)
    }
    #[inline]
    pub unsafe fn graphics_queue_family_index(&self) -> u32 {
        ncnn_GpuInfo_graphics_queue_family_index(self)
    }
    #[inline]
    pub unsafe fn transfer_queue_family_index(&self) -> u32 {
        ncnn_GpuInfo_transfer_queue_family_index(self)
    }
    #[inline]
    pub unsafe fn compute_queue_count(&self) -> u32 {
        ncnn_GpuInfo_compute_queue_count(self)
    }
    #[inline]
    pub unsafe fn graphics_queue_count(&self) -> u32 {
        ncnn_GpuInfo_graphics_queue_count(self)
    }
    #[inline]
    pub unsafe fn transfer_queue_count(&self) -> u32 {
        ncnn_GpuInfo_transfer_queue_count(self)
    }
    #[inline]
    pub unsafe fn unified_compute_transfer_queue(&self) -> bool {
        ncnn_GpuInfo_unified_compute_transfer_queue(self)
    }
    #[inline]
    pub unsafe fn subgroup_size(&self) -> u32 {
        ncnn_GpuInfo_subgroup_size(self)
    }
    #[inline]
    pub unsafe fn support_subgroup_basic(&self) -> bool {
        ncnn_GpuInfo_support_subgroup_basic(self)
    }
    #[inline]
    pub unsafe fn support_subgroup_vote(&self) -> bool {
        ncnn_GpuInfo_support_subgroup_vote(self)
    }
    #[inline]
    pub unsafe fn support_subgroup_ballot(&self) -> bool {
        ncnn_GpuInfo_support_subgroup_ballot(self)
    }
    #[inline]
    pub unsafe fn support_subgroup_shuffle(&self) -> bool {
        ncnn_GpuInfo_support_subgroup_shuffle(self)
    }
    #[inline]
    pub unsafe fn bug_storage_buffer_no_l1(&self) -> bool {
        ncnn_GpuInfo_bug_storage_buffer_no_l1(self)
    }
    #[inline]
    pub unsafe fn bug_corrupted_online_pipeline_cache(&self) -> bool {
        ncnn_GpuInfo_bug_corrupted_online_pipeline_cache(self)
    }
    #[inline]
    pub unsafe fn bug_buffer_image_load_zero(&self) -> bool {
        ncnn_GpuInfo_bug_buffer_image_load_zero(self)
    }
    #[inline]
    pub unsafe fn bug_implicit_fp16_arithmetic(&self) -> bool {
        ncnn_GpuInfo_bug_implicit_fp16_arithmetic(self)
    }
    #[inline]
    pub unsafe fn support_fp16_packed(&self) -> bool {
        ncnn_GpuInfo_support_fp16_packed(self)
    }
    #[inline]
    pub unsafe fn support_fp16_storage(&self) -> bool {
        ncnn_GpuInfo_support_fp16_storage(self)
    }
    #[inline]
    pub unsafe fn support_fp16_uniform(&self) -> bool {
        ncnn_GpuInfo_support_fp16_uniform(self)
    }
    #[inline]
    pub unsafe fn support_fp16_arithmetic(&self) -> bool {
        ncnn_GpuInfo_support_fp16_arithmetic(self)
    }
    #[inline]
    pub unsafe fn support_int8_packed(&self) -> bool {
        ncnn_GpuInfo_support_int8_packed(self)
    }
    #[inline]
    pub unsafe fn support_int8_storage(&self) -> bool {
        ncnn_GpuInfo_support_int8_storage(self)
    }
    #[inline]
    pub unsafe fn support_int8_uniform(&self) -> bool {
        ncnn_GpuInfo_support_int8_uniform(self)
    }
    #[inline]
    pub unsafe fn support_int8_arithmetic(&self) -> bool {
        ncnn_GpuInfo_support_int8_arithmetic(self)
    }
    #[inline]
    pub unsafe fn support_ycbcr_conversion(&self) -> bool {
        ncnn_GpuInfo_support_ycbcr_conversion(self)
    }
    #[inline]
    pub unsafe fn support_cooperative_matrix(&self) -> bool {
        ncnn_GpuInfo_support_cooperative_matrix(self)
    }
    #[inline]
    pub unsafe fn support_cooperative_matrix_8_8_16(&self) -> bool {
        ncnn_GpuInfo_support_cooperative_matrix_8_8_16(self)
    }
    #[inline]
    pub unsafe fn support_cooperative_matrix_16_8_8(&self) -> bool {
        ncnn_GpuInfo_support_cooperative_matrix_16_8_8(self)
    }
    #[inline]
    pub unsafe fn support_cooperative_matrix_16_8_16(&self) -> bool {
        ncnn_GpuInfo_support_cooperative_matrix_16_8_16(self)
    }
    #[inline]
    pub unsafe fn support_cooperative_matrix_16_16_16(&self) -> bool {
        ncnn_GpuInfo_support_cooperative_matrix_16_16_16(self)
    }
    #[inline]
    pub unsafe fn support_VK_KHR_8bit_storage(&self) -> ::std::os::raw::c_int {
        ncnn_GpuInfo_support_VK_KHR_8bit_storage(self)
    }
    #[inline]
    pub unsafe fn support_VK_KHR_16bit_storage(&self) -> ::std::os::raw::c_int {
        ncnn_GpuInfo_support_VK_KHR_16bit_storage(self)
    }
    #[inline]
    pub unsafe fn support_VK_KHR_bind_memory2(&self) -> ::std::os::raw::c_int {
        ncnn_GpuInfo_support_VK_KHR_bind_memory2(self)
    }
    #[inline]
    pub unsafe fn support_VK_KHR_buffer_device_address(&self) -> ::std::os::raw::c_int {
        ncnn_GpuInfo_support_VK_KHR_buffer_device_address(self)
    }
    #[inline]
    pub unsafe fn support_VK_KHR_create_renderpass2(&self) -> ::std::os::raw::c_int {
        ncnn_GpuInfo_support_VK_KHR_create_renderpass2(self)
    }
    #[inline]
    pub unsafe fn support_VK_KHR_cooperative_matrix(&self) -> ::std::os::raw::c_int {
        ncnn_GpuInfo_support_VK_KHR_cooperative_matrix(self)
    }
    #[inline]
    pub unsafe fn support_VK_KHR_dedicated_allocation(&self) -> ::std::os::raw::c_int {
        ncnn_GpuInfo_support_VK_KHR_dedicated_allocation(self)
    }
    #[inline]
    pub unsafe fn support_VK_KHR_descriptor_update_template(&self) -> ::std::os::raw::c_int {
        ncnn_GpuInfo_support_VK_KHR_descriptor_update_template(self)
    }
    #[inline]
    pub unsafe fn support_VK_KHR_driver_properties(&self) -> ::std::os::raw::c_int {
        ncnn_GpuInfo_support_VK_KHR_driver_properties(self)
    }
    #[inline]
    pub unsafe fn support_VK_KHR_external_memory(&self) -> ::std::os::raw::c_int {
        ncnn_GpuInfo_support_VK_KHR_external_memory(self)
    }
    #[inline]
    pub unsafe fn support_VK_KHR_get_memory_requirements2(&self) -> ::std::os::raw::c_int {
        ncnn_GpuInfo_support_VK_KHR_get_memory_requirements2(self)
    }
    #[inline]
    pub unsafe fn support_VK_KHR_maintenance1(&self) -> ::std::os::raw::c_int {
        ncnn_GpuInfo_support_VK_KHR_maintenance1(self)
    }
    #[inline]
    pub unsafe fn support_VK_KHR_maintenance2(&self) -> ::std::os::raw::c_int {
        ncnn_GpuInfo_support_VK_KHR_maintenance2(self)
    }
    #[inline]
    pub unsafe fn support_VK_KHR_maintenance3(&self) -> ::std::os::raw::c_int {
        ncnn_GpuInfo_support_VK_KHR_maintenance3(self)
    }
    #[inline]
    pub unsafe fn support_VK_KHR_multiview(&self) -> ::std::os::raw::c_int {
        ncnn_GpuInfo_support_VK_KHR_multiview(self)
    }
    #[inline]
    pub unsafe fn support_VK_KHR_portability_subset(&self) -> ::std::os::raw::c_int {
        ncnn_GpuInfo_support_VK_KHR_portability_subset(self)
    }
    #[inline]
    pub unsafe fn support_VK_KHR_push_descriptor(&self) -> ::std::os::raw::c_int {
        ncnn_GpuInfo_support_VK_KHR_push_descriptor(self)
    }
    #[inline]
    pub unsafe fn support_VK_KHR_sampler_ycbcr_conversion(&self) -> ::std::os::raw::c_int {
        ncnn_GpuInfo_support_VK_KHR_sampler_ycbcr_conversion(self)
    }
    #[inline]
    pub unsafe fn support_VK_KHR_shader_float16_int8(&self) -> ::std::os::raw::c_int {
        ncnn_GpuInfo_support_VK_KHR_shader_float16_int8(self)
    }
    #[inline]
    pub unsafe fn support_VK_KHR_shader_float_controls(&self) -> ::std::os::raw::c_int {
        ncnn_GpuInfo_support_VK_KHR_shader_float_controls(self)
    }
    #[inline]
    pub unsafe fn support_VK_KHR_storage_buffer_storage_class(&self) -> ::std::os::raw::c_int {
        ncnn_GpuInfo_support_VK_KHR_storage_buffer_storage_class(self)
    }
    #[inline]
    pub unsafe fn support_VK_KHR_swapchain(&self) -> ::std::os::raw::c_int {
        ncnn_GpuInfo_support_VK_KHR_swapchain(self)
    }
    #[inline]
    pub unsafe fn support_VK_EXT_buffer_device_address(&self) -> ::std::os::raw::c_int {
        ncnn_GpuInfo_support_VK_EXT_buffer_device_address(self)
    }
    #[inline]
    pub unsafe fn support_VK_EXT_descriptor_indexing(&self) -> ::std::os::raw::c_int {
        ncnn_GpuInfo_support_VK_EXT_descriptor_indexing(self)
    }
    #[inline]
    pub unsafe fn support_VK_EXT_memory_budget(&self) -> ::std::os::raw::c_int {
        ncnn_GpuInfo_support_VK_EXT_memory_budget(self)
    }
    #[inline]
    pub unsafe fn support_VK_EXT_memory_priority(&self) -> ::std::os::raw::c_int {
        ncnn_GpuInfo_support_VK_EXT_memory_priority(self)
    }
    #[inline]
    pub unsafe fn support_VK_EXT_queue_family_foreign(&self) -> ::std::os::raw::c_int {
        ncnn_GpuInfo_support_VK_EXT_queue_family_foreign(self)
    }
    #[inline]
    pub unsafe fn support_VK_AMD_device_coherent_memory(&self) -> ::std::os::raw::c_int {
        ncnn_GpuInfo_support_VK_AMD_device_coherent_memory(self)
    }
    #[inline]
    pub unsafe fn support_VK_NV_cooperative_matrix(&self) -> ::std::os::raw::c_int {
        ncnn_GpuInfo_support_VK_NV_cooperative_matrix(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ncnn_GpuInfo_GpuInfo(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn7GpuInfoD1Ev"]
    pub fn ncnn_GpuInfo_GpuInfo_destructor(this: *mut ncnn_GpuInfo);
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn12get_gpu_infoEi"]
    pub fn ncnn_get_gpu_info(device_index: ::std::os::raw::c_int) -> *const ncnn_GpuInfo;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ncnn_VkCompute {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ncnn_VulkanDevicePrivate {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug)]
pub struct ncnn_VulkanDevice {
    pub info: *const ncnn_GpuInfo,
    pub vkBindBufferMemory2KHR: PFN_vkBindBufferMemory2KHR,
    pub vkBindImageMemory2KHR: PFN_vkBindImageMemory2KHR,
    pub vkGetBufferDeviceAddressKHR: PFN_vkGetBufferDeviceAddressKHR,
    pub vkGetBufferOpaqueCaptureAddressKHR: PFN_vkGetBufferOpaqueCaptureAddressKHR,
    pub vkGetDeviceMemoryOpaqueCaptureAddressKHR: PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR,
    pub vkCreateDescriptorUpdateTemplateKHR: PFN_vkCreateDescriptorUpdateTemplateKHR,
    pub vkDestroyDescriptorUpdateTemplateKHR: PFN_vkDestroyDescriptorUpdateTemplateKHR,
    pub vkUpdateDescriptorSetWithTemplateKHR: PFN_vkUpdateDescriptorSetWithTemplateKHR,
    pub vkGetImageMemoryRequirements2KHR: PFN_vkGetImageMemoryRequirements2KHR,
    pub vkGetBufferMemoryRequirements2KHR: PFN_vkGetBufferMemoryRequirements2KHR,
    pub vkTrimCommandPoolKHR: PFN_vkTrimCommandPoolKHR,
    pub vkGetDescriptorSetLayoutSupportKHR: PFN_vkGetDescriptorSetLayoutSupportKHR,
    pub vkCmdPushDescriptorSetWithTemplateKHR: PFN_vkCmdPushDescriptorSetWithTemplateKHR,
    pub vkCmdPushDescriptorSetKHR: PFN_vkCmdPushDescriptorSetKHR,
    pub vkCreateSamplerYcbcrConversionKHR: PFN_vkCreateSamplerYcbcrConversionKHR,
    pub vkDestroySamplerYcbcrConversionKHR: PFN_vkDestroySamplerYcbcrConversionKHR,
    pub vkCreateSwapchainKHR: PFN_vkCreateSwapchainKHR,
    pub vkDestroySwapchainKHR: PFN_vkDestroySwapchainKHR,
    pub vkGetSwapchainImagesKHR: PFN_vkGetSwapchainImagesKHR,
    pub vkAcquireNextImageKHR: PFN_vkAcquireNextImageKHR,
    pub vkQueuePresentKHR: PFN_vkQueuePresentKHR,
    pub vkGetBufferDeviceAddressEXT: PFN_vkGetBufferDeviceAddressEXT,
    pub d: *mut ncnn_VulkanDevicePrivate,
}
#[test]
fn bindgen_test_layout_ncnn_VulkanDevice() {
    const UNINIT: ::std::mem::MaybeUninit<ncnn_VulkanDevice> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ncnn_VulkanDevice>(),
        192usize,
        concat!("Size of: ", stringify!(ncnn_VulkanDevice))
    );
    assert_eq!(
        ::std::mem::align_of::<ncnn_VulkanDevice>(),
        8usize,
        concat!("Alignment of ", stringify!(ncnn_VulkanDevice))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VulkanDevice),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vkBindBufferMemory2KHR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VulkanDevice),
            "::",
            stringify!(vkBindBufferMemory2KHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vkBindImageMemory2KHR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VulkanDevice),
            "::",
            stringify!(vkBindImageMemory2KHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vkGetBufferDeviceAddressKHR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VulkanDevice),
            "::",
            stringify!(vkGetBufferDeviceAddressKHR)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).vkGetBufferOpaqueCaptureAddressKHR) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VulkanDevice),
            "::",
            stringify!(vkGetBufferOpaqueCaptureAddressKHR)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).vkGetDeviceMemoryOpaqueCaptureAddressKHR) as usize
                - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VulkanDevice),
            "::",
            stringify!(vkGetDeviceMemoryOpaqueCaptureAddressKHR)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).vkCreateDescriptorUpdateTemplateKHR) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VulkanDevice),
            "::",
            stringify!(vkCreateDescriptorUpdateTemplateKHR)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).vkDestroyDescriptorUpdateTemplateKHR) as usize
                - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VulkanDevice),
            "::",
            stringify!(vkDestroyDescriptorUpdateTemplateKHR)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).vkUpdateDescriptorSetWithTemplateKHR) as usize
                - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VulkanDevice),
            "::",
            stringify!(vkUpdateDescriptorSetWithTemplateKHR)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).vkGetImageMemoryRequirements2KHR) as usize - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VulkanDevice),
            "::",
            stringify!(vkGetImageMemoryRequirements2KHR)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).vkGetBufferMemoryRequirements2KHR) as usize - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VulkanDevice),
            "::",
            stringify!(vkGetBufferMemoryRequirements2KHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vkTrimCommandPoolKHR) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VulkanDevice),
            "::",
            stringify!(vkTrimCommandPoolKHR)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).vkGetDescriptorSetLayoutSupportKHR) as usize - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VulkanDevice),
            "::",
            stringify!(vkGetDescriptorSetLayoutSupportKHR)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).vkCmdPushDescriptorSetWithTemplateKHR) as usize
                - ptr as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VulkanDevice),
            "::",
            stringify!(vkCmdPushDescriptorSetWithTemplateKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vkCmdPushDescriptorSetKHR) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VulkanDevice),
            "::",
            stringify!(vkCmdPushDescriptorSetKHR)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).vkCreateSamplerYcbcrConversionKHR) as usize - ptr as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VulkanDevice),
            "::",
            stringify!(vkCreateSamplerYcbcrConversionKHR)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).vkDestroySamplerYcbcrConversionKHR) as usize - ptr as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VulkanDevice),
            "::",
            stringify!(vkDestroySamplerYcbcrConversionKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vkCreateSwapchainKHR) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VulkanDevice),
            "::",
            stringify!(vkCreateSwapchainKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vkDestroySwapchainKHR) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VulkanDevice),
            "::",
            stringify!(vkDestroySwapchainKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vkGetSwapchainImagesKHR) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VulkanDevice),
            "::",
            stringify!(vkGetSwapchainImagesKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vkAcquireNextImageKHR) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VulkanDevice),
            "::",
            stringify!(vkAcquireNextImageKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vkQueuePresentKHR) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VulkanDevice),
            "::",
            stringify!(vkQueuePresentKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vkGetBufferDeviceAddressEXT) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VulkanDevice),
            "::",
            stringify!(vkGetBufferDeviceAddressEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_VulkanDevice),
            "::",
            stringify!(d)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn12VulkanDevice8vkdeviceEv"]
    pub fn ncnn_VulkanDevice_vkdevice(this: *const ncnn_VulkanDevice) -> VkDevice;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn12VulkanDevice8is_validEv"]
    pub fn ncnn_VulkanDevice_is_valid(this: *const ncnn_VulkanDevice) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn12VulkanDevice21compile_shader_moduleEPKjy"]
    pub fn ncnn_VulkanDevice_compile_shader_module(
        this: *const ncnn_VulkanDevice,
        spv_data: *const u32,
        spv_data_size: usize,
    ) -> VkShaderModule;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn12VulkanDevice21compile_shader_moduleEPKjyjjj"]
    pub fn ncnn_VulkanDevice_compile_shader_module1(
        this: *const ncnn_VulkanDevice,
        spv_data: *const u32,
        spv_data_size: usize,
        local_size_x: u32,
        local_size_y: u32,
        local_size_z: u32,
    ) -> VkShaderModule;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn12VulkanDevice27create_descriptorset_layoutEiPKiPP23VkDescriptorSetLayout_T"]
    pub fn ncnn_VulkanDevice_create_descriptorset_layout(
        this: *const ncnn_VulkanDevice,
        binding_count: ::std::os::raw::c_int,
        binding_types: *const ::std::os::raw::c_int,
        descriptorset_layout: *mut VkDescriptorSetLayout,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn12VulkanDevice22create_pipeline_layoutEiP23VkDescriptorSetLayout_TPP18VkPipelineLayout_T"]
    pub fn ncnn_VulkanDevice_create_pipeline_layout(
        this: *const ncnn_VulkanDevice,
        push_constant_count: ::std::os::raw::c_int,
        descriptorset_layout: VkDescriptorSetLayout,
        pipeline_layout: *mut VkPipelineLayout,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn12VulkanDevice15create_pipelineEP16VkShaderModule_TP18VkPipelineLayout_TRKSt6vectorINS_22vk_specialization_typeESaIS6_EEPP12VkPipeline_T"]
    pub fn ncnn_VulkanDevice_create_pipeline(
        this: *const ncnn_VulkanDevice,
        shader_module: VkShaderModule,
        pipeline_layout: VkPipelineLayout,
        specializations: *const std_vector,
        pipeline: *mut VkPipeline,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn12VulkanDevice33create_descriptor_update_templateEiPKiP23VkDescriptorSetLayout_TP18VkPipelineLayout_TPP28VkDescriptorUpdateTemplate_T"]
    pub fn ncnn_VulkanDevice_create_descriptor_update_template(
        this: *const ncnn_VulkanDevice,
        binding_count: ::std::os::raw::c_int,
        binding_types: *const ::std::os::raw::c_int,
        descriptorset_layout: VkDescriptorSetLayout,
        pipeline_layout: VkPipelineLayout,
        descriptor_update_template: *mut VkDescriptorUpdateTemplateKHR,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn12VulkanDevice17find_memory_indexEjjjj"]
    pub fn ncnn_VulkanDevice_find_memory_index(
        this: *const ncnn_VulkanDevice,
        memory_type_bits: u32,
        required: VkFlags,
        preferred: VkFlags,
        preferred_not: VkFlags,
    ) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn12VulkanDevice11is_mappableEj"]
    pub fn ncnn_VulkanDevice_is_mappable(
        this: *const ncnn_VulkanDevice,
        memory_type_index: u32,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn12VulkanDevice11is_coherentEj"]
    pub fn ncnn_VulkanDevice_is_coherent(
        this: *const ncnn_VulkanDevice,
        memory_type_index: u32,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn12VulkanDevice13acquire_queueEj"]
    pub fn ncnn_VulkanDevice_acquire_queue(
        this: *const ncnn_VulkanDevice,
        queue_family_index: u32,
    ) -> VkQueue;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn12VulkanDevice13reclaim_queueEjP9VkQueue_T"]
    pub fn ncnn_VulkanDevice_reclaim_queue(
        this: *const ncnn_VulkanDevice,
        queue_family_index: u32,
        queue: VkQueue,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn12VulkanDevice22acquire_blob_allocatorEv"]
    pub fn ncnn_VulkanDevice_acquire_blob_allocator(
        this: *const ncnn_VulkanDevice,
    ) -> *mut ncnn_VkAllocator;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn12VulkanDevice22reclaim_blob_allocatorEPNS_11VkAllocatorE"]
    pub fn ncnn_VulkanDevice_reclaim_blob_allocator(
        this: *const ncnn_VulkanDevice,
        allocator: *mut ncnn_VkAllocator,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn12VulkanDevice25acquire_staging_allocatorEv"]
    pub fn ncnn_VulkanDevice_acquire_staging_allocator(
        this: *const ncnn_VulkanDevice,
    ) -> *mut ncnn_VkAllocator;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn12VulkanDevice25reclaim_staging_allocatorEPNS_11VkAllocatorE"]
    pub fn ncnn_VulkanDevice_reclaim_staging_allocator(
        this: *const ncnn_VulkanDevice,
        allocator: *mut ncnn_VkAllocator,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn12VulkanDevice28immutable_texelfetch_samplerEv"]
    pub fn ncnn_VulkanDevice_immutable_texelfetch_sampler(
        this: *const ncnn_VulkanDevice,
    ) -> *const VkSampler;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn12VulkanDevice16get_dummy_bufferEv"]
    pub fn ncnn_VulkanDevice_get_dummy_buffer(this: *const ncnn_VulkanDevice) -> ncnn_VkMat;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn12VulkanDevice15get_dummy_imageEv"]
    pub fn ncnn_VulkanDevice_get_dummy_image(this: *const ncnn_VulkanDevice) -> ncnn_VkImageMat;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn12VulkanDevice24get_dummy_image_readonlyEv"]
    pub fn ncnn_VulkanDevice_get_dummy_image_readonly(
        this: *const ncnn_VulkanDevice,
    ) -> ncnn_VkImageMat;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn12VulkanDevice18get_pipeline_cacheEv"]
    pub fn ncnn_VulkanDevice_get_pipeline_cache(
        this: *const ncnn_VulkanDevice,
    ) -> *const ncnn_PipelineCache;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn12VulkanDevice27shape_support_image_storageERKNS_3MatE"]
    pub fn ncnn_VulkanDevice_shape_support_image_storage(
        this: *const ncnn_VulkanDevice,
        shape: *const ncnn_Mat,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn12VulkanDevice15get_heap_budgetEv"]
    pub fn ncnn_VulkanDevice_get_heap_budget(this: *const ncnn_VulkanDevice) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn12VulkanDevice15convert_packingERKNS_5VkMatERS1_iRNS_9VkComputeERKNS_6OptionE"]
    pub fn ncnn_VulkanDevice_convert_packing(
        this: *const ncnn_VulkanDevice,
        src: *const ncnn_VkMat,
        dst: *mut ncnn_VkMat,
        dst_elempack: ::std::os::raw::c_int,
        cmd: *mut ncnn_VkCompute,
        opt: *const ncnn_Option,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn12VulkanDevice15convert_packingERKNS_10VkImageMatERS1_iRNS_9VkComputeERKNS_6OptionE"]
    pub fn ncnn_VulkanDevice_convert_packing1(
        this: *const ncnn_VulkanDevice,
        src: *const ncnn_VkImageMat,
        dst: *mut ncnn_VkImageMat,
        dst_elempack: ::std::os::raw::c_int,
        cmd: *mut ncnn_VkCompute,
        opt: *const ncnn_Option,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn12VulkanDevice15convert_packingERKNS_5VkMatERNS_10VkImageMatEiRNS_9VkComputeERKNS_6OptionE"]
    pub fn ncnn_VulkanDevice_convert_packing2(
        this: *const ncnn_VulkanDevice,
        src: *const ncnn_VkMat,
        dst: *mut ncnn_VkImageMat,
        dst_elempack: ::std::os::raw::c_int,
        cmd: *mut ncnn_VkCompute,
        opt: *const ncnn_Option,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK4ncnn12VulkanDevice15convert_packingERKNS_10VkImageMatERNS_5VkMatEiRNS_9VkComputeERKNS_6OptionE"]
    pub fn ncnn_VulkanDevice_convert_packing3(
        this: *const ncnn_VulkanDevice,
        src: *const ncnn_VkImageMat,
        dst: *mut ncnn_VkMat,
        dst_elempack: ::std::os::raw::c_int,
        cmd: *mut ncnn_VkCompute,
        opt: *const ncnn_Option,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn12VulkanDevice21init_device_extensionEv"]
    pub fn ncnn_VulkanDevice_init_device_extension(
        this: *mut ncnn_VulkanDevice,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn12VulkanDeviceC1Ei"]
    pub fn ncnn_VulkanDevice_VulkanDevice(
        this: *mut ncnn_VulkanDevice,
        device_index: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn12VulkanDeviceD1Ev"]
    pub fn ncnn_VulkanDevice_VulkanDevice_destructor(this: *mut ncnn_VulkanDevice);
}
impl ncnn_VulkanDevice {
    #[inline]
    pub unsafe fn vkdevice(&self) -> VkDevice {
        ncnn_VulkanDevice_vkdevice(self)
    }
    #[inline]
    pub unsafe fn is_valid(&self) -> bool {
        ncnn_VulkanDevice_is_valid(self)
    }
    #[inline]
    pub unsafe fn compile_shader_module(
        &self,
        spv_data: *const u32,
        spv_data_size: usize,
    ) -> VkShaderModule {
        ncnn_VulkanDevice_compile_shader_module(self, spv_data, spv_data_size)
    }
    #[inline]
    pub unsafe fn compile_shader_module1(
        &self,
        spv_data: *const u32,
        spv_data_size: usize,
        local_size_x: u32,
        local_size_y: u32,
        local_size_z: u32,
    ) -> VkShaderModule {
        ncnn_VulkanDevice_compile_shader_module1(
            self,
            spv_data,
            spv_data_size,
            local_size_x,
            local_size_y,
            local_size_z,
        )
    }
    #[inline]
    pub unsafe fn create_descriptorset_layout(
        &self,
        binding_count: ::std::os::raw::c_int,
        binding_types: *const ::std::os::raw::c_int,
        descriptorset_layout: *mut VkDescriptorSetLayout,
    ) -> ::std::os::raw::c_int {
        ncnn_VulkanDevice_create_descriptorset_layout(
            self,
            binding_count,
            binding_types,
            descriptorset_layout,
        )
    }
    #[inline]
    pub unsafe fn create_pipeline_layout(
        &self,
        push_constant_count: ::std::os::raw::c_int,
        descriptorset_layout: VkDescriptorSetLayout,
        pipeline_layout: *mut VkPipelineLayout,
    ) -> ::std::os::raw::c_int {
        ncnn_VulkanDevice_create_pipeline_layout(
            self,
            push_constant_count,
            descriptorset_layout,
            pipeline_layout,
        )
    }
    #[inline]
    pub unsafe fn create_pipeline(
        &self,
        shader_module: VkShaderModule,
        pipeline_layout: VkPipelineLayout,
        specializations: *const std_vector,
        pipeline: *mut VkPipeline,
    ) -> ::std::os::raw::c_int {
        ncnn_VulkanDevice_create_pipeline(
            self,
            shader_module,
            pipeline_layout,
            specializations,
            pipeline,
        )
    }
    #[inline]
    pub unsafe fn create_descriptor_update_template(
        &self,
        binding_count: ::std::os::raw::c_int,
        binding_types: *const ::std::os::raw::c_int,
        descriptorset_layout: VkDescriptorSetLayout,
        pipeline_layout: VkPipelineLayout,
        descriptor_update_template: *mut VkDescriptorUpdateTemplateKHR,
    ) -> ::std::os::raw::c_int {
        ncnn_VulkanDevice_create_descriptor_update_template(
            self,
            binding_count,
            binding_types,
            descriptorset_layout,
            pipeline_layout,
            descriptor_update_template,
        )
    }
    #[inline]
    pub unsafe fn find_memory_index(
        &self,
        memory_type_bits: u32,
        required: VkFlags,
        preferred: VkFlags,
        preferred_not: VkFlags,
    ) -> u32 {
        ncnn_VulkanDevice_find_memory_index(
            self,
            memory_type_bits,
            required,
            preferred,
            preferred_not,
        )
    }
    #[inline]
    pub unsafe fn is_mappable(&self, memory_type_index: u32) -> bool {
        ncnn_VulkanDevice_is_mappable(self, memory_type_index)
    }
    #[inline]
    pub unsafe fn is_coherent(&self, memory_type_index: u32) -> bool {
        ncnn_VulkanDevice_is_coherent(self, memory_type_index)
    }
    #[inline]
    pub unsafe fn acquire_queue(&self, queue_family_index: u32) -> VkQueue {
        ncnn_VulkanDevice_acquire_queue(self, queue_family_index)
    }
    #[inline]
    pub unsafe fn reclaim_queue(&self, queue_family_index: u32, queue: VkQueue) {
        ncnn_VulkanDevice_reclaim_queue(self, queue_family_index, queue)
    }
    #[inline]
    pub unsafe fn acquire_blob_allocator(&self) -> *mut ncnn_VkAllocator {
        ncnn_VulkanDevice_acquire_blob_allocator(self)
    }
    #[inline]
    pub unsafe fn reclaim_blob_allocator(&self, allocator: *mut ncnn_VkAllocator) {
        ncnn_VulkanDevice_reclaim_blob_allocator(self, allocator)
    }
    #[inline]
    pub unsafe fn acquire_staging_allocator(&self) -> *mut ncnn_VkAllocator {
        ncnn_VulkanDevice_acquire_staging_allocator(self)
    }
    #[inline]
    pub unsafe fn reclaim_staging_allocator(&self, allocator: *mut ncnn_VkAllocator) {
        ncnn_VulkanDevice_reclaim_staging_allocator(self, allocator)
    }
    #[inline]
    pub unsafe fn immutable_texelfetch_sampler(&self) -> *const VkSampler {
        ncnn_VulkanDevice_immutable_texelfetch_sampler(self)
    }
    #[inline]
    pub unsafe fn get_dummy_buffer(&self) -> ncnn_VkMat {
        ncnn_VulkanDevice_get_dummy_buffer(self)
    }
    #[inline]
    pub unsafe fn get_dummy_image(&self) -> ncnn_VkImageMat {
        ncnn_VulkanDevice_get_dummy_image(self)
    }
    #[inline]
    pub unsafe fn get_dummy_image_readonly(&self) -> ncnn_VkImageMat {
        ncnn_VulkanDevice_get_dummy_image_readonly(self)
    }
    #[inline]
    pub unsafe fn get_pipeline_cache(&self) -> *const ncnn_PipelineCache {
        ncnn_VulkanDevice_get_pipeline_cache(self)
    }
    #[inline]
    pub unsafe fn shape_support_image_storage(&self, shape: *const ncnn_Mat) -> bool {
        ncnn_VulkanDevice_shape_support_image_storage(self, shape)
    }
    #[inline]
    pub unsafe fn get_heap_budget(&self) -> u32 {
        ncnn_VulkanDevice_get_heap_budget(self)
    }
    #[inline]
    pub unsafe fn convert_packing(
        &self,
        src: *const ncnn_VkMat,
        dst: *mut ncnn_VkMat,
        dst_elempack: ::std::os::raw::c_int,
        cmd: *mut ncnn_VkCompute,
        opt: *const ncnn_Option,
    ) {
        ncnn_VulkanDevice_convert_packing(self, src, dst, dst_elempack, cmd, opt)
    }
    #[inline]
    pub unsafe fn convert_packing1(
        &self,
        src: *const ncnn_VkImageMat,
        dst: *mut ncnn_VkImageMat,
        dst_elempack: ::std::os::raw::c_int,
        cmd: *mut ncnn_VkCompute,
        opt: *const ncnn_Option,
    ) {
        ncnn_VulkanDevice_convert_packing1(self, src, dst, dst_elempack, cmd, opt)
    }
    #[inline]
    pub unsafe fn convert_packing2(
        &self,
        src: *const ncnn_VkMat,
        dst: *mut ncnn_VkImageMat,
        dst_elempack: ::std::os::raw::c_int,
        cmd: *mut ncnn_VkCompute,
        opt: *const ncnn_Option,
    ) {
        ncnn_VulkanDevice_convert_packing2(self, src, dst, dst_elempack, cmd, opt)
    }
    #[inline]
    pub unsafe fn convert_packing3(
        &self,
        src: *const ncnn_VkImageMat,
        dst: *mut ncnn_VkMat,
        dst_elempack: ::std::os::raw::c_int,
        cmd: *mut ncnn_VkCompute,
        opt: *const ncnn_Option,
    ) {
        ncnn_VulkanDevice_convert_packing3(self, src, dst, dst_elempack, cmd, opt)
    }
    #[inline]
    pub unsafe fn init_device_extension(&mut self) -> ::std::os::raw::c_int {
        ncnn_VulkanDevice_init_device_extension(self)
    }
    #[inline]
    pub unsafe fn new(device_index: ::std::os::raw::c_int) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ncnn_VulkanDevice_VulkanDevice(__bindgen_tmp.as_mut_ptr(), device_index);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        ncnn_VulkanDevice_VulkanDevice_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn14get_gpu_deviceEi"]
    pub fn ncnn_get_gpu_device(device_index: ::std::os::raw::c_int) -> *mut ncnn_VulkanDevice;
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn20compile_spirv_moduleEPKcRKNS_6OptionERSt6vectorIjSaIjEE"]
    pub fn ncnn_compile_spirv_module(
        comp_string: *const ::std::os::raw::c_char,
        opt: *const ncnn_Option,
        spirv: *mut std_vector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn20compile_spirv_moduleEPKciRKNS_6OptionERSt6vectorIjSaIjEE"]
    pub fn ncnn_compile_spirv_module1(
        comp_data: *const ::std::os::raw::c_char,
        comp_data_size: ::std::os::raw::c_int,
        opt: *const ncnn_Option,
        spirv: *mut std_vector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn20compile_spirv_moduleEiRKNS_6OptionERSt6vectorIjSaIjEE"]
    pub fn ncnn_compile_spirv_module2(
        shader_type_index: ::std::os::raw::c_int,
        opt: *const ncnn_Option,
        spirv: *mut std_vector,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ncnn_ShaderInfo {
    pub specialization_count: ::std::os::raw::c_int,
    pub binding_count: ::std::os::raw::c_int,
    pub push_constant_count: ::std::os::raw::c_int,
    pub binding_types: [::std::os::raw::c_int; 16usize],
    pub reserved_0: ::std::os::raw::c_int,
    pub reserved_1: ::std::os::raw::c_int,
    pub reserved_2: ::std::os::raw::c_int,
    pub reserved_3: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ncnn_ShaderInfo() {
    const UNINIT: ::std::mem::MaybeUninit<ncnn_ShaderInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ncnn_ShaderInfo>(),
        92usize,
        concat!("Size of: ", stringify!(ncnn_ShaderInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ncnn_ShaderInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(ncnn_ShaderInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).specialization_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_ShaderInfo),
            "::",
            stringify!(specialization_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).binding_count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_ShaderInfo),
            "::",
            stringify!(binding_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).push_constant_count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_ShaderInfo),
            "::",
            stringify!(push_constant_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).binding_types) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_ShaderInfo),
            "::",
            stringify!(binding_types)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved_0) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_ShaderInfo),
            "::",
            stringify!(reserved_0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved_1) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_ShaderInfo),
            "::",
            stringify!(reserved_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved_2) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_ShaderInfo),
            "::",
            stringify!(reserved_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved_3) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ncnn_ShaderInfo),
            "::",
            stringify!(reserved_3)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4ncnn19resolve_shader_infoEPKjyRNS_10ShaderInfoE"]
    pub fn ncnn_resolve_shader_info(
        spv_data: *const u32,
        spv_data_size: usize,
        shader_info: *mut ncnn_ShaderInfo,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _iobuf {
    pub _ptr: *mut ::std::os::raw::c_char,
    pub _cnt: ::std::os::raw::c_int,
    pub _base: *mut ::std::os::raw::c_char,
    pub _flag: ::std::os::raw::c_int,
    pub _file: ::std::os::raw::c_int,
    pub _charbuf: ::std::os::raw::c_int,
    pub _bufsiz: ::std::os::raw::c_int,
    pub _tmpfname: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__iobuf() {
    const UNINIT: ::std::mem::MaybeUninit<_iobuf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_iobuf>(),
        48usize,
        concat!("Size of: ", stringify!(_iobuf))
    );
    assert_eq!(
        ::std::mem::align_of::<_iobuf>(),
        8usize,
        concat!("Alignment of ", stringify!(_iobuf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_iobuf),
            "::",
            stringify!(_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._cnt) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_iobuf),
            "::",
            stringify!(_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._base) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_iobuf),
            "::",
            stringify!(_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flag) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_iobuf),
            "::",
            stringify!(_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._file) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_iobuf),
            "::",
            stringify!(_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._charbuf) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_iobuf),
            "::",
            stringify!(_charbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._bufsiz) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_iobuf),
            "::",
            stringify!(_bufsiz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._tmpfname) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_iobuf),
            "::",
            stringify!(_tmpfname)
        )
    );
}
pub type FILE = _iobuf;
pub type VkBool32 = u32;
pub type VkDeviceSize = u64;
pub type VkFlags = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCommandBuffer_T {
    _unused: [u8; 0],
}
pub type VkCommandBuffer = *mut VkCommandBuffer_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDevice_T {
    _unused: [u8; 0],
}
pub type VkDevice = *mut VkDevice_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkInstance_T {
    _unused: [u8; 0],
}
pub type VkInstance = *mut VkInstance_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDevice_T {
    _unused: [u8; 0],
}
pub type VkPhysicalDevice = *mut VkPhysicalDevice_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkQueue_T {
    _unused: [u8; 0],
}
pub type VkQueue = *mut VkQueue_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBuffer_T {
    _unused: [u8; 0],
}
pub type VkBuffer = *mut VkBuffer_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBufferView_T {
    _unused: [u8; 0],
}
pub type VkBufferView = *mut VkBufferView_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCommandPool_T {
    _unused: [u8; 0],
}
pub type VkCommandPool = *mut VkCommandPool_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDescriptorSet_T {
    _unused: [u8; 0],
}
pub type VkDescriptorSet = *mut VkDescriptorSet_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDescriptorSetLayout_T {
    _unused: [u8; 0],
}
pub type VkDescriptorSetLayout = *mut VkDescriptorSetLayout_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDeviceMemory_T {
    _unused: [u8; 0],
}
pub type VkDeviceMemory = *mut VkDeviceMemory_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkFence_T {
    _unused: [u8; 0],
}
pub type VkFence = *mut VkFence_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImage_T {
    _unused: [u8; 0],
}
pub type VkImage = *mut VkImage_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImageView_T {
    _unused: [u8; 0],
}
pub type VkImageView = *mut VkImageView_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipeline_T {
    _unused: [u8; 0],
}
pub type VkPipeline = *mut VkPipeline_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineLayout_T {
    _unused: [u8; 0],
}
pub type VkPipelineLayout = *mut VkPipelineLayout_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSampler_T {
    _unused: [u8; 0],
}
pub type VkSampler = *mut VkSampler_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSemaphore_T {
    _unused: [u8; 0],
}
pub type VkSemaphore = *mut VkSemaphore_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkShaderModule_T {
    _unused: [u8; 0],
}
pub type VkShaderModule = *mut VkShaderModule_T;
pub const VkResult_VK_SUCCESS: VkResult = 0;
pub const VkResult_VK_NOT_READY: VkResult = 1;
pub const VkResult_VK_TIMEOUT: VkResult = 2;
pub const VkResult_VK_EVENT_SET: VkResult = 3;
pub const VkResult_VK_EVENT_RESET: VkResult = 4;
pub const VkResult_VK_INCOMPLETE: VkResult = 5;
pub const VkResult_VK_ERROR_OUT_OF_HOST_MEMORY: VkResult = -1;
pub const VkResult_VK_ERROR_OUT_OF_DEVICE_MEMORY: VkResult = -2;
pub const VkResult_VK_ERROR_INITIALIZATION_FAILED: VkResult = -3;
pub const VkResult_VK_ERROR_DEVICE_LOST: VkResult = -4;
pub const VkResult_VK_ERROR_MEMORY_MAP_FAILED: VkResult = -5;
pub const VkResult_VK_ERROR_LAYER_NOT_PRESENT: VkResult = -6;
pub const VkResult_VK_ERROR_EXTENSION_NOT_PRESENT: VkResult = -7;
pub const VkResult_VK_ERROR_FEATURE_NOT_PRESENT: VkResult = -8;
pub const VkResult_VK_ERROR_INCOMPATIBLE_DRIVER: VkResult = -9;
pub const VkResult_VK_ERROR_TOO_MANY_OBJECTS: VkResult = -10;
pub const VkResult_VK_ERROR_FORMAT_NOT_SUPPORTED: VkResult = -11;
pub const VkResult_VK_ERROR_FRAGMENTED_POOL: VkResult = -12;
pub const VkResult_VK_ERROR_SURFACE_LOST_KHR: VkResult = -1000000000;
pub const VkResult_VK_ERROR_NATIVE_WINDOW_IN_USE_KHR: VkResult = -1000000001;
pub const VkResult_VK_SUBOPTIMAL_KHR: VkResult = 1000001003;
pub const VkResult_VK_ERROR_OUT_OF_DATE_KHR: VkResult = -1000001004;
pub const VkResult_VK_ERROR_INCOMPATIBLE_DISPLAY_KHR: VkResult = -1000003001;
pub const VkResult_VK_ERROR_VALIDATION_FAILED_EXT: VkResult = -1000011001;
pub const VkResult_VK_ERROR_INVALID_SHADER_NV: VkResult = -1000012000;
pub const VkResult_VK_ERROR_OUT_OF_POOL_MEMORY_KHR: VkResult = -1000069000;
pub const VkResult_VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR: VkResult = -1000072003;
pub const VkResult_VK_RESULT_MAX_ENUM: VkResult = 2147483647;
pub type VkResult = ::std::os::raw::c_int;
pub const VkStructureType_VK_STRUCTURE_TYPE_APPLICATION_INFO: VkStructureType = 0;
pub const VkStructureType_VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO: VkStructureType = 1;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO: VkStructureType = 2;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO: VkStructureType = 3;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBMIT_INFO: VkStructureType = 4;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO: VkStructureType = 5;
pub const VkStructureType_VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE: VkStructureType = 6;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_SPARSE_INFO: VkStructureType = 7;
pub const VkStructureType_VK_STRUCTURE_TYPE_FENCE_CREATE_INFO: VkStructureType = 8;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO: VkStructureType = 9;
pub const VkStructureType_VK_STRUCTURE_TYPE_EVENT_CREATE_INFO: VkStructureType = 10;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO: VkStructureType = 11;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO: VkStructureType = 12;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO: VkStructureType = 13;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO: VkStructureType = 14;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO: VkStructureType = 15;
pub const VkStructureType_VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO: VkStructureType = 16;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO: VkStructureType = 17;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO: VkStructureType = 18;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO:
    VkStructureType = 19;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO:
    VkStructureType = 20;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO:
    VkStructureType = 21;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO: VkStructureType =
    22;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO:
    VkStructureType = 23;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO:
    VkStructureType = 24;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO:
    VkStructureType = 25;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO:
    VkStructureType = 26;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO: VkStructureType =
    27;
pub const VkStructureType_VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO: VkStructureType = 28;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO: VkStructureType = 29;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO: VkStructureType = 30;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO: VkStructureType = 31;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO: VkStructureType = 32;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO: VkStructureType = 33;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO: VkStructureType = 34;
pub const VkStructureType_VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET: VkStructureType = 35;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET: VkStructureType = 36;
pub const VkStructureType_VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO: VkStructureType = 37;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO: VkStructureType = 38;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO: VkStructureType = 39;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO: VkStructureType = 40;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO: VkStructureType = 41;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO: VkStructureType = 42;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO: VkStructureType = 43;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER: VkStructureType = 44;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER: VkStructureType = 45;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_BARRIER: VkStructureType = 46;
pub const VkStructureType_VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO: VkStructureType = 47;
pub const VkStructureType_VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO: VkStructureType = 48;
pub const VkStructureType_VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR: VkStructureType = 1000001000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PRESENT_INFO_KHR: VkStructureType = 1000001001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR: VkStructureType =
    1000002000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR: VkStructureType =
    1000002001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR: VkStructureType = 1000003000;
pub const VkStructureType_VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR: VkStructureType =
    1000004000;
pub const VkStructureType_VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR: VkStructureType =
    1000005000;
pub const VkStructureType_VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR: VkStructureType =
    1000006000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MIR_SURFACE_CREATE_INFO_KHR: VkStructureType =
    1000007000;
pub const VkStructureType_VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR: VkStructureType =
    1000008000;
pub const VkStructureType_VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR: VkStructureType =
    1000009000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT: VkStructureType =
    1000011000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD:
    VkStructureType = 1000018000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT: VkStructureType =
    1000022000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT: VkStructureType =
    1000022001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT: VkStructureType =
    1000022002;
pub const VkStructureType_VK_STRUCTURE_TYPE_MAX_ENUM: VkStructureType = 2147483647;
pub type VkStructureType = ::std::os::raw::c_uint;
pub const VkSystemAllocationScope_VK_SYSTEM_ALLOCATION_SCOPE_COMMAND: VkSystemAllocationScope = 0;
pub const VkSystemAllocationScope_VK_SYSTEM_ALLOCATION_SCOPE_OBJECT: VkSystemAllocationScope = 1;
pub const VkSystemAllocationScope_VK_SYSTEM_ALLOCATION_SCOPE_CACHE: VkSystemAllocationScope = 2;
pub const VkSystemAllocationScope_VK_SYSTEM_ALLOCATION_SCOPE_DEVICE: VkSystemAllocationScope = 3;
pub const VkSystemAllocationScope_VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE: VkSystemAllocationScope = 4;
pub const VkSystemAllocationScope_VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM: VkSystemAllocationScope =
    2147483647;
pub type VkSystemAllocationScope = ::std::os::raw::c_uint;
pub const VkInternalAllocationType_VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE:
    VkInternalAllocationType = 0;
pub const VkInternalAllocationType_VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM: VkInternalAllocationType =
    2147483647;
pub type VkInternalAllocationType = ::std::os::raw::c_uint;
pub const VkFormat_VK_FORMAT_UNDEFINED: VkFormat = 0;
pub const VkFormat_VK_FORMAT_R4G4_UNORM_PACK8: VkFormat = 1;
pub const VkFormat_VK_FORMAT_R4G4B4A4_UNORM_PACK16: VkFormat = 2;
pub const VkFormat_VK_FORMAT_B4G4R4A4_UNORM_PACK16: VkFormat = 3;
pub const VkFormat_VK_FORMAT_R5G6B5_UNORM_PACK16: VkFormat = 4;
pub const VkFormat_VK_FORMAT_B5G6R5_UNORM_PACK16: VkFormat = 5;
pub const VkFormat_VK_FORMAT_R5G5B5A1_UNORM_PACK16: VkFormat = 6;
pub const VkFormat_VK_FORMAT_B5G5R5A1_UNORM_PACK16: VkFormat = 7;
pub const VkFormat_VK_FORMAT_A1R5G5B5_UNORM_PACK16: VkFormat = 8;
pub const VkFormat_VK_FORMAT_R8_UNORM: VkFormat = 9;
pub const VkFormat_VK_FORMAT_R8_SNORM: VkFormat = 10;
pub const VkFormat_VK_FORMAT_R8_USCALED: VkFormat = 11;
pub const VkFormat_VK_FORMAT_R8_SSCALED: VkFormat = 12;
pub const VkFormat_VK_FORMAT_R8_UINT: VkFormat = 13;
pub const VkFormat_VK_FORMAT_R8_SINT: VkFormat = 14;
pub const VkFormat_VK_FORMAT_R8_SRGB: VkFormat = 15;
pub const VkFormat_VK_FORMAT_R8G8_UNORM: VkFormat = 16;
pub const VkFormat_VK_FORMAT_R8G8_SNORM: VkFormat = 17;
pub const VkFormat_VK_FORMAT_R8G8_USCALED: VkFormat = 18;
pub const VkFormat_VK_FORMAT_R8G8_SSCALED: VkFormat = 19;
pub const VkFormat_VK_FORMAT_R8G8_UINT: VkFormat = 20;
pub const VkFormat_VK_FORMAT_R8G8_SINT: VkFormat = 21;
pub const VkFormat_VK_FORMAT_R8G8_SRGB: VkFormat = 22;
pub const VkFormat_VK_FORMAT_R8G8B8_UNORM: VkFormat = 23;
pub const VkFormat_VK_FORMAT_R8G8B8_SNORM: VkFormat = 24;
pub const VkFormat_VK_FORMAT_R8G8B8_USCALED: VkFormat = 25;
pub const VkFormat_VK_FORMAT_R8G8B8_SSCALED: VkFormat = 26;
pub const VkFormat_VK_FORMAT_R8G8B8_UINT: VkFormat = 27;
pub const VkFormat_VK_FORMAT_R8G8B8_SINT: VkFormat = 28;
pub const VkFormat_VK_FORMAT_R8G8B8_SRGB: VkFormat = 29;
pub const VkFormat_VK_FORMAT_B8G8R8_UNORM: VkFormat = 30;
pub const VkFormat_VK_FORMAT_B8G8R8_SNORM: VkFormat = 31;
pub const VkFormat_VK_FORMAT_B8G8R8_USCALED: VkFormat = 32;
pub const VkFormat_VK_FORMAT_B8G8R8_SSCALED: VkFormat = 33;
pub const VkFormat_VK_FORMAT_B8G8R8_UINT: VkFormat = 34;
pub const VkFormat_VK_FORMAT_B8G8R8_SINT: VkFormat = 35;
pub const VkFormat_VK_FORMAT_B8G8R8_SRGB: VkFormat = 36;
pub const VkFormat_VK_FORMAT_R8G8B8A8_UNORM: VkFormat = 37;
pub const VkFormat_VK_FORMAT_R8G8B8A8_SNORM: VkFormat = 38;
pub const VkFormat_VK_FORMAT_R8G8B8A8_USCALED: VkFormat = 39;
pub const VkFormat_VK_FORMAT_R8G8B8A8_SSCALED: VkFormat = 40;
pub const VkFormat_VK_FORMAT_R8G8B8A8_UINT: VkFormat = 41;
pub const VkFormat_VK_FORMAT_R8G8B8A8_SINT: VkFormat = 42;
pub const VkFormat_VK_FORMAT_R8G8B8A8_SRGB: VkFormat = 43;
pub const VkFormat_VK_FORMAT_B8G8R8A8_UNORM: VkFormat = 44;
pub const VkFormat_VK_FORMAT_B8G8R8A8_SNORM: VkFormat = 45;
pub const VkFormat_VK_FORMAT_B8G8R8A8_USCALED: VkFormat = 46;
pub const VkFormat_VK_FORMAT_B8G8R8A8_SSCALED: VkFormat = 47;
pub const VkFormat_VK_FORMAT_B8G8R8A8_UINT: VkFormat = 48;
pub const VkFormat_VK_FORMAT_B8G8R8A8_SINT: VkFormat = 49;
pub const VkFormat_VK_FORMAT_B8G8R8A8_SRGB: VkFormat = 50;
pub const VkFormat_VK_FORMAT_A8B8G8R8_UNORM_PACK32: VkFormat = 51;
pub const VkFormat_VK_FORMAT_A8B8G8R8_SNORM_PACK32: VkFormat = 52;
pub const VkFormat_VK_FORMAT_A8B8G8R8_USCALED_PACK32: VkFormat = 53;
pub const VkFormat_VK_FORMAT_A8B8G8R8_SSCALED_PACK32: VkFormat = 54;
pub const VkFormat_VK_FORMAT_A8B8G8R8_UINT_PACK32: VkFormat = 55;
pub const VkFormat_VK_FORMAT_A8B8G8R8_SINT_PACK32: VkFormat = 56;
pub const VkFormat_VK_FORMAT_A8B8G8R8_SRGB_PACK32: VkFormat = 57;
pub const VkFormat_VK_FORMAT_A2R10G10B10_UNORM_PACK32: VkFormat = 58;
pub const VkFormat_VK_FORMAT_A2R10G10B10_SNORM_PACK32: VkFormat = 59;
pub const VkFormat_VK_FORMAT_A2R10G10B10_USCALED_PACK32: VkFormat = 60;
pub const VkFormat_VK_FORMAT_A2R10G10B10_SSCALED_PACK32: VkFormat = 61;
pub const VkFormat_VK_FORMAT_A2R10G10B10_UINT_PACK32: VkFormat = 62;
pub const VkFormat_VK_FORMAT_A2R10G10B10_SINT_PACK32: VkFormat = 63;
pub const VkFormat_VK_FORMAT_A2B10G10R10_UNORM_PACK32: VkFormat = 64;
pub const VkFormat_VK_FORMAT_A2B10G10R10_SNORM_PACK32: VkFormat = 65;
pub const VkFormat_VK_FORMAT_A2B10G10R10_USCALED_PACK32: VkFormat = 66;
pub const VkFormat_VK_FORMAT_A2B10G10R10_SSCALED_PACK32: VkFormat = 67;
pub const VkFormat_VK_FORMAT_A2B10G10R10_UINT_PACK32: VkFormat = 68;
pub const VkFormat_VK_FORMAT_A2B10G10R10_SINT_PACK32: VkFormat = 69;
pub const VkFormat_VK_FORMAT_R16_UNORM: VkFormat = 70;
pub const VkFormat_VK_FORMAT_R16_SNORM: VkFormat = 71;
pub const VkFormat_VK_FORMAT_R16_USCALED: VkFormat = 72;
pub const VkFormat_VK_FORMAT_R16_SSCALED: VkFormat = 73;
pub const VkFormat_VK_FORMAT_R16_UINT: VkFormat = 74;
pub const VkFormat_VK_FORMAT_R16_SINT: VkFormat = 75;
pub const VkFormat_VK_FORMAT_R16_SFLOAT: VkFormat = 76;
pub const VkFormat_VK_FORMAT_R16G16_UNORM: VkFormat = 77;
pub const VkFormat_VK_FORMAT_R16G16_SNORM: VkFormat = 78;
pub const VkFormat_VK_FORMAT_R16G16_USCALED: VkFormat = 79;
pub const VkFormat_VK_FORMAT_R16G16_SSCALED: VkFormat = 80;
pub const VkFormat_VK_FORMAT_R16G16_UINT: VkFormat = 81;
pub const VkFormat_VK_FORMAT_R16G16_SINT: VkFormat = 82;
pub const VkFormat_VK_FORMAT_R16G16_SFLOAT: VkFormat = 83;
pub const VkFormat_VK_FORMAT_R16G16B16_UNORM: VkFormat = 84;
pub const VkFormat_VK_FORMAT_R16G16B16_SNORM: VkFormat = 85;
pub const VkFormat_VK_FORMAT_R16G16B16_USCALED: VkFormat = 86;
pub const VkFormat_VK_FORMAT_R16G16B16_SSCALED: VkFormat = 87;
pub const VkFormat_VK_FORMAT_R16G16B16_UINT: VkFormat = 88;
pub const VkFormat_VK_FORMAT_R16G16B16_SINT: VkFormat = 89;
pub const VkFormat_VK_FORMAT_R16G16B16_SFLOAT: VkFormat = 90;
pub const VkFormat_VK_FORMAT_R16G16B16A16_UNORM: VkFormat = 91;
pub const VkFormat_VK_FORMAT_R16G16B16A16_SNORM: VkFormat = 92;
pub const VkFormat_VK_FORMAT_R16G16B16A16_USCALED: VkFormat = 93;
pub const VkFormat_VK_FORMAT_R16G16B16A16_SSCALED: VkFormat = 94;
pub const VkFormat_VK_FORMAT_R16G16B16A16_UINT: VkFormat = 95;
pub const VkFormat_VK_FORMAT_R16G16B16A16_SINT: VkFormat = 96;
pub const VkFormat_VK_FORMAT_R16G16B16A16_SFLOAT: VkFormat = 97;
pub const VkFormat_VK_FORMAT_R32_UINT: VkFormat = 98;
pub const VkFormat_VK_FORMAT_R32_SINT: VkFormat = 99;
pub const VkFormat_VK_FORMAT_R32_SFLOAT: VkFormat = 100;
pub const VkFormat_VK_FORMAT_R32G32_UINT: VkFormat = 101;
pub const VkFormat_VK_FORMAT_R32G32_SINT: VkFormat = 102;
pub const VkFormat_VK_FORMAT_R32G32_SFLOAT: VkFormat = 103;
pub const VkFormat_VK_FORMAT_R32G32B32_UINT: VkFormat = 104;
pub const VkFormat_VK_FORMAT_R32G32B32_SINT: VkFormat = 105;
pub const VkFormat_VK_FORMAT_R32G32B32_SFLOAT: VkFormat = 106;
pub const VkFormat_VK_FORMAT_R32G32B32A32_UINT: VkFormat = 107;
pub const VkFormat_VK_FORMAT_R32G32B32A32_SINT: VkFormat = 108;
pub const VkFormat_VK_FORMAT_R32G32B32A32_SFLOAT: VkFormat = 109;
pub const VkFormat_VK_FORMAT_R64_UINT: VkFormat = 110;
pub const VkFormat_VK_FORMAT_R64_SINT: VkFormat = 111;
pub const VkFormat_VK_FORMAT_R64_SFLOAT: VkFormat = 112;
pub const VkFormat_VK_FORMAT_R64G64_UINT: VkFormat = 113;
pub const VkFormat_VK_FORMAT_R64G64_SINT: VkFormat = 114;
pub const VkFormat_VK_FORMAT_R64G64_SFLOAT: VkFormat = 115;
pub const VkFormat_VK_FORMAT_R64G64B64_UINT: VkFormat = 116;
pub const VkFormat_VK_FORMAT_R64G64B64_SINT: VkFormat = 117;
pub const VkFormat_VK_FORMAT_R64G64B64_SFLOAT: VkFormat = 118;
pub const VkFormat_VK_FORMAT_R64G64B64A64_UINT: VkFormat = 119;
pub const VkFormat_VK_FORMAT_R64G64B64A64_SINT: VkFormat = 120;
pub const VkFormat_VK_FORMAT_R64G64B64A64_SFLOAT: VkFormat = 121;
pub const VkFormat_VK_FORMAT_B10G11R11_UFLOAT_PACK32: VkFormat = 122;
pub const VkFormat_VK_FORMAT_E5B9G9R9_UFLOAT_PACK32: VkFormat = 123;
pub const VkFormat_VK_FORMAT_D16_UNORM: VkFormat = 124;
pub const VkFormat_VK_FORMAT_X8_D24_UNORM_PACK32: VkFormat = 125;
pub const VkFormat_VK_FORMAT_D32_SFLOAT: VkFormat = 126;
pub const VkFormat_VK_FORMAT_S8_UINT: VkFormat = 127;
pub const VkFormat_VK_FORMAT_D16_UNORM_S8_UINT: VkFormat = 128;
pub const VkFormat_VK_FORMAT_D24_UNORM_S8_UINT: VkFormat = 129;
pub const VkFormat_VK_FORMAT_D32_SFLOAT_S8_UINT: VkFormat = 130;
pub const VkFormat_VK_FORMAT_BC1_RGB_UNORM_BLOCK: VkFormat = 131;
pub const VkFormat_VK_FORMAT_BC1_RGB_SRGB_BLOCK: VkFormat = 132;
pub const VkFormat_VK_FORMAT_BC1_RGBA_UNORM_BLOCK: VkFormat = 133;
pub const VkFormat_VK_FORMAT_BC1_RGBA_SRGB_BLOCK: VkFormat = 134;
pub const VkFormat_VK_FORMAT_BC2_UNORM_BLOCK: VkFormat = 135;
pub const VkFormat_VK_FORMAT_BC2_SRGB_BLOCK: VkFormat = 136;
pub const VkFormat_VK_FORMAT_BC3_UNORM_BLOCK: VkFormat = 137;
pub const VkFormat_VK_FORMAT_BC3_SRGB_BLOCK: VkFormat = 138;
pub const VkFormat_VK_FORMAT_BC4_UNORM_BLOCK: VkFormat = 139;
pub const VkFormat_VK_FORMAT_BC4_SNORM_BLOCK: VkFormat = 140;
pub const VkFormat_VK_FORMAT_BC5_UNORM_BLOCK: VkFormat = 141;
pub const VkFormat_VK_FORMAT_BC5_SNORM_BLOCK: VkFormat = 142;
pub const VkFormat_VK_FORMAT_BC6H_UFLOAT_BLOCK: VkFormat = 143;
pub const VkFormat_VK_FORMAT_BC6H_SFLOAT_BLOCK: VkFormat = 144;
pub const VkFormat_VK_FORMAT_BC7_UNORM_BLOCK: VkFormat = 145;
pub const VkFormat_VK_FORMAT_BC7_SRGB_BLOCK: VkFormat = 146;
pub const VkFormat_VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK: VkFormat = 147;
pub const VkFormat_VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK: VkFormat = 148;
pub const VkFormat_VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK: VkFormat = 149;
pub const VkFormat_VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK: VkFormat = 150;
pub const VkFormat_VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK: VkFormat = 151;
pub const VkFormat_VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK: VkFormat = 152;
pub const VkFormat_VK_FORMAT_EAC_R11_UNORM_BLOCK: VkFormat = 153;
pub const VkFormat_VK_FORMAT_EAC_R11_SNORM_BLOCK: VkFormat = 154;
pub const VkFormat_VK_FORMAT_EAC_R11G11_UNORM_BLOCK: VkFormat = 155;
pub const VkFormat_VK_FORMAT_EAC_R11G11_SNORM_BLOCK: VkFormat = 156;
pub const VkFormat_VK_FORMAT_ASTC_4x4_UNORM_BLOCK: VkFormat = 157;
pub const VkFormat_VK_FORMAT_ASTC_4x4_SRGB_BLOCK: VkFormat = 158;
pub const VkFormat_VK_FORMAT_ASTC_5x4_UNORM_BLOCK: VkFormat = 159;
pub const VkFormat_VK_FORMAT_ASTC_5x4_SRGB_BLOCK: VkFormat = 160;
pub const VkFormat_VK_FORMAT_ASTC_5x5_UNORM_BLOCK: VkFormat = 161;
pub const VkFormat_VK_FORMAT_ASTC_5x5_SRGB_BLOCK: VkFormat = 162;
pub const VkFormat_VK_FORMAT_ASTC_6x5_UNORM_BLOCK: VkFormat = 163;
pub const VkFormat_VK_FORMAT_ASTC_6x5_SRGB_BLOCK: VkFormat = 164;
pub const VkFormat_VK_FORMAT_ASTC_6x6_UNORM_BLOCK: VkFormat = 165;
pub const VkFormat_VK_FORMAT_ASTC_6x6_SRGB_BLOCK: VkFormat = 166;
pub const VkFormat_VK_FORMAT_ASTC_8x5_UNORM_BLOCK: VkFormat = 167;
pub const VkFormat_VK_FORMAT_ASTC_8x5_SRGB_BLOCK: VkFormat = 168;
pub const VkFormat_VK_FORMAT_ASTC_8x6_UNORM_BLOCK: VkFormat = 169;
pub const VkFormat_VK_FORMAT_ASTC_8x6_SRGB_BLOCK: VkFormat = 170;
pub const VkFormat_VK_FORMAT_ASTC_8x8_UNORM_BLOCK: VkFormat = 171;
pub const VkFormat_VK_FORMAT_ASTC_8x8_SRGB_BLOCK: VkFormat = 172;
pub const VkFormat_VK_FORMAT_ASTC_10x5_UNORM_BLOCK: VkFormat = 173;
pub const VkFormat_VK_FORMAT_ASTC_10x5_SRGB_BLOCK: VkFormat = 174;
pub const VkFormat_VK_FORMAT_ASTC_10x6_UNORM_BLOCK: VkFormat = 175;
pub const VkFormat_VK_FORMAT_ASTC_10x6_SRGB_BLOCK: VkFormat = 176;
pub const VkFormat_VK_FORMAT_ASTC_10x8_UNORM_BLOCK: VkFormat = 177;
pub const VkFormat_VK_FORMAT_ASTC_10x8_SRGB_BLOCK: VkFormat = 178;
pub const VkFormat_VK_FORMAT_ASTC_10x10_UNORM_BLOCK: VkFormat = 179;
pub const VkFormat_VK_FORMAT_ASTC_10x10_SRGB_BLOCK: VkFormat = 180;
pub const VkFormat_VK_FORMAT_ASTC_12x10_UNORM_BLOCK: VkFormat = 181;
pub const VkFormat_VK_FORMAT_ASTC_12x10_SRGB_BLOCK: VkFormat = 182;
pub const VkFormat_VK_FORMAT_ASTC_12x12_UNORM_BLOCK: VkFormat = 183;
pub const VkFormat_VK_FORMAT_ASTC_12x12_SRGB_BLOCK: VkFormat = 184;
pub const VkFormat_VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG: VkFormat = 1000054000;
pub const VkFormat_VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG: VkFormat = 1000054001;
pub const VkFormat_VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG: VkFormat = 1000054002;
pub const VkFormat_VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG: VkFormat = 1000054003;
pub const VkFormat_VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG: VkFormat = 1000054004;
pub const VkFormat_VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG: VkFormat = 1000054005;
pub const VkFormat_VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG: VkFormat = 1000054006;
pub const VkFormat_VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG: VkFormat = 1000054007;
pub const VkFormat_VK_FORMAT_G8B8G8R8_422_UNORM_KHR: VkFormat = 1000156000;
pub const VkFormat_VK_FORMAT_B8G8R8G8_422_UNORM_KHR: VkFormat = 1000156001;
pub const VkFormat_VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR: VkFormat = 1000156002;
pub const VkFormat_VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR: VkFormat = 1000156003;
pub const VkFormat_VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR: VkFormat = 1000156004;
pub const VkFormat_VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR: VkFormat = 1000156005;
pub const VkFormat_VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR: VkFormat = 1000156006;
pub const VkFormat_VK_FORMAT_R10X6_UNORM_PACK16_KHR: VkFormat = 1000156007;
pub const VkFormat_VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR: VkFormat = 1000156008;
pub const VkFormat_VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR: VkFormat = 1000156009;
pub const VkFormat_VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR: VkFormat = 1000156010;
pub const VkFormat_VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR: VkFormat = 1000156011;
pub const VkFormat_VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR: VkFormat = 1000156012;
pub const VkFormat_VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR: VkFormat = 1000156013;
pub const VkFormat_VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR: VkFormat = 1000156014;
pub const VkFormat_VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR: VkFormat = 1000156015;
pub const VkFormat_VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR: VkFormat = 1000156016;
pub const VkFormat_VK_FORMAT_R12X4_UNORM_PACK16_KHR: VkFormat = 1000156017;
pub const VkFormat_VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR: VkFormat = 1000156018;
pub const VkFormat_VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR: VkFormat = 1000156019;
pub const VkFormat_VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR: VkFormat = 1000156020;
pub const VkFormat_VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR: VkFormat = 1000156021;
pub const VkFormat_VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR: VkFormat = 1000156022;
pub const VkFormat_VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR: VkFormat = 1000156023;
pub const VkFormat_VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR: VkFormat = 1000156024;
pub const VkFormat_VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR: VkFormat = 1000156025;
pub const VkFormat_VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR: VkFormat = 1000156026;
pub const VkFormat_VK_FORMAT_G16B16G16R16_422_UNORM_KHR: VkFormat = 1000156027;
pub const VkFormat_VK_FORMAT_B16G16R16G16_422_UNORM_KHR: VkFormat = 1000156028;
pub const VkFormat_VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR: VkFormat = 1000156029;
pub const VkFormat_VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR: VkFormat = 1000156030;
pub const VkFormat_VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR: VkFormat = 1000156031;
pub const VkFormat_VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR: VkFormat = 1000156032;
pub const VkFormat_VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR: VkFormat = 1000156033;
pub const VkFormat_VK_FORMAT_MAX_ENUM: VkFormat = 2147483647;
pub type VkFormat = ::std::os::raw::c_uint;
pub const VkImageTiling_VK_IMAGE_TILING_OPTIMAL: VkImageTiling = 0;
pub const VkImageTiling_VK_IMAGE_TILING_LINEAR: VkImageTiling = 1;
pub const VkImageTiling_VK_IMAGE_TILING_MAX_ENUM: VkImageTiling = 2147483647;
pub type VkImageTiling = ::std::os::raw::c_uint;
pub const VkSharingMode_VK_SHARING_MODE_EXCLUSIVE: VkSharingMode = 0;
pub const VkSharingMode_VK_SHARING_MODE_CONCURRENT: VkSharingMode = 1;
pub const VkSharingMode_VK_SHARING_MODE_MAX_ENUM: VkSharingMode = 2147483647;
pub type VkSharingMode = ::std::os::raw::c_uint;
pub const VkImageLayout_VK_IMAGE_LAYOUT_UNDEFINED: VkImageLayout = 0;
pub const VkImageLayout_VK_IMAGE_LAYOUT_GENERAL: VkImageLayout = 1;
pub const VkImageLayout_VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL: VkImageLayout = 2;
pub const VkImageLayout_VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL: VkImageLayout = 3;
pub const VkImageLayout_VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL: VkImageLayout = 4;
pub const VkImageLayout_VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL: VkImageLayout = 5;
pub const VkImageLayout_VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL: VkImageLayout = 6;
pub const VkImageLayout_VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL: VkImageLayout = 7;
pub const VkImageLayout_VK_IMAGE_LAYOUT_PREINITIALIZED: VkImageLayout = 8;
pub const VkImageLayout_VK_IMAGE_LAYOUT_PRESENT_SRC_KHR: VkImageLayout = 1000001002;
pub const VkImageLayout_VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR: VkImageLayout = 1000111000;
pub const VkImageLayout_VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR:
    VkImageLayout = 1000117000;
pub const VkImageLayout_VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR:
    VkImageLayout = 1000117001;
pub const VkImageLayout_VK_IMAGE_LAYOUT_MAX_ENUM: VkImageLayout = 2147483647;
pub type VkImageLayout = ::std::os::raw::c_uint;
pub const VkComponentSwizzle_VK_COMPONENT_SWIZZLE_IDENTITY: VkComponentSwizzle = 0;
pub const VkComponentSwizzle_VK_COMPONENT_SWIZZLE_ZERO: VkComponentSwizzle = 1;
pub const VkComponentSwizzle_VK_COMPONENT_SWIZZLE_ONE: VkComponentSwizzle = 2;
pub const VkComponentSwizzle_VK_COMPONENT_SWIZZLE_R: VkComponentSwizzle = 3;
pub const VkComponentSwizzle_VK_COMPONENT_SWIZZLE_G: VkComponentSwizzle = 4;
pub const VkComponentSwizzle_VK_COMPONENT_SWIZZLE_B: VkComponentSwizzle = 5;
pub const VkComponentSwizzle_VK_COMPONENT_SWIZZLE_A: VkComponentSwizzle = 6;
pub const VkComponentSwizzle_VK_COMPONENT_SWIZZLE_MAX_ENUM: VkComponentSwizzle = 2147483647;
pub type VkComponentSwizzle = ::std::os::raw::c_uint;
pub const VkFilter_VK_FILTER_NEAREST: VkFilter = 0;
pub const VkFilter_VK_FILTER_LINEAR: VkFilter = 1;
pub const VkFilter_VK_FILTER_CUBIC_IMG: VkFilter = 1000015000;
pub const VkFilter_VK_FILTER_MAX_ENUM: VkFilter = 2147483647;
pub type VkFilter = ::std::os::raw::c_uint;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_SAMPLER: VkDescriptorType = 0;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER: VkDescriptorType = 1;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE: VkDescriptorType = 2;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_STORAGE_IMAGE: VkDescriptorType = 3;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER: VkDescriptorType = 4;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER: VkDescriptorType = 5;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER: VkDescriptorType = 6;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_STORAGE_BUFFER: VkDescriptorType = 7;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC: VkDescriptorType = 8;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC: VkDescriptorType = 9;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT: VkDescriptorType = 10;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_MAX_ENUM: VkDescriptorType = 2147483647;
pub type VkDescriptorType = ::std::os::raw::c_uint;
pub const VkPipelineBindPoint_VK_PIPELINE_BIND_POINT_GRAPHICS: VkPipelineBindPoint = 0;
pub const VkPipelineBindPoint_VK_PIPELINE_BIND_POINT_COMPUTE: VkPipelineBindPoint = 1;
pub const VkPipelineBindPoint_VK_PIPELINE_BIND_POINT_MAX_ENUM: VkPipelineBindPoint = 2147483647;
pub type VkPipelineBindPoint = ::std::os::raw::c_uint;
pub type VkImageUsageFlags = VkFlags;
pub type VkMemoryPropertyFlags = VkFlags;
pub type VkMemoryHeapFlags = VkFlags;
pub type VkPipelineStageFlags = VkFlags;
pub type VkBufferUsageFlags = VkFlags;
pub type VkShaderStageFlags = VkFlags;
pub type VkDescriptorSetLayoutCreateFlags = VkFlags;
pub type VkAccessFlags = VkFlags;
pub type PFN_vkAllocationFunction = ::std::option::Option<
    unsafe extern "C" fn(
        pUserData: *mut ::std::os::raw::c_void,
        size: usize,
        alignment: usize,
        allocationScope: VkSystemAllocationScope,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type PFN_vkReallocationFunction = ::std::option::Option<
    unsafe extern "C" fn(
        pUserData: *mut ::std::os::raw::c_void,
        pOriginal: *mut ::std::os::raw::c_void,
        size: usize,
        alignment: usize,
        allocationScope: VkSystemAllocationScope,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type PFN_vkFreeFunction = ::std::option::Option<
    unsafe extern "C" fn(
        pUserData: *mut ::std::os::raw::c_void,
        pMemory: *mut ::std::os::raw::c_void,
    ),
>;
pub type PFN_vkInternalAllocationNotification = ::std::option::Option<
    unsafe extern "C" fn(
        pUserData: *mut ::std::os::raw::c_void,
        size: usize,
        allocationType: VkInternalAllocationType,
        allocationScope: VkSystemAllocationScope,
    ),
>;
pub type PFN_vkInternalFreeNotification = ::std::option::Option<
    unsafe extern "C" fn(
        pUserData: *mut ::std::os::raw::c_void,
        size: usize,
        allocationType: VkInternalAllocationType,
        allocationScope: VkSystemAllocationScope,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkAllocationCallbacks {
    pub pUserData: *mut ::std::os::raw::c_void,
    pub pfnAllocation: PFN_vkAllocationFunction,
    pub pfnReallocation: PFN_vkReallocationFunction,
    pub pfnFree: PFN_vkFreeFunction,
    pub pfnInternalAllocation: PFN_vkInternalAllocationNotification,
    pub pfnInternalFree: PFN_vkInternalFreeNotification,
}
#[test]
fn bindgen_test_layout_VkAllocationCallbacks() {
    const UNINIT: ::std::mem::MaybeUninit<VkAllocationCallbacks> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkAllocationCallbacks>(),
        48usize,
        concat!("Size of: ", stringify!(VkAllocationCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<VkAllocationCallbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(VkAllocationCallbacks))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pUserData) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAllocationCallbacks),
            "::",
            stringify!(pUserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnAllocation) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAllocationCallbacks),
            "::",
            stringify!(pfnAllocation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnReallocation) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAllocationCallbacks),
            "::",
            stringify!(pfnReallocation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnFree) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAllocationCallbacks),
            "::",
            stringify!(pfnFree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnInternalAllocation) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAllocationCallbacks),
            "::",
            stringify!(pfnInternalAllocation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnInternalFree) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAllocationCallbacks),
            "::",
            stringify!(pfnInternalFree)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkMemoryType {
    pub propertyFlags: VkMemoryPropertyFlags,
    pub heapIndex: u32,
}
#[test]
fn bindgen_test_layout_VkMemoryType() {
    const UNINIT: ::std::mem::MaybeUninit<VkMemoryType> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkMemoryType>(),
        8usize,
        concat!("Size of: ", stringify!(VkMemoryType))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMemoryType>(),
        4usize,
        concat!("Alignment of ", stringify!(VkMemoryType))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).propertyFlags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryType),
            "::",
            stringify!(propertyFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).heapIndex) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryType),
            "::",
            stringify!(heapIndex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkMemoryHeap {
    pub size: VkDeviceSize,
    pub flags: VkMemoryHeapFlags,
}
#[test]
fn bindgen_test_layout_VkMemoryHeap() {
    const UNINIT: ::std::mem::MaybeUninit<VkMemoryHeap> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkMemoryHeap>(),
        16usize,
        concat!("Size of: ", stringify!(VkMemoryHeap))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMemoryHeap>(),
        8usize,
        concat!("Alignment of ", stringify!(VkMemoryHeap))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryHeap),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryHeap),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceMemoryProperties {
    pub memoryTypeCount: u32,
    pub memoryTypes: [VkMemoryType; 32usize],
    pub memoryHeapCount: u32,
    pub memoryHeaps: [VkMemoryHeap; 16usize],
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceMemoryProperties() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceMemoryProperties> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceMemoryProperties>(),
        520usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceMemoryProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceMemoryProperties>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceMemoryProperties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryTypeCount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMemoryProperties),
            "::",
            stringify!(memoryTypeCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryTypes) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMemoryProperties),
            "::",
            stringify!(memoryTypes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryHeapCount) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMemoryProperties),
            "::",
            stringify!(memoryHeapCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryHeaps) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMemoryProperties),
            "::",
            stringify!(memoryHeaps)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkMemoryRequirements {
    pub size: VkDeviceSize,
    pub alignment: VkDeviceSize,
    pub memoryTypeBits: u32,
}
#[test]
fn bindgen_test_layout_VkMemoryRequirements() {
    const UNINIT: ::std::mem::MaybeUninit<VkMemoryRequirements> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkMemoryRequirements>(),
        24usize,
        concat!("Size of: ", stringify!(VkMemoryRequirements))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMemoryRequirements>(),
        8usize,
        concat!("Alignment of ", stringify!(VkMemoryRequirements))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryRequirements),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alignment) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryRequirements),
            "::",
            stringify!(alignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryTypeBits) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryRequirements),
            "::",
            stringify!(memoryTypeBits)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkComponentMapping {
    pub r: VkComponentSwizzle,
    pub g: VkComponentSwizzle,
    pub b: VkComponentSwizzle,
    pub a: VkComponentSwizzle,
}
#[test]
fn bindgen_test_layout_VkComponentMapping() {
    const UNINIT: ::std::mem::MaybeUninit<VkComponentMapping> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkComponentMapping>(),
        16usize,
        concat!("Size of: ", stringify!(VkComponentMapping))
    );
    assert_eq!(
        ::std::mem::align_of::<VkComponentMapping>(),
        4usize,
        concat!("Alignment of ", stringify!(VkComponentMapping))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkComponentMapping),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkComponentMapping),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkComponentMapping),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkComponentMapping),
            "::",
            stringify!(a)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkExtent2D {
    pub width: u32,
    pub height: u32,
}
#[test]
fn bindgen_test_layout_VkExtent2D() {
    const UNINIT: ::std::mem::MaybeUninit<VkExtent2D> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkExtent2D>(),
        8usize,
        concat!("Size of: ", stringify!(VkExtent2D))
    );
    assert_eq!(
        ::std::mem::align_of::<VkExtent2D>(),
        4usize,
        concat!("Alignment of ", stringify!(VkExtent2D))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExtent2D),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExtent2D),
            "::",
            stringify!(height)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDescriptorSetLayoutBinding {
    pub binding: u32,
    pub descriptorType: VkDescriptorType,
    pub descriptorCount: u32,
    pub stageFlags: VkShaderStageFlags,
    pub pImmutableSamplers: *const VkSampler,
}
#[test]
fn bindgen_test_layout_VkDescriptorSetLayoutBinding() {
    const UNINIT: ::std::mem::MaybeUninit<VkDescriptorSetLayoutBinding> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDescriptorSetLayoutBinding>(),
        24usize,
        concat!("Size of: ", stringify!(VkDescriptorSetLayoutBinding))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDescriptorSetLayoutBinding>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDescriptorSetLayoutBinding))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).binding) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutBinding),
            "::",
            stringify!(binding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descriptorType) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutBinding),
            "::",
            stringify!(descriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descriptorCount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutBinding),
            "::",
            stringify!(descriptorCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stageFlags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutBinding),
            "::",
            stringify!(stageFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pImmutableSamplers) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutBinding),
            "::",
            stringify!(pImmutableSamplers)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDescriptorSetLayoutCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkDescriptorSetLayoutCreateFlags,
    pub bindingCount: u32,
    pub pBindings: *const VkDescriptorSetLayoutBinding,
}
#[test]
fn bindgen_test_layout_VkDescriptorSetLayoutCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkDescriptorSetLayoutCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDescriptorSetLayoutCreateInfo>(),
        32usize,
        concat!("Size of: ", stringify!(VkDescriptorSetLayoutCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDescriptorSetLayoutCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDescriptorSetLayoutCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bindingCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutCreateInfo),
            "::",
            stringify!(bindingCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pBindings) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutCreateInfo),
            "::",
            stringify!(pBindings)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDescriptorImageInfo {
    pub sampler: VkSampler,
    pub imageView: VkImageView,
    pub imageLayout: VkImageLayout,
}
#[test]
fn bindgen_test_layout_VkDescriptorImageInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkDescriptorImageInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDescriptorImageInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkDescriptorImageInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDescriptorImageInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDescriptorImageInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampler) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorImageInfo),
            "::",
            stringify!(sampler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageView) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorImageInfo),
            "::",
            stringify!(imageView)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageLayout) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorImageInfo),
            "::",
            stringify!(imageLayout)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDescriptorBufferInfo {
    pub buffer: VkBuffer,
    pub offset: VkDeviceSize,
    pub range: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkDescriptorBufferInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkDescriptorBufferInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDescriptorBufferInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkDescriptorBufferInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDescriptorBufferInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDescriptorBufferInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorBufferInfo),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorBufferInfo),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).range) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorBufferInfo),
            "::",
            stringify!(range)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkWriteDescriptorSet {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub dstSet: VkDescriptorSet,
    pub dstBinding: u32,
    pub dstArrayElement: u32,
    pub descriptorCount: u32,
    pub descriptorType: VkDescriptorType,
    pub pImageInfo: *const VkDescriptorImageInfo,
    pub pBufferInfo: *const VkDescriptorBufferInfo,
    pub pTexelBufferView: *const VkBufferView,
}
#[test]
fn bindgen_test_layout_VkWriteDescriptorSet() {
    const UNINIT: ::std::mem::MaybeUninit<VkWriteDescriptorSet> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkWriteDescriptorSet>(),
        64usize,
        concat!("Size of: ", stringify!(VkWriteDescriptorSet))
    );
    assert_eq!(
        ::std::mem::align_of::<VkWriteDescriptorSet>(),
        8usize,
        concat!("Alignment of ", stringify!(VkWriteDescriptorSet))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSet),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSet),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstSet) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSet),
            "::",
            stringify!(dstSet)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstBinding) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSet),
            "::",
            stringify!(dstBinding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstArrayElement) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSet),
            "::",
            stringify!(dstArrayElement)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descriptorCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSet),
            "::",
            stringify!(descriptorCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descriptorType) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSet),
            "::",
            stringify!(descriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pImageInfo) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSet),
            "::",
            stringify!(pImageInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pBufferInfo) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSet),
            "::",
            stringify!(pBufferInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pTexelBufferView) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSet),
            "::",
            stringify!(pTexelBufferView)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSurfaceKHR_T {
    _unused: [u8; 0],
}
pub type VkSurfaceKHR = *mut VkSurfaceKHR_T;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_SRGB_NONLINEAR_KHR: VkColorSpaceKHR = 0;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT: VkColorSpaceKHR = 1000104001;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT: VkColorSpaceKHR = 1000104002;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_DCI_P3_LINEAR_EXT: VkColorSpaceKHR = 1000104003;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT: VkColorSpaceKHR = 1000104004;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_BT709_LINEAR_EXT: VkColorSpaceKHR = 1000104005;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_BT709_NONLINEAR_EXT: VkColorSpaceKHR = 1000104006;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_BT2020_LINEAR_EXT: VkColorSpaceKHR = 1000104007;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_HDR10_ST2084_EXT: VkColorSpaceKHR = 1000104008;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_DOLBYVISION_EXT: VkColorSpaceKHR = 1000104009;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_HDR10_HLG_EXT: VkColorSpaceKHR = 1000104010;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT: VkColorSpaceKHR = 1000104011;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT: VkColorSpaceKHR = 1000104012;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_PASS_THROUGH_EXT: VkColorSpaceKHR = 1000104013;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT: VkColorSpaceKHR = 1000104014;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_MAX_ENUM_KHR: VkColorSpaceKHR = 2147483647;
pub type VkColorSpaceKHR = ::std::os::raw::c_uint;
pub const VkPresentModeKHR_VK_PRESENT_MODE_IMMEDIATE_KHR: VkPresentModeKHR = 0;
pub const VkPresentModeKHR_VK_PRESENT_MODE_MAILBOX_KHR: VkPresentModeKHR = 1;
pub const VkPresentModeKHR_VK_PRESENT_MODE_FIFO_KHR: VkPresentModeKHR = 2;
pub const VkPresentModeKHR_VK_PRESENT_MODE_FIFO_RELAXED_KHR: VkPresentModeKHR = 3;
pub const VkPresentModeKHR_VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR: VkPresentModeKHR = 1000111000;
pub const VkPresentModeKHR_VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR: VkPresentModeKHR =
    1000111001;
pub const VkPresentModeKHR_VK_PRESENT_MODE_MAX_ENUM_KHR: VkPresentModeKHR = 2147483647;
pub type VkPresentModeKHR = ::std::os::raw::c_uint;
pub const VkSurfaceTransformFlagBitsKHR_VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR:
    VkSurfaceTransformFlagBitsKHR = 1;
pub const VkSurfaceTransformFlagBitsKHR_VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR:
    VkSurfaceTransformFlagBitsKHR = 2;
pub const VkSurfaceTransformFlagBitsKHR_VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR:
    VkSurfaceTransformFlagBitsKHR = 4;
pub const VkSurfaceTransformFlagBitsKHR_VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR:
    VkSurfaceTransformFlagBitsKHR = 8;
pub const VkSurfaceTransformFlagBitsKHR_VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR:
    VkSurfaceTransformFlagBitsKHR = 16;
pub const VkSurfaceTransformFlagBitsKHR_VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR:
    VkSurfaceTransformFlagBitsKHR = 32;
pub const VkSurfaceTransformFlagBitsKHR_VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR : VkSurfaceTransformFlagBitsKHR = 64 ;
pub const VkSurfaceTransformFlagBitsKHR_VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR : VkSurfaceTransformFlagBitsKHR = 128 ;
pub const VkSurfaceTransformFlagBitsKHR_VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR:
    VkSurfaceTransformFlagBitsKHR = 256;
pub const VkSurfaceTransformFlagBitsKHR_VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR:
    VkSurfaceTransformFlagBitsKHR = 2147483647;
pub type VkSurfaceTransformFlagBitsKHR = ::std::os::raw::c_uint;
pub const VkCompositeAlphaFlagBitsKHR_VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR:
    VkCompositeAlphaFlagBitsKHR = 1;
pub const VkCompositeAlphaFlagBitsKHR_VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR:
    VkCompositeAlphaFlagBitsKHR = 2;
pub const VkCompositeAlphaFlagBitsKHR_VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR:
    VkCompositeAlphaFlagBitsKHR = 4;
pub const VkCompositeAlphaFlagBitsKHR_VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR:
    VkCompositeAlphaFlagBitsKHR = 8;
pub const VkCompositeAlphaFlagBitsKHR_VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR:
    VkCompositeAlphaFlagBitsKHR = 2147483647;
pub type VkCompositeAlphaFlagBitsKHR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSwapchainKHR_T {
    _unused: [u8; 0],
}
pub type VkSwapchainKHR = *mut VkSwapchainKHR_T;
pub type VkSwapchainCreateFlagsKHR = VkFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSwapchainCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkSwapchainCreateFlagsKHR,
    pub surface: VkSurfaceKHR,
    pub minImageCount: u32,
    pub imageFormat: VkFormat,
    pub imageColorSpace: VkColorSpaceKHR,
    pub imageExtent: VkExtent2D,
    pub imageArrayLayers: u32,
    pub imageUsage: VkImageUsageFlags,
    pub imageSharingMode: VkSharingMode,
    pub queueFamilyIndexCount: u32,
    pub pQueueFamilyIndices: *const u32,
    pub preTransform: VkSurfaceTransformFlagBitsKHR,
    pub compositeAlpha: VkCompositeAlphaFlagBitsKHR,
    pub presentMode: VkPresentModeKHR,
    pub clipped: VkBool32,
    pub oldSwapchain: VkSwapchainKHR,
}
#[test]
fn bindgen_test_layout_VkSwapchainCreateInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkSwapchainCreateInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSwapchainCreateInfoKHR>(),
        104usize,
        concat!("Size of: ", stringify!(VkSwapchainCreateInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSwapchainCreateInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSwapchainCreateInfoKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).surface) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(surface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minImageCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(minImageCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageFormat) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(imageFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageColorSpace) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(imageColorSpace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageExtent) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(imageExtent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageArrayLayers) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(imageArrayLayers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageUsage) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(imageUsage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageSharingMode) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(imageSharingMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queueFamilyIndexCount) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(queueFamilyIndexCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pQueueFamilyIndices) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(pQueueFamilyIndices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).preTransform) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(preTransform)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compositeAlpha) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(compositeAlpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).presentMode) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(presentMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clipped) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(clipped)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oldSwapchain) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(oldSwapchain)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPresentInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub waitSemaphoreCount: u32,
    pub pWaitSemaphores: *const VkSemaphore,
    pub swapchainCount: u32,
    pub pSwapchains: *const VkSwapchainKHR,
    pub pImageIndices: *const u32,
    pub pResults: *mut VkResult,
}
#[test]
fn bindgen_test_layout_VkPresentInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkPresentInfoKHR> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPresentInfoKHR>(),
        64usize,
        concat!("Size of: ", stringify!(VkPresentInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPresentInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPresentInfoKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).waitSemaphoreCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentInfoKHR),
            "::",
            stringify!(waitSemaphoreCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pWaitSemaphores) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentInfoKHR),
            "::",
            stringify!(pWaitSemaphores)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).swapchainCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentInfoKHR),
            "::",
            stringify!(swapchainCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSwapchains) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentInfoKHR),
            "::",
            stringify!(pSwapchains)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pImageIndices) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentInfoKHR),
            "::",
            stringify!(pImageIndices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pResults) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentInfoKHR),
            "::",
            stringify!(pResults)
        )
    );
}
pub type PFN_vkCreateSwapchainKHR = ::std::option::Option<
    unsafe extern "C" fn(
        device: VkDevice,
        pCreateInfo: *const VkSwapchainCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pSwapchain: *mut VkSwapchainKHR,
    ) -> VkResult,
>;
pub type PFN_vkDestroySwapchainKHR = ::std::option::Option<
    unsafe extern "C" fn(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetSwapchainImagesKHR = ::std::option::Option<
    unsafe extern "C" fn(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        pSwapchainImageCount: *mut u32,
        pSwapchainImages: *mut VkImage,
    ) -> VkResult,
>;
pub type PFN_vkAcquireNextImageKHR = ::std::option::Option<
    unsafe extern "C" fn(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        timeout: u64,
        semaphore: VkSemaphore,
        fence: VkFence,
        pImageIndex: *mut u32,
    ) -> VkResult,
>;
pub type PFN_vkQueuePresentKHR = ::std::option::Option<
    unsafe extern "C" fn(queue: VkQueue, pPresentInfo: *const VkPresentInfoKHR) -> VkResult,
>;
pub type VkCommandPoolTrimFlags = VkFlags;
pub type PFN_vkTrimCommandPool = ::std::option::Option<
    unsafe extern "C" fn(
        device: VkDevice,
        commandPool: VkCommandPool,
        flags: VkCommandPoolTrimFlags,
    ),
>;
pub type PFN_vkTrimCommandPoolKHR = PFN_vkTrimCommandPool;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDescriptorUpdateTemplate_T {
    _unused: [u8; 0],
}
pub type VkDescriptorUpdateTemplate = *mut VkDescriptorUpdateTemplate_T;
pub type VkDescriptorUpdateTemplateKHR = VkDescriptorUpdateTemplate;
pub const VkDescriptorUpdateTemplateType_VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET:
    VkDescriptorUpdateTemplateType = 0;
pub const VkDescriptorUpdateTemplateType_VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR:
    VkDescriptorUpdateTemplateType = 1;
pub const VkDescriptorUpdateTemplateType_VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR:
    VkDescriptorUpdateTemplateType = 0;
pub const VkDescriptorUpdateTemplateType_VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM:
    VkDescriptorUpdateTemplateType = 2147483647;
pub type VkDescriptorUpdateTemplateType = ::std::os::raw::c_uint;
pub type VkDescriptorUpdateTemplateCreateFlags = VkFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDescriptorUpdateTemplateEntry {
    pub dstBinding: u32,
    pub dstArrayElement: u32,
    pub descriptorCount: u32,
    pub descriptorType: VkDescriptorType,
    pub offset: usize,
    pub stride: usize,
}
#[test]
fn bindgen_test_layout_VkDescriptorUpdateTemplateEntry() {
    const UNINIT: ::std::mem::MaybeUninit<VkDescriptorUpdateTemplateEntry> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDescriptorUpdateTemplateEntry>(),
        32usize,
        concat!("Size of: ", stringify!(VkDescriptorUpdateTemplateEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDescriptorUpdateTemplateEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDescriptorUpdateTemplateEntry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstBinding) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateEntry),
            "::",
            stringify!(dstBinding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstArrayElement) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateEntry),
            "::",
            stringify!(dstArrayElement)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descriptorCount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateEntry),
            "::",
            stringify!(descriptorCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descriptorType) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateEntry),
            "::",
            stringify!(descriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateEntry),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stride) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateEntry),
            "::",
            stringify!(stride)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDescriptorUpdateTemplateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub flags: VkDescriptorUpdateTemplateCreateFlags,
    pub descriptorUpdateEntryCount: u32,
    pub pDescriptorUpdateEntries: *const VkDescriptorUpdateTemplateEntry,
    pub templateType: VkDescriptorUpdateTemplateType,
    pub descriptorSetLayout: VkDescriptorSetLayout,
    pub pipelineBindPoint: VkPipelineBindPoint,
    pub pipelineLayout: VkPipelineLayout,
    pub set: u32,
}
#[test]
fn bindgen_test_layout_VkDescriptorUpdateTemplateCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkDescriptorUpdateTemplateCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDescriptorUpdateTemplateCreateInfo>(),
        72usize,
        concat!(
            "Size of: ",
            stringify!(VkDescriptorUpdateTemplateCreateInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkDescriptorUpdateTemplateCreateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDescriptorUpdateTemplateCreateInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descriptorUpdateEntryCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateCreateInfo),
            "::",
            stringify!(descriptorUpdateEntryCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDescriptorUpdateEntries) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateCreateInfo),
            "::",
            stringify!(pDescriptorUpdateEntries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).templateType) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateCreateInfo),
            "::",
            stringify!(templateType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descriptorSetLayout) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateCreateInfo),
            "::",
            stringify!(descriptorSetLayout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pipelineBindPoint) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateCreateInfo),
            "::",
            stringify!(pipelineBindPoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pipelineLayout) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateCreateInfo),
            "::",
            stringify!(pipelineLayout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateCreateInfo),
            "::",
            stringify!(set)
        )
    );
}
pub type PFN_vkCreateDescriptorUpdateTemplate = ::std::option::Option<
    unsafe extern "C" fn(
        device: VkDevice,
        pCreateInfo: *const VkDescriptorUpdateTemplateCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pDescriptorUpdateTemplate: *mut VkDescriptorUpdateTemplate,
    ) -> VkResult,
>;
pub type PFN_vkDestroyDescriptorUpdateTemplate = ::std::option::Option<
    unsafe extern "C" fn(
        device: VkDevice,
        descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkUpdateDescriptorSetWithTemplate = ::std::option::Option<
    unsafe extern "C" fn(
        device: VkDevice,
        descriptorSet: VkDescriptorSet,
        descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
        pData: *const ::std::os::raw::c_void,
    ),
>;
pub type PFN_vkCreateDescriptorUpdateTemplateKHR = PFN_vkCreateDescriptorUpdateTemplate;
pub type PFN_vkDestroyDescriptorUpdateTemplateKHR = PFN_vkDestroyDescriptorUpdateTemplate;
pub type PFN_vkUpdateDescriptorSetWithTemplateKHR = PFN_vkUpdateDescriptorSetWithTemplate;
pub type PFN_vkCmdPushDescriptorSetKHR = ::std::option::Option<
    unsafe extern "C" fn(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        layout: VkPipelineLayout,
        set: u32,
        descriptorWriteCount: u32,
        pDescriptorWrites: *const VkWriteDescriptorSet,
    ),
>;
pub type PFN_vkCmdPushDescriptorSetWithTemplateKHR = ::std::option::Option<
    unsafe extern "C" fn(
        commandBuffer: VkCommandBuffer,
        descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
        layout: VkPipelineLayout,
        set: u32,
        pData: *const ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBufferMemoryRequirementsInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub buffer: VkBuffer,
}
#[test]
fn bindgen_test_layout_VkBufferMemoryRequirementsInfo2() {
    const UNINIT: ::std::mem::MaybeUninit<VkBufferMemoryRequirementsInfo2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkBufferMemoryRequirementsInfo2>(),
        24usize,
        concat!("Size of: ", stringify!(VkBufferMemoryRequirementsInfo2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBufferMemoryRequirementsInfo2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkBufferMemoryRequirementsInfo2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferMemoryRequirementsInfo2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferMemoryRequirementsInfo2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferMemoryRequirementsInfo2),
            "::",
            stringify!(buffer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImageMemoryRequirementsInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub image: VkImage,
}
#[test]
fn bindgen_test_layout_VkImageMemoryRequirementsInfo2() {
    const UNINIT: ::std::mem::MaybeUninit<VkImageMemoryRequirementsInfo2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkImageMemoryRequirementsInfo2>(),
        24usize,
        concat!("Size of: ", stringify!(VkImageMemoryRequirementsInfo2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageMemoryRequirementsInfo2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkImageMemoryRequirementsInfo2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageMemoryRequirementsInfo2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageMemoryRequirementsInfo2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageMemoryRequirementsInfo2),
            "::",
            stringify!(image)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkMemoryRequirements2 {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub memoryRequirements: VkMemoryRequirements,
}
#[test]
fn bindgen_test_layout_VkMemoryRequirements2() {
    const UNINIT: ::std::mem::MaybeUninit<VkMemoryRequirements2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkMemoryRequirements2>(),
        40usize,
        concat!("Size of: ", stringify!(VkMemoryRequirements2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMemoryRequirements2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkMemoryRequirements2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryRequirements2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryRequirements2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryRequirements) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryRequirements2),
            "::",
            stringify!(memoryRequirements)
        )
    );
}
pub type PFN_vkGetImageMemoryRequirements2 = ::std::option::Option<
    unsafe extern "C" fn(
        device: VkDevice,
        pInfo: *const VkImageMemoryRequirementsInfo2,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    ),
>;
pub type PFN_vkGetBufferMemoryRequirements2 = ::std::option::Option<
    unsafe extern "C" fn(
        device: VkDevice,
        pInfo: *const VkBufferMemoryRequirementsInfo2,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    ),
>;
pub type PFN_vkGetImageMemoryRequirements2KHR = PFN_vkGetImageMemoryRequirements2;
pub type PFN_vkGetBufferMemoryRequirements2KHR = PFN_vkGetBufferMemoryRequirements2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBindBufferMemoryInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub buffer: VkBuffer,
    pub memory: VkDeviceMemory,
    pub memoryOffset: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkBindBufferMemoryInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkBindBufferMemoryInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkBindBufferMemoryInfo>(),
        40usize,
        concat!("Size of: ", stringify!(VkBindBufferMemoryInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBindBufferMemoryInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkBindBufferMemoryInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindBufferMemoryInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindBufferMemoryInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindBufferMemoryInfo),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memory) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindBufferMemoryInfo),
            "::",
            stringify!(memory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryOffset) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindBufferMemoryInfo),
            "::",
            stringify!(memoryOffset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBindImageMemoryInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub image: VkImage,
    pub memory: VkDeviceMemory,
    pub memoryOffset: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkBindImageMemoryInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkBindImageMemoryInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkBindImageMemoryInfo>(),
        40usize,
        concat!("Size of: ", stringify!(VkBindImageMemoryInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBindImageMemoryInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkBindImageMemoryInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindImageMemoryInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindImageMemoryInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindImageMemoryInfo),
            "::",
            stringify!(image)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memory) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindImageMemoryInfo),
            "::",
            stringify!(memory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryOffset) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindImageMemoryInfo),
            "::",
            stringify!(memoryOffset)
        )
    );
}
pub type PFN_vkBindBufferMemory2 = ::std::option::Option<
    unsafe extern "C" fn(
        device: VkDevice,
        bindInfoCount: u32,
        pBindInfos: *const VkBindBufferMemoryInfo,
    ) -> VkResult,
>;
pub type PFN_vkBindImageMemory2 = ::std::option::Option<
    unsafe extern "C" fn(
        device: VkDevice,
        bindInfoCount: u32,
        pBindInfos: *const VkBindImageMemoryInfo,
    ) -> VkResult,
>;
pub type PFN_vkBindBufferMemory2KHR = PFN_vkBindBufferMemory2;
pub type PFN_vkBindImageMemory2KHR = PFN_vkBindImageMemory2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSamplerYcbcrConversion_T {
    _unused: [u8; 0],
}
pub type VkSamplerYcbcrConversion = *mut VkSamplerYcbcrConversion_T;
pub const VkSamplerYcbcrModelConversion_VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY:
    VkSamplerYcbcrModelConversion = 0;
pub const VkSamplerYcbcrModelConversion_VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY:
    VkSamplerYcbcrModelConversion = 1;
pub const VkSamplerYcbcrModelConversion_VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709:
    VkSamplerYcbcrModelConversion = 2;
pub const VkSamplerYcbcrModelConversion_VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601:
    VkSamplerYcbcrModelConversion = 3;
pub const VkSamplerYcbcrModelConversion_VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020:
    VkSamplerYcbcrModelConversion = 4;
pub const VkSamplerYcbcrModelConversion_VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR:
    VkSamplerYcbcrModelConversion = 0;
pub const VkSamplerYcbcrModelConversion_VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR:
    VkSamplerYcbcrModelConversion = 1;
pub const VkSamplerYcbcrModelConversion_VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR:
    VkSamplerYcbcrModelConversion = 2;
pub const VkSamplerYcbcrModelConversion_VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR:
    VkSamplerYcbcrModelConversion = 3;
pub const VkSamplerYcbcrModelConversion_VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR:
    VkSamplerYcbcrModelConversion = 4;
pub const VkSamplerYcbcrModelConversion_VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM:
    VkSamplerYcbcrModelConversion = 2147483647;
pub type VkSamplerYcbcrModelConversion = ::std::os::raw::c_uint;
pub const VkSamplerYcbcrRange_VK_SAMPLER_YCBCR_RANGE_ITU_FULL: VkSamplerYcbcrRange = 0;
pub const VkSamplerYcbcrRange_VK_SAMPLER_YCBCR_RANGE_ITU_NARROW: VkSamplerYcbcrRange = 1;
pub const VkSamplerYcbcrRange_VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR: VkSamplerYcbcrRange = 0;
pub const VkSamplerYcbcrRange_VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR: VkSamplerYcbcrRange = 1;
pub const VkSamplerYcbcrRange_VK_SAMPLER_YCBCR_RANGE_MAX_ENUM: VkSamplerYcbcrRange = 2147483647;
pub type VkSamplerYcbcrRange = ::std::os::raw::c_uint;
pub const VkChromaLocation_VK_CHROMA_LOCATION_COSITED_EVEN: VkChromaLocation = 0;
pub const VkChromaLocation_VK_CHROMA_LOCATION_MIDPOINT: VkChromaLocation = 1;
pub const VkChromaLocation_VK_CHROMA_LOCATION_COSITED_EVEN_KHR: VkChromaLocation = 0;
pub const VkChromaLocation_VK_CHROMA_LOCATION_MIDPOINT_KHR: VkChromaLocation = 1;
pub const VkChromaLocation_VK_CHROMA_LOCATION_MAX_ENUM: VkChromaLocation = 2147483647;
pub type VkChromaLocation = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSamplerYcbcrConversionCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub format: VkFormat,
    pub ycbcrModel: VkSamplerYcbcrModelConversion,
    pub ycbcrRange: VkSamplerYcbcrRange,
    pub components: VkComponentMapping,
    pub xChromaOffset: VkChromaLocation,
    pub yChromaOffset: VkChromaLocation,
    pub chromaFilter: VkFilter,
    pub forceExplicitReconstruction: VkBool32,
}
#[test]
fn bindgen_test_layout_VkSamplerYcbcrConversionCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkSamplerYcbcrConversionCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSamplerYcbcrConversionCreateInfo>(),
        64usize,
        concat!("Size of: ", stringify!(VkSamplerYcbcrConversionCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSamplerYcbcrConversionCreateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkSamplerYcbcrConversionCreateInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerYcbcrConversionCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerYcbcrConversionCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerYcbcrConversionCreateInfo),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ycbcrModel) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerYcbcrConversionCreateInfo),
            "::",
            stringify!(ycbcrModel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ycbcrRange) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerYcbcrConversionCreateInfo),
            "::",
            stringify!(ycbcrRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).components) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerYcbcrConversionCreateInfo),
            "::",
            stringify!(components)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xChromaOffset) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerYcbcrConversionCreateInfo),
            "::",
            stringify!(xChromaOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yChromaOffset) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerYcbcrConversionCreateInfo),
            "::",
            stringify!(yChromaOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chromaFilter) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerYcbcrConversionCreateInfo),
            "::",
            stringify!(chromaFilter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).forceExplicitReconstruction) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerYcbcrConversionCreateInfo),
            "::",
            stringify!(forceExplicitReconstruction)
        )
    );
}
pub type PFN_vkCreateSamplerYcbcrConversion = ::std::option::Option<
    unsafe extern "C" fn(
        device: VkDevice,
        pCreateInfo: *const VkSamplerYcbcrConversionCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pYcbcrConversion: *mut VkSamplerYcbcrConversion,
    ) -> VkResult,
>;
pub type PFN_vkDestroySamplerYcbcrConversion = ::std::option::Option<
    unsafe extern "C" fn(
        device: VkDevice,
        ycbcrConversion: VkSamplerYcbcrConversion,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreateSamplerYcbcrConversionKHR = PFN_vkCreateSamplerYcbcrConversion;
pub type PFN_vkDestroySamplerYcbcrConversionKHR = PFN_vkDestroySamplerYcbcrConversion;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDescriptorSetLayoutSupport {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub supported: VkBool32,
}
#[test]
fn bindgen_test_layout_VkDescriptorSetLayoutSupport() {
    const UNINIT: ::std::mem::MaybeUninit<VkDescriptorSetLayoutSupport> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDescriptorSetLayoutSupport>(),
        24usize,
        concat!("Size of: ", stringify!(VkDescriptorSetLayoutSupport))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDescriptorSetLayoutSupport>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDescriptorSetLayoutSupport))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutSupport),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutSupport),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supported) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutSupport),
            "::",
            stringify!(supported)
        )
    );
}
pub type PFN_vkGetDescriptorSetLayoutSupport = ::std::option::Option<
    unsafe extern "C" fn(
        device: VkDevice,
        pCreateInfo: *const VkDescriptorSetLayoutCreateInfo,
        pSupport: *mut VkDescriptorSetLayoutSupport,
    ),
>;
pub type PFN_vkGetDescriptorSetLayoutSupportKHR = PFN_vkGetDescriptorSetLayoutSupport;
pub type VkDeviceAddress = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBufferDeviceAddressInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub buffer: VkBuffer,
}
#[test]
fn bindgen_test_layout_VkBufferDeviceAddressInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkBufferDeviceAddressInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkBufferDeviceAddressInfoEXT>(),
        24usize,
        concat!("Size of: ", stringify!(VkBufferDeviceAddressInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBufferDeviceAddressInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkBufferDeviceAddressInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferDeviceAddressInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferDeviceAddressInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferDeviceAddressInfoEXT),
            "::",
            stringify!(buffer)
        )
    );
}
pub type PFN_vkGetBufferDeviceAddressEXT = ::std::option::Option<
    unsafe extern "C" fn(
        device: VkDevice,
        pInfo: *const VkBufferDeviceAddressInfoEXT,
    ) -> VkDeviceAddress,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBufferDeviceAddressInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub buffer: VkBuffer,
}
#[test]
fn bindgen_test_layout_VkBufferDeviceAddressInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkBufferDeviceAddressInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkBufferDeviceAddressInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkBufferDeviceAddressInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBufferDeviceAddressInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkBufferDeviceAddressInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferDeviceAddressInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferDeviceAddressInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferDeviceAddressInfo),
            "::",
            stringify!(buffer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDeviceMemoryOpaqueCaptureAddressInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub memory: VkDeviceMemory,
}
#[test]
fn bindgen_test_layout_VkDeviceMemoryOpaqueCaptureAddressInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkDeviceMemoryOpaqueCaptureAddressInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDeviceMemoryOpaqueCaptureAddressInfo>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkDeviceMemoryOpaqueCaptureAddressInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceMemoryOpaqueCaptureAddressInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDeviceMemoryOpaqueCaptureAddressInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceMemoryOpaqueCaptureAddressInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceMemoryOpaqueCaptureAddressInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memory) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceMemoryOpaqueCaptureAddressInfo),
            "::",
            stringify!(memory)
        )
    );
}
pub type PFN_vkGetBufferDeviceAddress = ::std::option::Option<
    unsafe extern "C" fn(
        device: VkDevice,
        pInfo: *const VkBufferDeviceAddressInfo,
    ) -> VkDeviceAddress,
>;
pub type PFN_vkGetBufferOpaqueCaptureAddress = ::std::option::Option<
    unsafe extern "C" fn(device: VkDevice, pInfo: *const VkBufferDeviceAddressInfo) -> u64,
>;
pub type PFN_vkGetDeviceMemoryOpaqueCaptureAddress = ::std::option::Option<
    unsafe extern "C" fn(
        device: VkDevice,
        pInfo: *const VkDeviceMemoryOpaqueCaptureAddressInfo,
    ) -> u64,
>;
pub type PFN_vkGetBufferDeviceAddressKHR = PFN_vkGetBufferDeviceAddress;
pub type PFN_vkGetBufferOpaqueCaptureAddressKHR = PFN_vkGetBufferOpaqueCaptureAddress;
pub type PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR = PFN_vkGetDeviceMemoryOpaqueCaptureAddress;
extern "C" {
    pub fn ncnn_version() -> *const ::std::os::raw::c_char;
}
pub type ncnn_allocator_t = *mut __ncnn_allocator_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ncnn_allocator_t {
    pub pthis: *mut ::std::os::raw::c_void,
    pub fast_malloc: ::std::option::Option<
        unsafe extern "C" fn(
            allocator: ncnn_allocator_t,
            size: usize,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub fast_free: ::std::option::Option<
        unsafe extern "C" fn(allocator: ncnn_allocator_t, ptr: *mut ::std::os::raw::c_void),
    >,
}
#[test]
fn bindgen_test_layout___ncnn_allocator_t() {
    const UNINIT: ::std::mem::MaybeUninit<__ncnn_allocator_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__ncnn_allocator_t>(),
        24usize,
        concat!("Size of: ", stringify!(__ncnn_allocator_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__ncnn_allocator_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__ncnn_allocator_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pthis) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_allocator_t),
            "::",
            stringify!(pthis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fast_malloc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_allocator_t),
            "::",
            stringify!(fast_malloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fast_free) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_allocator_t),
            "::",
            stringify!(fast_free)
        )
    );
}
extern "C" {
    pub fn ncnn_allocator_create_pool_allocator() -> ncnn_allocator_t;
}
extern "C" {
    pub fn ncnn_allocator_create_unlocked_pool_allocator() -> ncnn_allocator_t;
}
extern "C" {
    pub fn ncnn_allocator_destroy(allocator: ncnn_allocator_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ncnn_option_t {
    _unused: [u8; 0],
}
pub type ncnn_option_t = *mut __ncnn_option_t;
extern "C" {
    pub fn ncnn_option_create() -> ncnn_option_t;
}
extern "C" {
    pub fn ncnn_option_destroy(opt: ncnn_option_t);
}
extern "C" {
    pub fn ncnn_option_get_num_threads(opt: ncnn_option_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_option_set_num_threads(opt: ncnn_option_t, num_threads: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ncnn_option_get_use_local_pool_allocator(opt: ncnn_option_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_option_set_use_local_pool_allocator(
        opt: ncnn_option_t,
        use_local_pool_allocator: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ncnn_option_set_blob_allocator(opt: ncnn_option_t, allocator: ncnn_allocator_t);
}
extern "C" {
    pub fn ncnn_option_set_workspace_allocator(opt: ncnn_option_t, allocator: ncnn_allocator_t);
}
extern "C" {
    pub fn ncnn_option_get_use_vulkan_compute(opt: ncnn_option_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_option_set_use_vulkan_compute(
        opt: ncnn_option_t,
        use_vulkan_compute: ::std::os::raw::c_int,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ncnn_mat_t {
    _unused: [u8; 0],
}
pub type ncnn_mat_t = *mut __ncnn_mat_t;
extern "C" {
    pub fn ncnn_mat_create() -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_create_1d(w: ::std::os::raw::c_int, allocator: ncnn_allocator_t) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_create_2d(
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        allocator: ncnn_allocator_t,
    ) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_create_3d(
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        allocator: ncnn_allocator_t,
    ) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_create_4d(
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        d: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        allocator: ncnn_allocator_t,
    ) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_create_external_1d(
        w: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
        allocator: ncnn_allocator_t,
    ) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_create_external_2d(
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
        allocator: ncnn_allocator_t,
    ) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_create_external_3d(
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
        allocator: ncnn_allocator_t,
    ) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_create_external_4d(
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        d: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
        allocator: ncnn_allocator_t,
    ) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_create_1d_elem(
        w: ::std::os::raw::c_int,
        elemsize: usize,
        elempack: ::std::os::raw::c_int,
        allocator: ncnn_allocator_t,
    ) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_create_2d_elem(
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        elemsize: usize,
        elempack: ::std::os::raw::c_int,
        allocator: ncnn_allocator_t,
    ) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_create_3d_elem(
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        elemsize: usize,
        elempack: ::std::os::raw::c_int,
        allocator: ncnn_allocator_t,
    ) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_create_4d_elem(
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        d: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        elemsize: usize,
        elempack: ::std::os::raw::c_int,
        allocator: ncnn_allocator_t,
    ) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_create_external_1d_elem(
        w: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
        elemsize: usize,
        elempack: ::std::os::raw::c_int,
        allocator: ncnn_allocator_t,
    ) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_create_external_2d_elem(
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
        elemsize: usize,
        elempack: ::std::os::raw::c_int,
        allocator: ncnn_allocator_t,
    ) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_create_external_3d_elem(
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
        elemsize: usize,
        elempack: ::std::os::raw::c_int,
        allocator: ncnn_allocator_t,
    ) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_create_external_4d_elem(
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        d: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
        elemsize: usize,
        elempack: ::std::os::raw::c_int,
        allocator: ncnn_allocator_t,
    ) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_destroy(mat: ncnn_mat_t);
}
extern "C" {
    pub fn ncnn_mat_fill_float(mat: ncnn_mat_t, v: f32);
}
extern "C" {
    pub fn ncnn_mat_clone(mat: ncnn_mat_t, allocator: ncnn_allocator_t) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_reshape_1d(
        mat: ncnn_mat_t,
        w: ::std::os::raw::c_int,
        allocator: ncnn_allocator_t,
    ) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_reshape_2d(
        mat: ncnn_mat_t,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        allocator: ncnn_allocator_t,
    ) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_reshape_3d(
        mat: ncnn_mat_t,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        allocator: ncnn_allocator_t,
    ) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_reshape_4d(
        mat: ncnn_mat_t,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        d: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        allocator: ncnn_allocator_t,
    ) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_get_dims(mat: ncnn_mat_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_mat_get_w(mat: ncnn_mat_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_mat_get_h(mat: ncnn_mat_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_mat_get_d(mat: ncnn_mat_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_mat_get_c(mat: ncnn_mat_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_mat_get_elemsize(mat: ncnn_mat_t) -> usize;
}
extern "C" {
    pub fn ncnn_mat_get_elempack(mat: ncnn_mat_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_mat_get_cstep(mat: ncnn_mat_t) -> usize;
}
extern "C" {
    pub fn ncnn_mat_get_data(mat: ncnn_mat_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ncnn_mat_get_channel_data(
        mat: ncnn_mat_t,
        c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ncnn_mat_from_pixels(
        pixels: *const ::std::os::raw::c_uchar,
        type_: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        allocator: ncnn_allocator_t,
    ) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_from_pixels_resize(
        pixels: *const ::std::os::raw::c_uchar,
        type_: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        target_width: ::std::os::raw::c_int,
        target_height: ::std::os::raw::c_int,
        allocator: ncnn_allocator_t,
    ) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_from_pixels_roi(
        pixels: *const ::std::os::raw::c_uchar,
        type_: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        roix: ::std::os::raw::c_int,
        roiy: ::std::os::raw::c_int,
        roiw: ::std::os::raw::c_int,
        roih: ::std::os::raw::c_int,
        allocator: ncnn_allocator_t,
    ) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_from_pixels_roi_resize(
        pixels: *const ::std::os::raw::c_uchar,
        type_: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        roix: ::std::os::raw::c_int,
        roiy: ::std::os::raw::c_int,
        roiw: ::std::os::raw::c_int,
        roih: ::std::os::raw::c_int,
        target_width: ::std::os::raw::c_int,
        target_height: ::std::os::raw::c_int,
        allocator: ncnn_allocator_t,
    ) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_mat_to_pixels(
        mat: ncnn_mat_t,
        pixels: *mut ::std::os::raw::c_uchar,
        type_: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ncnn_mat_to_pixels_resize(
        mat: ncnn_mat_t,
        pixels: *mut ::std::os::raw::c_uchar,
        type_: ::std::os::raw::c_int,
        target_width: ::std::os::raw::c_int,
        target_height: ::std::os::raw::c_int,
        target_stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ncnn_mat_substract_mean_normalize(
        mat: ncnn_mat_t,
        mean_vals: *const f32,
        norm_vals: *const f32,
    );
}
extern "C" {
    #[link_name = "\u{1}ncnn_convert_packing"]
    pub fn ncnn_convert_packing1(
        src: ncnn_mat_t,
        dst: *mut ncnn_mat_t,
        elempack: ::std::os::raw::c_int,
        opt: ncnn_option_t,
    );
}
extern "C" {
    #[link_name = "\u{1}ncnn_flatten"]
    pub fn ncnn_flatten1(src: ncnn_mat_t, dst: *mut ncnn_mat_t, opt: ncnn_option_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ncnn_blob_t {
    _unused: [u8; 0],
}
pub type ncnn_blob_t = *mut __ncnn_blob_t;
extern "C" {
    pub fn ncnn_blob_get_name(blob: ncnn_blob_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ncnn_blob_get_producer(blob: ncnn_blob_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_blob_get_consumer(blob: ncnn_blob_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_blob_get_shape(
        blob: ncnn_blob_t,
        dims: *mut ::std::os::raw::c_int,
        w: *mut ::std::os::raw::c_int,
        h: *mut ::std::os::raw::c_int,
        c: *mut ::std::os::raw::c_int,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ncnn_paramdict_t {
    _unused: [u8; 0],
}
pub type ncnn_paramdict_t = *mut __ncnn_paramdict_t;
extern "C" {
    pub fn ncnn_paramdict_create() -> ncnn_paramdict_t;
}
extern "C" {
    pub fn ncnn_paramdict_destroy(pd: ncnn_paramdict_t);
}
extern "C" {
    pub fn ncnn_paramdict_get_type(
        pd: ncnn_paramdict_t,
        id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_paramdict_get_int(
        pd: ncnn_paramdict_t,
        id: ::std::os::raw::c_int,
        def: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_paramdict_get_float(
        pd: ncnn_paramdict_t,
        id: ::std::os::raw::c_int,
        def: f32,
    ) -> f32;
}
extern "C" {
    pub fn ncnn_paramdict_get_array(
        pd: ncnn_paramdict_t,
        id: ::std::os::raw::c_int,
        def: ncnn_mat_t,
    ) -> ncnn_mat_t;
}
extern "C" {
    pub fn ncnn_paramdict_set_int(
        pd: ncnn_paramdict_t,
        id: ::std::os::raw::c_int,
        i: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ncnn_paramdict_set_float(pd: ncnn_paramdict_t, id: ::std::os::raw::c_int, f: f32);
}
extern "C" {
    pub fn ncnn_paramdict_set_array(pd: ncnn_paramdict_t, id: ::std::os::raw::c_int, v: ncnn_mat_t);
}
pub type ncnn_datareader_t = *mut __ncnn_datareader_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ncnn_datareader_t {
    pub pthis: *mut ::std::os::raw::c_void,
    pub scan: ::std::option::Option<
        unsafe extern "C" fn(
            dr: ncnn_datareader_t,
            format: *const ::std::os::raw::c_char,
            p: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            dr: ncnn_datareader_t,
            buf: *mut ::std::os::raw::c_void,
            size: usize,
        ) -> usize,
    >,
}
#[test]
fn bindgen_test_layout___ncnn_datareader_t() {
    const UNINIT: ::std::mem::MaybeUninit<__ncnn_datareader_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__ncnn_datareader_t>(),
        24usize,
        concat!("Size of: ", stringify!(__ncnn_datareader_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__ncnn_datareader_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__ncnn_datareader_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pthis) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_datareader_t),
            "::",
            stringify!(pthis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scan) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_datareader_t),
            "::",
            stringify!(scan)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_datareader_t),
            "::",
            stringify!(read)
        )
    );
}
extern "C" {
    pub fn ncnn_datareader_create() -> ncnn_datareader_t;
}
extern "C" {
    pub fn ncnn_datareader_create_from_stdio(fp: *mut FILE) -> ncnn_datareader_t;
}
extern "C" {
    pub fn ncnn_datareader_create_from_memory(
        mem: *mut *const ::std::os::raw::c_uchar,
    ) -> ncnn_datareader_t;
}
extern "C" {
    pub fn ncnn_datareader_destroy(dr: ncnn_datareader_t);
}
pub type ncnn_modelbin_t = *mut __ncnn_modelbin_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ncnn_modelbin_t {
    pub pthis: *mut ::std::os::raw::c_void,
    pub load_1d: ::std::option::Option<
        unsafe extern "C" fn(
            mb: ncnn_modelbin_t,
            w: ::std::os::raw::c_int,
            type_: ::std::os::raw::c_int,
        ) -> ncnn_mat_t,
    >,
    pub load_2d: ::std::option::Option<
        unsafe extern "C" fn(
            mb: ncnn_modelbin_t,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            type_: ::std::os::raw::c_int,
        ) -> ncnn_mat_t,
    >,
    pub load_3d: ::std::option::Option<
        unsafe extern "C" fn(
            mb: ncnn_modelbin_t,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            c: ::std::os::raw::c_int,
            type_: ::std::os::raw::c_int,
        ) -> ncnn_mat_t,
    >,
}
#[test]
fn bindgen_test_layout___ncnn_modelbin_t() {
    const UNINIT: ::std::mem::MaybeUninit<__ncnn_modelbin_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__ncnn_modelbin_t>(),
        32usize,
        concat!("Size of: ", stringify!(__ncnn_modelbin_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__ncnn_modelbin_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__ncnn_modelbin_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pthis) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_modelbin_t),
            "::",
            stringify!(pthis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).load_1d) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_modelbin_t),
            "::",
            stringify!(load_1d)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).load_2d) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_modelbin_t),
            "::",
            stringify!(load_2d)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).load_3d) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_modelbin_t),
            "::",
            stringify!(load_3d)
        )
    );
}
extern "C" {
    pub fn ncnn_modelbin_create_from_datareader(dr: ncnn_datareader_t) -> ncnn_modelbin_t;
}
extern "C" {
    pub fn ncnn_modelbin_create_from_mat_array(
        weights: *const ncnn_mat_t,
        n: ::std::os::raw::c_int,
    ) -> ncnn_modelbin_t;
}
extern "C" {
    pub fn ncnn_modelbin_destroy(mb: ncnn_modelbin_t);
}
pub type ncnn_layer_t = *mut __ncnn_layer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ncnn_layer_t {
    pub pthis: *mut ::std::os::raw::c_void,
    pub load_param: ::std::option::Option<
        unsafe extern "C" fn(layer: ncnn_layer_t, pd: ncnn_paramdict_t) -> ::std::os::raw::c_int,
    >,
    pub load_model: ::std::option::Option<
        unsafe extern "C" fn(layer: ncnn_layer_t, mb: ncnn_modelbin_t) -> ::std::os::raw::c_int,
    >,
    pub create_pipeline: ::std::option::Option<
        unsafe extern "C" fn(layer: ncnn_layer_t, opt: ncnn_option_t) -> ::std::os::raw::c_int,
    >,
    pub destroy_pipeline: ::std::option::Option<
        unsafe extern "C" fn(layer: ncnn_layer_t, opt: ncnn_option_t) -> ::std::os::raw::c_int,
    >,
    pub forward_1: ::std::option::Option<
        unsafe extern "C" fn(
            layer: ncnn_layer_t,
            bottom_blob: ncnn_mat_t,
            top_blob: *mut ncnn_mat_t,
            opt: ncnn_option_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub forward_n: ::std::option::Option<
        unsafe extern "C" fn(
            layer: ncnn_layer_t,
            bottom_blobs: *const ncnn_mat_t,
            n: ::std::os::raw::c_int,
            top_blobs: *mut ncnn_mat_t,
            n2: ::std::os::raw::c_int,
            opt: ncnn_option_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub forward_inplace_1: ::std::option::Option<
        unsafe extern "C" fn(
            layer: ncnn_layer_t,
            bottom_top_blob: ncnn_mat_t,
            opt: ncnn_option_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub forward_inplace_n: ::std::option::Option<
        unsafe extern "C" fn(
            layer: ncnn_layer_t,
            bottom_top_blobs: *mut ncnn_mat_t,
            n: ::std::os::raw::c_int,
            opt: ncnn_option_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout___ncnn_layer_t() {
    const UNINIT: ::std::mem::MaybeUninit<__ncnn_layer_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__ncnn_layer_t>(),
        72usize,
        concat!("Size of: ", stringify!(__ncnn_layer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__ncnn_layer_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__ncnn_layer_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pthis) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_layer_t),
            "::",
            stringify!(pthis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).load_param) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_layer_t),
            "::",
            stringify!(load_param)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).load_model) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_layer_t),
            "::",
            stringify!(load_model)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create_pipeline) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_layer_t),
            "::",
            stringify!(create_pipeline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destroy_pipeline) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_layer_t),
            "::",
            stringify!(destroy_pipeline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).forward_1) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_layer_t),
            "::",
            stringify!(forward_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).forward_n) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_layer_t),
            "::",
            stringify!(forward_n)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).forward_inplace_1) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_layer_t),
            "::",
            stringify!(forward_inplace_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).forward_inplace_n) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_layer_t),
            "::",
            stringify!(forward_inplace_n)
        )
    );
}
extern "C" {
    pub fn ncnn_layer_create() -> ncnn_layer_t;
}
extern "C" {
    pub fn ncnn_layer_create_by_typeindex(typeindex: ::std::os::raw::c_int) -> ncnn_layer_t;
}
extern "C" {
    pub fn ncnn_layer_create_by_type(type_: *const ::std::os::raw::c_char) -> ncnn_layer_t;
}
extern "C" {
    pub fn ncnn_layer_type_to_index(type_: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_layer_destroy(layer: ncnn_layer_t);
}
extern "C" {
    pub fn ncnn_layer_get_name(layer: ncnn_layer_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ncnn_layer_get_typeindex(layer: ncnn_layer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_layer_get_type(layer: ncnn_layer_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ncnn_layer_get_one_blob_only(layer: ncnn_layer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_layer_get_support_inplace(layer: ncnn_layer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_layer_get_support_vulkan(layer: ncnn_layer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_layer_get_support_packing(layer: ncnn_layer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_layer_get_support_bf16_storage(layer: ncnn_layer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_layer_get_support_fp16_storage(layer: ncnn_layer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_layer_get_support_image_storage(layer: ncnn_layer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_layer_set_one_blob_only(layer: ncnn_layer_t, enable: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ncnn_layer_set_support_inplace(layer: ncnn_layer_t, enable: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ncnn_layer_set_support_vulkan(layer: ncnn_layer_t, enable: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ncnn_layer_set_support_packing(layer: ncnn_layer_t, enable: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ncnn_layer_set_support_bf16_storage(layer: ncnn_layer_t, enable: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ncnn_layer_set_support_fp16_storage(layer: ncnn_layer_t, enable: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ncnn_layer_set_support_image_storage(layer: ncnn_layer_t, enable: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ncnn_layer_get_bottom_count(layer: ncnn_layer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_layer_get_bottom(
        layer: ncnn_layer_t,
        i: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_layer_get_top_count(layer: ncnn_layer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_layer_get_top(
        layer: ncnn_layer_t,
        i: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_blob_get_bottom_shape(
        layer: ncnn_layer_t,
        i: ::std::os::raw::c_int,
        dims: *mut ::std::os::raw::c_int,
        w: *mut ::std::os::raw::c_int,
        h: *mut ::std::os::raw::c_int,
        c: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ncnn_blob_get_top_shape(
        layer: ncnn_layer_t,
        i: ::std::os::raw::c_int,
        dims: *mut ::std::os::raw::c_int,
        w: *mut ::std::os::raw::c_int,
        h: *mut ::std::os::raw::c_int,
        c: *mut ::std::os::raw::c_int,
    );
}
pub type ncnn_layer_creator_t = ::std::option::Option<
    unsafe extern "C" fn(userdata: *mut ::std::os::raw::c_void) -> ncnn_layer_t,
>;
pub type ncnn_layer_destroyer_t = ::std::option::Option<
    unsafe extern "C" fn(layer: ncnn_layer_t, userdata: *mut ::std::os::raw::c_void),
>;
pub type ncnn_net_custom_layer_factory_t = *mut __ncnn_net_custom_layer_factory_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ncnn_net_custom_layer_factory_t {
    pub creator: ncnn_layer_creator_t,
    pub destroyer: ncnn_layer_destroyer_t,
    pub userdata: *mut ::std::os::raw::c_void,
    pub next: ncnn_net_custom_layer_factory_t,
}
#[test]
fn bindgen_test_layout___ncnn_net_custom_layer_factory_t() {
    const UNINIT: ::std::mem::MaybeUninit<__ncnn_net_custom_layer_factory_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__ncnn_net_custom_layer_factory_t>(),
        32usize,
        concat!("Size of: ", stringify!(__ncnn_net_custom_layer_factory_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__ncnn_net_custom_layer_factory_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__ncnn_net_custom_layer_factory_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).creator) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_net_custom_layer_factory_t),
            "::",
            stringify!(creator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destroyer) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_net_custom_layer_factory_t),
            "::",
            stringify!(destroyer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userdata) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_net_custom_layer_factory_t),
            "::",
            stringify!(userdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_net_custom_layer_factory_t),
            "::",
            stringify!(next)
        )
    );
}
pub type ncnn_net_t = *mut __ncnn_net_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ncnn_net_t {
    pub pthis: *mut ::std::os::raw::c_void,
    pub custom_layer_factory: ncnn_net_custom_layer_factory_t,
}
#[test]
fn bindgen_test_layout___ncnn_net_t() {
    const UNINIT: ::std::mem::MaybeUninit<__ncnn_net_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__ncnn_net_t>(),
        16usize,
        concat!("Size of: ", stringify!(__ncnn_net_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__ncnn_net_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__ncnn_net_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pthis) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_net_t),
            "::",
            stringify!(pthis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom_layer_factory) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__ncnn_net_t),
            "::",
            stringify!(custom_layer_factory)
        )
    );
}
extern "C" {
    pub fn ncnn_net_create() -> ncnn_net_t;
}
extern "C" {
    pub fn ncnn_net_destroy(net: ncnn_net_t);
}
extern "C" {
    pub fn ncnn_net_get_option(net: ncnn_net_t) -> ncnn_option_t;
}
extern "C" {
    pub fn ncnn_net_set_option(net: ncnn_net_t, opt: ncnn_option_t);
}
extern "C" {
    pub fn ncnn_net_set_vulkan_device(net: ncnn_net_t, device_index: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ncnn_net_register_custom_layer_by_type(
        net: ncnn_net_t,
        type_: *const ::std::os::raw::c_char,
        creator: ncnn_layer_creator_t,
        destroyer: ncnn_layer_destroyer_t,
        userdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn ncnn_net_register_custom_layer_by_typeindex(
        net: ncnn_net_t,
        typeindex: ::std::os::raw::c_int,
        creator: ncnn_layer_creator_t,
        destroyer: ncnn_layer_destroyer_t,
        userdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn ncnn_net_load_param(
        net: ncnn_net_t,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_net_load_param_bin(
        net: ncnn_net_t,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_net_load_model(
        net: ncnn_net_t,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_net_load_param_memory(
        net: ncnn_net_t,
        mem: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_net_load_param_bin_memory(
        net: ncnn_net_t,
        mem: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_net_load_model_memory(
        net: ncnn_net_t,
        mem: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_net_load_param_datareader(
        net: ncnn_net_t,
        dr: ncnn_datareader_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_net_load_param_bin_datareader(
        net: ncnn_net_t,
        dr: ncnn_datareader_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_net_load_model_datareader(
        net: ncnn_net_t,
        dr: ncnn_datareader_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_net_clear(net: ncnn_net_t);
}
extern "C" {
    pub fn ncnn_net_get_input_count(net: ncnn_net_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_net_get_output_count(net: ncnn_net_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_net_get_input_name(
        net: ncnn_net_t,
        i: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ncnn_net_get_output_name(
        net: ncnn_net_t,
        i: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ncnn_net_get_input_index(
        net: ncnn_net_t,
        i: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_net_get_output_index(
        net: ncnn_net_t,
        i: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ncnn_extractor_t {
    _unused: [u8; 0],
}
pub type ncnn_extractor_t = *mut __ncnn_extractor_t;
extern "C" {
    pub fn ncnn_extractor_create(net: ncnn_net_t) -> ncnn_extractor_t;
}
extern "C" {
    pub fn ncnn_extractor_destroy(ex: ncnn_extractor_t);
}
extern "C" {
    pub fn ncnn_extractor_set_option(ex: ncnn_extractor_t, opt: ncnn_option_t);
}
extern "C" {
    pub fn ncnn_extractor_input(
        ex: ncnn_extractor_t,
        name: *const ::std::os::raw::c_char,
        mat: ncnn_mat_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_extractor_extract(
        ex: ncnn_extractor_t,
        name: *const ::std::os::raw::c_char,
        mat: *mut ncnn_mat_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_extractor_input_index(
        ex: ncnn_extractor_t,
        index: ::std::os::raw::c_int,
        mat: ncnn_mat_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ncnn_extractor_extract_index(
        ex: ncnn_extractor_t,
        index: ::std::os::raw::c_int,
        mat: *mut ncnn_mat_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}ncnn_copy_make_border"]
    pub fn ncnn_copy_make_border1(
        src: ncnn_mat_t,
        dst: ncnn_mat_t,
        top: ::std::os::raw::c_int,
        bottom: ::std::os::raw::c_int,
        left: ::std::os::raw::c_int,
        right: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        v: f32,
        opt: ncnn_option_t,
    );
}
extern "C" {
    #[link_name = "\u{1}ncnn_copy_make_border_3d"]
    pub fn ncnn_copy_make_border_3d1(
        src: ncnn_mat_t,
        dst: ncnn_mat_t,
        top: ::std::os::raw::c_int,
        bottom: ::std::os::raw::c_int,
        left: ::std::os::raw::c_int,
        right: ::std::os::raw::c_int,
        front: ::std::os::raw::c_int,
        behind: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        v: f32,
        opt: ncnn_option_t,
    );
}
extern "C" {
    #[link_name = "\u{1}ncnn_copy_cut_border"]
    pub fn ncnn_copy_cut_border1(
        src: ncnn_mat_t,
        dst: ncnn_mat_t,
        top: ::std::os::raw::c_int,
        bottom: ::std::os::raw::c_int,
        left: ::std::os::raw::c_int,
        right: ::std::os::raw::c_int,
        opt: ncnn_option_t,
    );
}
extern "C" {
    #[link_name = "\u{1}ncnn_copy_cut_border_3d"]
    pub fn ncnn_copy_cut_border_3d1(
        src: ncnn_mat_t,
        dst: ncnn_mat_t,
        top: ::std::os::raw::c_int,
        bottom: ::std::os::raw::c_int,
        left: ::std::os::raw::c_int,
        right: ::std::os::raw::c_int,
        front: ::std::os::raw::c_int,
        behind: ::std::os::raw::c_int,
        opt: ncnn_option_t,
    );
}
extern "C" {
    #[link_name = "\u{1}ncnn_draw_rectangle_c1"]
    pub fn ncnn_draw_rectangle_c12(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        rx: ::std::os::raw::c_int,
        ry: ::std::os::raw::c_int,
        rw: ::std::os::raw::c_int,
        rh: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
        thickness: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}ncnn_draw_rectangle_c2"]
    pub fn ncnn_draw_rectangle_c22(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        rx: ::std::os::raw::c_int,
        ry: ::std::os::raw::c_int,
        rw: ::std::os::raw::c_int,
        rh: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
        thickness: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}ncnn_draw_rectangle_c3"]
    pub fn ncnn_draw_rectangle_c32(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        rx: ::std::os::raw::c_int,
        ry: ::std::os::raw::c_int,
        rw: ::std::os::raw::c_int,
        rh: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
        thickness: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}ncnn_draw_rectangle_c4"]
    pub fn ncnn_draw_rectangle_c42(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        rx: ::std::os::raw::c_int,
        ry: ::std::os::raw::c_int,
        rw: ::std::os::raw::c_int,
        rh: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
        thickness: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}ncnn_draw_text_c1"]
    pub fn ncnn_draw_text_c12(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        fontpixelsize: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}ncnn_draw_text_c2"]
    pub fn ncnn_draw_text_c22(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        fontpixelsize: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}ncnn_draw_text_c3"]
    pub fn ncnn_draw_text_c32(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        fontpixelsize: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}ncnn_draw_text_c4"]
    pub fn ncnn_draw_text_c42(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        fontpixelsize: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}ncnn_draw_circle_c1"]
    pub fn ncnn_draw_circle_c12(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        cx: ::std::os::raw::c_int,
        cy: ::std::os::raw::c_int,
        radius: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
        thickness: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}ncnn_draw_circle_c2"]
    pub fn ncnn_draw_circle_c22(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        cx: ::std::os::raw::c_int,
        cy: ::std::os::raw::c_int,
        radius: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
        thickness: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}ncnn_draw_circle_c3"]
    pub fn ncnn_draw_circle_c32(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        cx: ::std::os::raw::c_int,
        cy: ::std::os::raw::c_int,
        radius: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
        thickness: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}ncnn_draw_circle_c4"]
    pub fn ncnn_draw_circle_c42(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        cx: ::std::os::raw::c_int,
        cy: ::std::os::raw::c_int,
        radius: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
        thickness: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}ncnn_draw_line_c1"]
    pub fn ncnn_draw_line_c12(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        x0: ::std::os::raw::c_int,
        y0: ::std::os::raw::c_int,
        x1: ::std::os::raw::c_int,
        y1: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
        thickness: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}ncnn_draw_line_c2"]
    pub fn ncnn_draw_line_c22(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        x0: ::std::os::raw::c_int,
        y0: ::std::os::raw::c_int,
        x1: ::std::os::raw::c_int,
        y1: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
        thickness: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}ncnn_draw_line_c3"]
    pub fn ncnn_draw_line_c32(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        x0: ::std::os::raw::c_int,
        y0: ::std::os::raw::c_int,
        x1: ::std::os::raw::c_int,
        y1: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
        thickness: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}ncnn_draw_line_c4"]
    pub fn ncnn_draw_line_c42(
        pixels: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        x0: ::std::os::raw::c_int,
        y0: ::std::os::raw::c_int,
        x1: ::std::os::raw::c_int,
        y1: ::std::os::raw::c_int,
        color: ::std::os::raw::c_uint,
        thickness: ::std::os::raw::c_int,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_2 {
    pub _address: u8,
}
